<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-28T10:17:35-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Brooke K. Ryan</title><subtitle>Personal website and blog.</subtitle><author><name>brooke</name></author><entry><title type="html">How to Access UCI‚Äôs OpenLab (via SSH or JupyterHub)</title><link href="http://localhost:4000/blog/how-to-ssh-into-uci-openlab.html" rel="alternate" type="text/html" title="How to Access UCI‚Äôs OpenLab (via SSH or JupyterHub)" /><published>2022-06-22T00:00:00-07:00</published><updated>2022-06-22T00:00:00-07:00</updated><id>http://localhost:4000/blog/how-to-ssh-into-uci-openlab</id><content type="html" xml:base="http://localhost:4000/blog/how-to-ssh-into-uci-openlab.html"><![CDATA[<p>In this guide, I will walk you through a few different ways you can access UCI‚Äôs OpenLab, which is essentially the campus‚Äôs ‚Äúremote computer lab.‚Äù When I was an undergrad, this process always overwhelmed me (I barely knew how to program, how was I supposed to navigate the terminal and all this SSH business?!) Even now with several years of software engineering experience I always forget the steps for how to do this. So, I‚Äôm writing this for my students in ICS 33 this quarter, and also as a reminder for myself because I definitely <em>will</em> forget if I don‚Äôt put it somewhere. ü§£</p>

<p>The included YouTube video above walks you through the <a href="#prerequisites">Prerequisites</a>, as well as <a href="#access-openlab-via-ssh">the SSH method</a> to connect to OpenLab. In this post, I‚Äôve also included a <a href="#access-a-fully-remote-desktop-via-jupyterhub">more user-friendly method to connect to OpenLab</a> which will especially be relevant for my ICS 33 students. All the <a href="#steps-1">terminal commands</a> and <a href="#required-tools">tools</a> discussed in the video are also included in this post for convenience.</p>

<p>So, without further ado, lets jump into the tutorial!</p>

<hr />

<h1 id="prerequisites">Prerequisites</h1>
<h2 id="ics-login">ICS Login</h2>
<p>The very first thing you need to do is to make sure that you actually have an ICS login. This is actually distinct from your @UCI.edu login.</p>

<p>If your major falls under the Bren School of Information and Computer Sciences, then you already have an account (and it should be the same as your UCInetid). If that‚Äôs you, then skip to the next section.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/ics_login_page.png" />
  <figcaption>First, visit the <a href="https://support.ics.uci.edu/auth/">ICS page</a> to register for a username if you don't already have one.</figcaption>
</figure>

<p>If you‚Äôre not sure if you already have one or not, just type in your student ID in the form.</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/ics_error.png" />
  <figcaption>Error message that appeared for me since I already had an ICS login.</figcaption>
</figure>

<p>If you don‚Äôt have one yet, then fill out the prompts on the form. According to <a href="https://www.ics.uci.edu/~lab/students/acct_activate.php#:~:text=Go%20to%20https%3A%2F%2Fsupport,Follow%20the%20on%2Dscreen%20prompts">this page</a>, your account should be made within 2 hours, and should be the same name as your regular UCInetid.</p>

<h2 id="required-tools">Required Tools</h2>
<h3 id="vpn">VPN</h3>
<p>Next, you‚Äôre going to need a way to access the VPN. It allows you to connect to the UCI network when you‚Äôre not on campus. This in and of itself is not enough to get on OpenLab, but its a prerequisite step (we‚Äôll talk about how to do this below).</p>

<p>To get on the VPN, you need to download some software. There‚Äôs some really good UCI-made articles on this step, so I won‚Äôt re-write this all out.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/vpn.png" />
  <figcaption>Follow the steps on the <a href="https://uci.service-now.com/sp?id=kb_article_view&amp;sysparm_article=KB0012170&amp;sys_kb_id=cfb8e07b1b700d9c4d61baeedc4bcb2f&amp;spa=1">UCI ServiceNow page</a>  to download the VPN software.</figcaption>
</figure>

<p>After following these steps, you should have the Cisco AnyConnect VPN client (or equivalent, if it recommended a different one for your OS) downloaded to your machine.</p>

<h3 id="terminal">Terminal</h3>
<p>Finally, you will likely want to have a terminal. If you‚Äôre just doing Jupyter Notebooks, its not 100% needed, but you will likely need the terminal to transfer files remotely. Plus, its a good tool to familiarize yourself with for your Computer Science education, anyways, and you will almost definitely be using it in your courses.</p>

<p>If you‚Äôre using a Mac, you can use the built-in Terminal application (Linux will also have a built-in one you can use). I personally use <a href="https://iterm2.com/">iTerm2</a> and I really love it because of the extra functionality such as split-panes and additional appearance customizations.</p>

<p>I haven‚Äôt been regularly using a Windows-based machine in a few years, but I enjoyed using the beta of <a href="https://docs.microsoft.com/en-us/windows/terminal/">Windows Terminal</a>, which looks like now there is a full version available for everyone. I liked using this much better than PuTTY and Windows Git Bash. When in doubt, you can always ask your instructor what they‚Äôd recommend.</p>

<hr />
<h1 id="openlab-tutorial-two-different-ways">OpenLab Tutorial (Two Different Ways)</h1>
<p>Now that the prerequisites are out of the way, lets jump into the actual tutorial! Below, I have provided two different methods of accessing OpenLab, depending on what your needs are. <a href="#access-a-fully-remote-desktop-via-jupyterhub">The first way</a> gives you a full GUI and remote desktop experience. <a href="#access-openlab-via-ssh">The second way</a> I‚Äôd recommend for more advanced users or students in upper-division classes, which accesses OpenLab through the terminal using SSH. This is personally what I use, because its a bit snappier, but newer students will likely prefer the first method because its more user-friendly.</p>

<hr />

<h1 id="access-a-fully-remote-desktop-via-jupyterhub">Access a Fully Remote Desktop via JupyterHub</h1>
<p>This part of the tutorial will cover how to access <a href="https://swiki.ics.uci.edu/doku.php/virtual_environments:jupyterhub">UCI‚Äôs JupyterHub</a>. This is the way I‚Äôd recommend for my ICS 33 students, or others in lower-divison courses.</p>

<h2 id="steps">Steps</h2>
<ol>
  <li>Open Cisco AnyConnect and connect to the VPN (<a href="https://uci.service-now.com/sp?id=kb_article_view&amp;sysparm_article=KB0012170&amp;sys_kb_id=cfb8e07b1b700d9c4d61baeedc4bcb2f&amp;spa=1">documented in this guide</a>, or watch the first part of <a href="#video">my video</a>).</li>
  <li>Go to the browser, and type in <a href="https://hub.ics.uci.edu/">https://hub.ics.uci.edu/</a></li>
</ol>

<p>And you‚Äôre in!</p>

<p>From there, you can simply navigate over to Jupyter Notebooks to start working on your programming assignment.</p>
<figure>
<div class="row">
<div class="col-6">
  <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/open_jupyter.png" alt="" />
  </div>
  <div class="col-6">
    <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/jupyter.png" alt="" />
    </div>
    </div>
  <figcaption>Navigate to <a href="https://hub.ics.uci.edu/">hub.ics.uci.edu</a>. Then, click on Python 3 (outlined in red) to open Jupyter Notebooks. Result should look like what I have on the right. </figcaption>
</figure>

<p>Or, you can even use the full desktop by clicking on the ‚ÄúDesktop‚Äù icon. This could be useful if you also want to interact with the Terminal or need to go to the browser to download your assignments from Canvas.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/full_desktop.png" />
  <figcaption>Full desktop, with Terminal and Firefox, that you can access via JupyterHub from your browser. Its a bit laggy, but great if you need to download something from Canvas or use the terminal.</figcaption>
</figure>

<p><a href="https://swiki.ics.uci.edu/doku.php/virtual_environments:jupyterhub">This article</a> has some additional resources and how-to‚Äôs for more in-depth usage if something you need is not covered here.</p>

<p>Although using the JupyterHub is probably a bit less snappy than it would be in the physical ICS labs, it is really user-friendly especially for newer students who are still getting used to programming, so it‚Äôs a fair trade for all the functionality you get.</p>

<hr />

<h1 id="access-openlab-via-ssh">Access OpenLab via SSH</h1>
<p>For students in upper-division classes, or those conducting research in a lab on campus, connecting to OpenLab through the Terminal is preferred. Its much quicker, and by learning a few simple remote file copy commands, you can really save yourself a lot of time.</p>

<p>For this method, I made a YouTube video that explains all these same steps, so if you‚Äôd prefer you can watch that. I just outlined the same steps below for convenience and for copy-pasting the commands easily.</p>

<figure id="video">
<iframe class="rounded border-brooke" style="width:99%;" height="450" src="https://www.youtube.com/embed/UJ2UBCc3vZg" frameborder="0" allowfullscreen=""></iframe>
  <figcaption>Tutorial video for accessing OpenLab via SSH. Terminal commands listed below.</figcaption>
</figure>

<h2 id="steps-1">Steps</h2>
<ol>
  <li>Open Cisco AnyConnect and connect to the VPN (<a href="https://uci.service-now.com/sp?id=kb_article_view&amp;sysparm_article=KB0012170&amp;sys_kb_id=cfb8e07b1b700d9c4d61baeedc4bcb2f&amp;spa=1">documented in this guide</a>, or watch video above for example).
    <ul>
      <li>Note: If you want to circumvent this step in the future, see <a href="https://gist.github.com/ChaseC99/9506cf219ca33c60693ea4c4396a4c19#how-to-add-an-ssh-key-to-openlab">this guide</a> on how to add an SSH Key to OpenLab. However, if you‚Äôre trying to do this for on-campus research, this won‚Äôt work because you‚Äôll still need to connect to the VPN (I tried üò≠).</li>
    </ul>
  </li>
  <li>Go to the terminal, and type in <code class="language-plaintext highlighter-rouge">ssh UCInetid@openlab.ics.uci.edu</code> (replace <code class="language-plaintext highlighter-rouge">UCInetid</code> with your ID.)
    <ul>
      <li>Note: if you need to connect to a specific server, for instance, <code class="language-plaintext highlighter-rouge">circinus-37</code>, then use <code class="language-plaintext highlighter-rouge">ssh UCInetid@circinus-37.ics.uci.edu</code></li>
    </ul>
  </li>
  <li>Type in your ICS password (might not necessarily be the same as your UCInetid password).</li>
  <li>If you see a terminal window that looks like mine below, you successfully got in!</li>
</ol>

<figure>
  <img class="rounded border-brooke" src="/assets/images/openlab_tutorial/terminal.png" />
  <figcaption>You should see a message similar to this if you successfully connected to OpenLab. The <code>@circinus-37</code> seen in mine will vary based on which specific server you got connected to. </figcaption>
</figure>

<h2 id="remotely-transfer-files">Remotely transfer files</h2>
<p>Now that you‚Äôre connected, you might want to remotely transfer files to and from your local machine to OpenLab. I give the full demo in the video so if you‚Äôd like to see that in-action check that out. Below are the commands:</p>

<ul>
  <li>Copy single file from local to remote (run in your local terminal):</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">scp myfile.txt UCINetID@openlab.ics.uci.edu:/remote/folder/</code></p>
<ul>
  <li>Copy single file from remote to local (run in your local terminal):</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">scp UCINetID@openlab.ics.uci.edu:/remote/folder/remote.txt local.txt</code></p>
<ul>
  <li>Copy multiple files from local to remote.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">scp myfile1.txt myfile2.txt UCINetID@openlab.ics.uci.edu:/remote/folder/</code></p>
<ul>
  <li>Copy all files from local to remote using scp.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">scp * UCINetID@openlab.ics.uci.edu:/remote/folder/</code></p>
<ul>
  <li>Copy all files and folders recursively from local to remote.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">scp -r * UCINetID@openlab.ics.uci.edu:/remote/folder/</code></p>

<p>For more information, search ‚Äú<code class="language-plaintext highlighter-rouge">scp</code> command (linux)‚Äù on Google.</p>

<hr />
<h1 id="conclusion">Conclusion</h1>

<h2 id="a-case-for-the-physical-computer-labs">A Case for the Physical Computer Labs</h2>
<p>Despite the length and depth of this tutorial, OpenLab is no replacement for going to the physical computer labs. Yes, I know, it‚Äôs smelly, it‚Äôs a long walk, it‚Äôs dark. The keyboard is sticky for god knows what reason. When I was an undergraduate and one of the few women in my introductory CS courses, it could feel like the whole lab was watching my every move just <em>waiting</em> for me to mess up or ask some dumb question. I viscerally remember some of my first experiences in the CS lab at UCSD, I felt so embarrassed to ask the most basic question of them all‚Äî‚Äúwhere is the Terminal?‚Äù It can feel easier to hide in your house and do your programming there instead, especially now in a post-Covid world where that has become a lot more socially acceptable.</p>

<p>But, for all the flaws of the labs, it‚Äôs also where a lot of learning takes place. For one, its usually where office hours or tutoring hours take place. I know for me, I would not have passed Basic Data Structures without the patient assistance of the tutors in the labs. In your earlier classes, you really need to make an effort (as hard as it is) to get up and go to the labs so you can get that precious help. As you get more experienced in your upper-division courses, you can gradually wean yourself off the labs and work more frequently from the comfort of your home (and you‚Äôll have really earned it!)</p>

<p>The labs also don‚Äôt <em>have</em> to be as scary as it was for me in my early years. Although it <em>sucks</em> feeling like one of the only women/person-who-looks-like-you in your Computer Science class, it can become in and of itself a way to bond with the few other marginalized people in the class because there is that instant sense of understanding and camaraderie from that experience. Find some other folks, form a study group and some sense of community. Form a ritual‚Äîmaybe you all grab lunch together after class and then afterwards lug your way over to the labs together to grind out your programming assignments. You‚Äôll form some study buddies, and you‚Äôll be much more likely to stay on top of your assignments and get the help you need early and often. In a few years you all will laugh about your times in the CS labs (I remember one time sneaking some beer in paper bags into the labs to attempt to make our homework more fun, don‚Äôt try this, kids). Some of the buddies I made in my intro CS classes ended up being my friends throughout my whole college experience.</p>

<p>So, hopefully this tutorial will help you with connecting to OpenLab for times that you‚Äôve got the sniffles or want to work on your assignment outside of lab hours, but still plan on draggin‚Äô your butt over to the labs for most of the quarter!</p>

<p>Please let me know if this tutorial helped, or if there is any additional content you‚Äôd like to see covered next time! üëã</p>]]></content><author><name>Brooke K. Ryan</name><email>brooke.ryan@uci.edu</email></author><category term="tutorial" /><summary type="html"><![CDATA[In this guide, I will walk you through a few different ways you can access UCI‚Äôs OpenLab, which is essentially the campus‚Äôs ‚Äúremote computer lab.‚Äù When I was an undergrad, this process always overwhelmed me (I barely knew how to program, how was I supposed to navigate the terminal and all this SSH business?!) Even now with several years of software engineering experience I always forget the steps for how to do this. So, I‚Äôm writing this for my students in ICS 33 this quarter, and also as a reminder for myself because I definitely will forget if I don‚Äôt put it somewhere. ü§£]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/openlab_tutorial/image.png" /><media:content medium="image" url="http://localhost:4000/assets/images/openlab_tutorial/image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Two Ways to Sync Your Zotero Group Library in Overleaf</title><link href="http://localhost:4000/blog/connect-zotero-overleaf.html" rel="alternate" type="text/html" title="Two Ways to Sync Your Zotero Group Library in Overleaf" /><published>2022-06-08T00:00:00-07:00</published><updated>2022-06-08T00:00:00-07:00</updated><id>http://localhost:4000/blog/connect-zotero-overleaf</id><content type="html" xml:base="http://localhost:4000/blog/connect-zotero-overleaf.html"><![CDATA[<p>Here‚Äôs a very quick guide on how to connect your Zotero Group Library to Overleaf. I have used the <a href="connect-zotero-overleaf.html#import-from-external-url">alternative solution</a> detailed below in the past when the default ‚ÄúFrom Zotero‚Äù integration in Overleaf did not work for me. I wanted to post this as a reference‚Äîfor myself, because I always forget how to do this when I‚Äôm about to write a paper‚Äîand also in case it happens to be useful for anyone else.</p>

<h1 id="import-from-zotero">Import from Zotero</h1>
<p>First, you should try to import your Zotero group bibliography the ‚Äúusual‚Äù way. To do this, click on ‚ÄúNew File‚Äù, and select ‚ÄúFrom Zotero.‚Äù You‚Äôll select the appropriate Library from here.</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/zotero_preferred.png" alt="Preferred Way" />
  <figcaption>To get to this dialog, select "New File" from your project page.</figcaption>
</figure>
<p>After, your bibliography should appear in your project page:</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/first_way.png" alt="Preferred Way" />
</figure>
<p>Most of the time this should work, but I have had an issue on at least one project where this method didn‚Äôt work. The second methodology listed below will help in those cases.</p>
<h1 id="import-from-external-url">Import from External URL</h1>
<p>If the first method didn‚Äôt work, here‚Äôs an easy workaround. 
Navigate to the same ‚ÄúNew File‚Äù dialog, but then click ‚ÄúFrom External URL.‚Äù</p>

<p>Using the url <code class="language-plaintext highlighter-rouge">https://api.zotero.org/groups/INSERT_GROUPID/items/top?format=bibtex&amp;style=numeric&amp;limit=100</code>, and replacing the <code class="language-plaintext highlighter-rouge">INSERT_GROUPID</code> with the appropriate ID from the desired Zotero group, you should be able to import your bibliography this way.</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/zotero_alternative.png" alt="Preferred Way" />
  <figcaption>Use the url https://api.zotero.org/groups/INSERT_GROUPID/items/top?format=bibtex&amp;style=numeric&amp;limit=100 in the From External URL option.</figcaption>
</figure>
<h2 id="example">Example</h2>
<p>To get the group ID from your Zotero group, you‚Äôll need to go onto your Zotero account on the web interface. For instance, my group library <strong>AI Education Project</strong> is hosted at <code class="language-plaintext highlighter-rouge">https://www.zotero.org/groups/4669023/ai_education_project</code>. The <code class="language-plaintext highlighter-rouge">Group ID</code> in this case is the number hash after the <code class="language-plaintext highlighter-rouge">groups/</code>, part of the URL, in this case, <code class="language-plaintext highlighter-rouge">4669023</code>.</p>

<p>In order for this workaround to be successful, the Zotero group settings need to be set to ‚ÄúPublic.‚Äù In the example I‚Äôm using, my group type was Public and the Membership was closed.</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/membership.png" alt="Preferred Way" />
  <figcaption>Group settings on Zotero must be Public.</figcaption>
</figure>

<p>Now, go back into Overleaf and paste in this URL with the group ID you just retrieved into the ‚ÄúFrom External URL‚Äù form.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/example.png" alt="Preferred Way" />
  <figcaption>Pasting the group ID,  4669023, into the URL: https://api.zotero.org/groups/4669023/items/top?format=bibtex&amp;style=numeric&amp;limit=100</figcaption>
</figure>

<p>Then, navigating to our Overleaf project, we see that the file ai_education_project.bib was successfully imported!</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/example_result.png" alt="Preferred Way" />
</figure>

<h1 id="conclusion">Conclusion</h1>
<p>Hopefully this guide helped anyone who is on a paper deadline and wants to import their group bibliography in an efficient workflow. Happy paper writing!</p>

<h1 id="references">References</h1>
<p>I initially saw this tip written about buried at the bottom of blog post written by Yuxuan Mei <a class="citation" href="#UsingOverleafZoteroMeiYuxuan">[1]</a>. Since I believe this tip is so useful, and in that post its just included at the very bottom, I wanted to make a post dedicated to it entirely for clarity.</p>

<ol class="bibliography"><li><span id="UsingOverleafZoteroMeiYuxuan">[1] Yuxuan Mei, <a href="https://homes.cs.washington.edu/~ym2552/blogs/overleaf-with-zotero.html">‚ÄúUsing Overleaf with Zotero.‚Äù</a> </span></li></ol>]]></content><author><name>Brooke K. Ryan</name><email>brooke.ryan@uci.edu</email></author><category term="research" /><category term="productivity" /><category term="automation" /><summary type="html"><![CDATA[Here‚Äôs a very quick guide on how to connect your Zotero Group Library to Overleaf. I have used the alternative solution detailed below in the past when the default ‚ÄúFrom Zotero‚Äù integration in Overleaf did not work for me. I wanted to post this as a reference‚Äîfor myself, because I always forget how to do this when I‚Äôm about to write a paper‚Äîand also in case it happens to be useful for anyone else.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/zotero_alternative.png" /><media:content medium="image" url="http://localhost:4000/assets/images/zotero_alternative.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Find an Easy First Issue in an Open-Source GitHub Project</title><link href="http://localhost:4000/blog/how-to-find-easy-first-issue-github.html" rel="alternate" type="text/html" title="How to Find an Easy First Issue in an Open-Source GitHub Project" /><published>2022-05-21T00:00:00-07:00</published><updated>2022-05-21T00:00:00-07:00</updated><id>http://localhost:4000/blog/easy-first-issue</id><content type="html" xml:base="http://localhost:4000/blog/how-to-find-easy-first-issue-github.html"><![CDATA[<p>As a new developer to an open-source project, it can be quite intimidating to figure out where to begin, particularly for your first contribution to the project. And the first step before even doing your first contribution is actually <em>finding</em> that first issue to work on‚Äîa task which I‚Äôve found is often underestimated for its difficulty. While there do exist many blog posts on this issue, they tend to begin and end at filtering the list of issues by using the ‚Äúgood first issue‚Äù label on GitHub. However, as we will see in the example we‚Äôll walk through, that doesn‚Äôt universally work for all open-source projects‚Äîand beginners are then left in the dust about what to do next.</p>

<p>My goal with this post is to demonstrate for you how you‚Äôre going to be walking through a given open source project to identify a couple of ‚Äúeasy‚Äù first issues to work on. I will also walk you through some of the nuances of issues, and importantly the <strong>social context</strong> of the project, and how these play an important role in navigating your open-source project of choice.</p>

<h1 id="context-and-prerequisites">Context and Prerequisites</h1>
<p>I wrote this blog post as an adaptation of a lecture segment I‚Äôve given in the Reverse Engineering and Modeling course at UC Irvine with Professor Andr√© van der Hoek, where we teach students how to become productive contributors to large, unfamiliar software systems. In fact, we even wrote <a href="https://brookekryan.com/research/reading-to-write.html">a paper</a> on that course that appeared in the International Conference on Software Engineering!</p>

<p>So, I‚Äôm writing this post for an audience similar to our student cohort in the Professional Master of Software Engineering program‚Äîfolks who already know how to program, but maybe have not had much experience working in an open-source system. I‚Äôm also assuming that you already have an open-source project of choice to work on. (If this is something you need help with, let me know in the comments and I can work on this as a related post!)</p>

<p>The open source project I‚Äôm going to be using to walk through is <a href="https://github.com/tensorflow/tensorflow">Tensorflow</a>. It‚Äôs an open-source library for Deep Learning that is written mostly in C++ and is maintained by Google. If that sounds super scary, don‚Äôt worry‚ÄîI‚Äôm using this as the example project mainly because of the abundance of activity the project has so that I can demonstrate various scenarios you may encounter. Even if you are working in a project that is a completely different language or product, all these same tips should still apply.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/tensorflow.png" alt="TensorFlow GitHub project page." />
  <figcaption>TensorFlow GitHub project <a href="https://github.com/tensorflow/tensorflow">page</a>.</figcaption>
</figure>

<h1 id="why-do-we-need-to-vet-the-issues-at-all">Why do we need to vet the issues at all?</h1>

<p>It seems like <em>so</em> much extra effect to go through all this detective work to find ‚Äúthe best‚Äù issue to work on, so why should we even bother? Why not just start coding on the first issue we see?</p>

<p>The <strong>biggest</strong> reason why we need to actually vet the issues before we begin working on one is because <em>anyone</em> can post an issue to GitHub.</p>

<p>It can be hard, I think, for newcomers to open-source to understand this. When you‚Äôre a beginner, its easy to assume that everyone active on the GitHub page is official and knows what they‚Äôre doing. Let‚Äôs look at a few <em>real</em>, mostly silly examples from the Tensorflow page itself to show you this is definitely <em>not</em> the case:</p>

<h2 id="bad-issue-example-1-an-angry-customer">Bad Issue Example 1: An Angry Customer</h2>

<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/1st_class_windows_support.png" alt="Tensorflow issue 77" />
  <figcaption>TensorFlow <a href="https://github.com/tensorflow/tensorflow/issues/77">issue #77</a>.</figcaption>
</figure>

<p>Here‚Äôs an example that made me chuckle. This individual is demanding ‚Äú1st class windows support‚Äù be provided. This is obviously an example of something that cannot actually be coded up in the scope of a simple GitHub issue, but perhaps was an individual airing their greivances in a misguided forum. Maybe instead of GitHub, they could have found the TensorFlow customer support page?</p>

<h2 id="bad-issue-example-2-red-alert-unrelated-webpage-down">Bad Issue Example 2: Red Alert! Unrelated webpage down!</h2>

<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/Yann_webpage_down.png" alt="Tensorflow issue 209" />
  <figcaption>TensorFlow <a href="https://github.com/tensorflow/tensorflow/issues/209">issue #209</a>.</figcaption>
</figure>

<p>Red alert! The personal webpage for a professor is <strong>DOWN</strong>!</p>

<p>Now, I‚Äôm not being <em>entirely</em> fair putting this in the bad issue section. For context, Yann LeCun is a professor of Computer Science, and he is one of the original creators of the MNIST database, which is an important database that TensorFlow gives their users access to. At least as of this writing, there <em>are</em> examples of <a href="https://www.tensorflow.org/datasets/catalog/mnist">TensorFlow‚Äôs official documentation</a> pointing to the dataset hosted on Professor LeCun‚Äôs webpage.</p>

<p>Despite the relevancy of this webpage to the TensorFlow project, this is <em>not</em> a good example of an issue you‚Äôd want to find yourself blindly working on as a newcomer to the project. How would someone even go about fixing this without access to LeCun‚Äôs webpage code? This is a good one to leave to the project maintainers to figure out.</p>

<h2 id="bad-issue-example-3-good-first-issue-that-is-actually-mega-hard">Bad Issue Example 3: ‚ÄúGood First Issue‚Äù that is actually mega-hard</h2>

<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/hard.png" alt="Tensorflow issue 22926" />
  <figcaption>TensorFlow <a href="https://github.com/tensorflow/tensorflow/issues/22926">issue #22926</a>.</figcaption>
</figure>

<p>At first glance, its not really obvious why this issue belongs in this list. This issue (as of the time of writing), is actually <em>still</em> open on the TensorFlow page. For an issue to be open for nearly <em>4 years</em> is almost unheard of in the fast-paced world of open-source.</p>

<p>As we scroll down perusing the comments on this issue, we find lots of moderators and experienced developers trying to gain more context about how to both understand and reproduce the issue‚Äîa critical component we‚Äôll discuss more later on.</p>

<p>About halfway through the comments, we stumble upon a comment from a user @Gomesz785 that aptly summarizes the theme here:</p>
<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/comments.png" />
  <figcaption>TLDR: A <a href="https://github.com/tensorflow/tensorflow/issues/22926#issuecomment-920594088">good Samaritan user warns newcomers</a> that despite the "good first issue" label, this is actually a "god-level" issue.</figcaption>
</figure>

<p>Silly examples aside, this is actually my favorite example because it really drives home the true reason why we can‚Äôt always just ‚Äútrust‚Äù minimal filtering of issues.</p>

<h2 id="summary">Summary</h2>
<p>So, to summarize, here‚Äôs why it‚Äôs not the best idea to grab the first issue we see on the project:</p>
<ul>
  <li><em>Anyone</em> can post an issue</li>
  <li>Big projects like on Tensorflow have dozens of posts weekly</li>
  <li>Could be that someone just didn‚Äôt understand how the feature worked</li>
  <li>Could be some setting on their local machine</li>
  <li>Maybe they didn‚Äôt have the proper dependencies installed</li>
  <li>Could be a bug</li>
  <li>Could be a feature request! (generally more work)</li>
</ul>

<h1 id="a-heuristic-to-search-for-easy-issues">A Heuristic to Search for Easy Issues</h1>
<p>Ok so there‚Äôs a lot of potential reasons why we shouldn‚Äôt just grab the first random issue we see. But what is it we <em>do</em> want to be looking for instead? And <em>how</em> can we go about this process?</p>

<p>In this section, I‚Äôm going to outline a heuristic for finding a suitable easy issue. I‚Äôll walk through each step/theme in detail with TensorFlow, and then at the bottom I‚Äôll leave an action-item you can try in your chosen open-source system alongside.</p>

<h2 id="documentation-the-information-kiosk-of-open-source">Documentation: The Information Kiosk of Open-Source</h2>
<p>I like to think of documentation in an open-source GitHub project as the equivalent of the Information Kiosk or Customer Service desk. This is the easy, no-brainer, first-stop we‚Äôre going to to get some information. Are they always 100% right? Certainly not, we can all think of examples where Customer Service has given us well-intended, but ultimately misguided information about how to proceed on a given topic. But usually, the Information Kiosk is going to have the latest company-provided information on a variety of different topics.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/kiosk.png" />
  <figcaption>Information kiosk from one of my favorite childhood games, Rollercoaster Tycoon. <a href="https://www.reddit.com/r/rct/comments/fet3al/i_made_information_kiosk_blender_3d/">From Reddit</a></figcaption>
</figure>

<p>In TensorFlow, and in many open-source projects, the guidelines for contributors can be found in a doc titled <code class="language-plaintext highlighter-rouge">CONTRIBUTING.md</code>. Taking a look at the below snippet from the <a href="https://github.com/tensorflow/tensorflow/blob/master/CONTRIBUTING.md#contributing-code">Contribution doc for TensorFlow</a>:</p>

<blockquote>
  <p>If you want to contribute, start working through the TensorFlow codebase, navigate to the¬†<a href="https://github.com/tensorflow/tensorflow/issues">Github ‚Äúissues‚Äù tab</a>¬†‚Ä¶start by trying one of the smaller/easier issues here i.e.¬†<a href="https://github.com/tensorflow/tensorflow/labels/good%20first%20issue">issues with the ‚Äúgood first issue‚Äù label</a>¬†and then take a look at the¬†<a href="https://github.com/tensorflow/tensorflow/labels/stat%3Acontributions%20welcome">issues with the ‚Äúcontributions welcome‚Äù label</a>.</p>
</blockquote>

<p>But, when we go to the Issues tab for TensorFlow and search by ‚ÄúGood First Issue‚Äù, we are actually only left with one issue, and this is the same <a href="how-to-find-easy-first-issue-github.html#bad-issue-example-3-good-first-issue-that-is-actually-mega-hard">god-level issue we talked about above</a>.</p>

<p>So, unfortunately, for TensorFlow, our Information Kiosk was not particularly trustworthy on this topic. One of the most important things you‚Äôll learn from working on enough open-source, is that the code is always the ultimate source of truth. Documentation is nice, sometimes it looks really official, but it is subject to being out-of-date or flat-out wrong.</p>

<p><strong>Action Item</strong>: For your open source project: go ahead and try this first step. Look at the documentation for Contributors, and if they suggest that you look at issues by the common ‚ÄúGood First Issue‚Äù or ‚ÄúContributions Welcome‚Äù labels, go ahead and actually try filtering the Issues with these. Take note of what is left, and whether its several issues, or not many at all like in this case.</p>
<ul>
  <li>When applying this in Tensorflow, <a href="https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+label%3A%22stat%3Acontributions+welcome%22">here‚Äôs</a> what we have.</li>
</ul>

<h2 id="easy-bugs-the-white-whale-of-open-source-issues">Easy Bugs: The White Whale of Open-Source Issues</h2>
<p>Fundamentally, what we‚Äôre really looking for when we‚Äôre trying to find an ‚Äúeasy first issue‚Äù, is actually an ‚Äúeasy bug.‚Äù</p>

<h3 id="why-not-features">Why not Features?</h3>
<p>Generally, we‚Äôre going to want to avoid features at this point. If its your very first contribution, bug fixes are generally going to be less involved, require less familiarity with the code base, and will be a great way to gain expertise in your given project. Working on a Feature would be a great goal for a second or third contribution later on!</p>

<h3 id="what-makes-a-bug-an-easy-bug">What makes a bug an ‚Äúeasy bug‚Äù?</h3>
<p>An ‚Äúeasy bug‚Äù does not necessarily mean that its easy to fix. In this context, an easy bug means the following:</p>

<ul>
  <li><strong>Specific</strong>: Usually in the official formatting as outlined in the <a href="how-to-find-easy-first-issue-github.html#documentation-the-information-kiosk-of-open-source">documentation</a> of the repository</li>
  <li><strong>Reproducible</strong>: We have precise steps outlined for us to reproduce this issue on our own machine</li>
  <li><strong>Some official recognition from admins</strong>: Shows that someone else has been able to reproduce the issue on their own machine</li>
</ul>

<p>So, an ‚Äúeasy bug‚Äù in this case is really easy to spot and reproduce on your machine. How difficult it actually is to fix is something that you can try to decipher by reading the comments for the given issue, and mostly by working on the bug itself.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/easy-first-issue-post/mrkrab.jpeg" />
  <figcaption>Mr. Krabs and his elusive white whale, Moby Dollar. <a href="https://www.youtube.com/watch?v=8t6ipgd8JmU">From YouTube</a></figcaption>
</figure>

<p>A quick and dirty way to find bugs is to simply use the label for it in GitHub. Usually, its titled ‚ÄúBugs‚Äù, or something like that. In TensorFlow, its actually titled ‚Äútype:bug.‚Äù</p>

<p>Now, this will filter all the issues just categorized as ‚Äúbug‚Äù, but they are certainly not automatically meeting the criteria of an ‚Äúeasy bug‚Äù listed above. I call it a ‚Äúwhite whale‚Äù because for it to meet all of these criteria can actually be quite rare.</p>

<p>In TensorFlow, <a href="https://github.com/tensorflow/tensorflow/issues/47689">here‚Äôs</a> an example of a bug that meets our criteria of an ‚Äúeasy bug.‚Äù</p>

<p><strong>Action Item</strong>: In your open-source project issues list from above, now apply the label ‚ÄúBugs‚Äù (or whatever the equivalent is in your project) and see what you‚Äôre left with. We‚Äôre going to narrow down this list further in the next step, so don‚Äôt filter out by ‚Äúeasy bugs‚Äù just quite yet.</p>
<ul>
  <li>Since the list from TensorFlow above only contained 1 issue, I‚Äôm going to clear those two ‚Äúgood first issue‚Äù and ‚Äúcontributions welcome‚Äù labels. Applying only the ‚Äútype:bugs‚Äù label, <a href="https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3Atype%3Abug">here‚Äôs</a> what we have for TensorFlow at this point.</li>
</ul>

<h2 id="releases-the-fountain-of-youth">Releases: The Fountain of Youth</h2>
<p>There‚Äôs a lot of issues in a given GitHub project that are inevitably out-of-date. Even if we do find our precious <a href="how-to-find-easy-first-issue-github.html#easy-bugs-the-white-whale-of-open-source-issues">Easy Bug</a>, how can we tell which ones are still relevant to us?</p>

<p>The quick and easy answer to this: look at the latest <strong>Release</strong>. For any open-source project, the latest Release contains the most recent version of the project‚Äôs code.</p>

<p>The reason that the latest release is going to be the best place to look for bugs essentially comes down to the <strong>Reproducible</strong> criteria we discussed above for Easy Bugs. Even if we have a perfectly outlined bug, if all the instructions for reproducing that bug are related to code from 7 releases ago, how can we be sure this is still relevant? By grabbing issues that are related to the latest release, we can be sure that the information provided with it and the code we write are going to be most relevant to the <em>current</em> state of the project.</p>

<p>For TensorFlow, and many projects on GitHub, there should be a <code class="language-plaintext highlighter-rouge">/releases</code> pages we can look at. Here‚Äôs the <a href="https://github.com/tensorflow/tensorflow/releases">Release page for TensorFlow</a>, where we can find the number of the latest release. Usually its going to be some number with decimals.</p>

<p>In TensorFlow, they actually have labels for each release. We find the label corresponding with the latest release number to further filter our issues.</p>

<p><strong>Action Item</strong>: Depending on the conventions of the project you‚Äôre working on, there could be several different ways we can filter issues by the release.</p>
<ul>
  <li>One way, if its like TensorFlow, is through labels. If this is the case, simply find the label corresponding to the most recent release, and filter your list even further.</li>
  <li>If your project does not use Labels corresponding to the Release on the Issues page, try digging around your project documentation to see if there is a way that they separate out issues with the corresponding Release.</li>
  <li>If all else fails, look at the date of the latest release on the Releases page of your project. Then, look at issues only posted after this date.</li>
  <li>For TensorFlow, <a href="https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3Atype%3Abug+label%3A%22TF+2.9%22">here‚Äôs</a> our filtered list at this point. This is pretty incredible, we started with over 2,000 open issues, and we‚Äôve filtered it down to just 6!</li>
</ul>

<h2 id="and-finally-the-moment-weve-all-been-waiting-for">And finally, the moment we‚Äôve all been waiting for!</h2>
<p>At this point in the process, if you‚Äôve been following along with the Action Items at the end of each heuristic, you <em>should</em> have a much more manageable list of Issues left. At this point, with the issues you have left, you‚Äôre going to want to more carefully apply <a href="how-to-find-easy-first-issue-github.html#what-makes-a-bug-an-easy-bug">the criteria for an Easy Bug</a> we discussed above. As long as you find something that <em>mostly</em> meets this criteria, you should be good to go ahead and start actually coding on this!</p>

<h1 id="parting-advice">Parting Advice</h1>
<p>Remember, this is a heuristic‚Äîits not meant to be an exact replica of steps you can duplicate for any open-source system. There might be things you have to tweak‚Äîfor instance, you might have to include the latest <em>few</em> releases, instead of just <em>th</em>e latest one in order to find an appropriate open issue to work on.</p>

<p>One of my favorite experts on the practice, Joshua Bloch, aptly puts it:</p>
<blockquote>
  <p>‚ÄúLearning the art of programming, like most other disciplines, consists of first learning the rules and then learning when to break them.‚Äù</p>
</blockquote>

<p>So, hopefully these general steps will give you a much more thorough and nuanced outline in order to start contributing to your open-source system, but they will not ever be a 100% exact process to duplicate.</p>

<p>If you enjoyed this post, have ideas for a future topic, or want me to dive deeper on any of the topics discussed above, please comment below and let me know!</p>]]></content><author><name>Brooke K. Ryan</name><email>brooke.ryan@uci.edu</email></author><category term="software engineering" /><category term="github" /><category term="open source" /><summary type="html"><![CDATA[As a new developer to an open-source project, it can be quite intimidating to figure out where to begin, particularly for your first contribution to the project. And the first step before even doing your first contribution is actually finding that first issue to work on‚Äîa task which I‚Äôve found is often underestimated for its difficulty. While there do exist many blog posts on this issue, they tend to begin and end at filtering the list of issues by using the ‚Äúgood first issue‚Äù label on GitHub. However, as we will see in the example we‚Äôll walk through, that doesn‚Äôt universally work for all open-source projects‚Äîand beginners are then left in the dust about what to do next.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/brookekryan_com_photography_pinkbook_pro.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/brookekryan_com_photography_pinkbook_pro.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bored to Death: Why Working as a Software Engineer Nearly Cost Me My Life</title><link href="http://localhost:4000/blog/bored-to-death" rel="alternate" type="text/html" title="Bored to Death: Why Working as a Software Engineer Nearly Cost Me My Life" /><published>2021-11-01T00:00:00-07:00</published><updated>2021-11-01T00:00:00-07:00</updated><id>http://localhost:4000/blog/bored-to-death</id><content type="html" xml:base="http://localhost:4000/blog/bored-to-death"><![CDATA[<p>I‚Äôm often asked by my students how I wound up in grad school, and especially why I chose to come to academia when I had a prestigious, 6-figure job in tech right out of undergrad. Sometimes even my fellow grad students will ask me this question after I declare my goal is to one day become a professor‚Äîwhy not just go to industry where I‚Äôll make way <em>more</em> money doing ‚Äúthe same‚Äù work?</p>

<p>I was inspired to write about this because I‚Äôve been listening to this wonderful podcast that I discovered recently (thanks in part to our reptilian algorithm overlords) called <a href="https://www.adhdrewired.com/">ADHD reWired with Eric Tivers</a>. I‚Äôve been listening to episode after episode of brilliant, successful, and happy individuals with ADHD talk about their life story and rise to success. Oftentimes though, these folks had to go through really dark periods in their lives before they were able to learn to ‚Äúride the dragon‚Äù of the brain that is ADHD.</p>

<p>When I applied for the NSF GRFP earlier this month, the personal statement I wrote for it required me to do some deep thinking about <em>why</em> I really was in academia, and why I wanted to pursue a PhD. A big part of my essay that I worked on was talking about how I re-found myself and my true interests while I was backpacking along the John Muir Trail. This really did happen, and honestly it kind of sounds like a movie‚ÄîI had recurring dreams nearly nightly on the month-long trip about my love of science and teaching, and that my years of self-doubt in the field of computer science had made me forget my true, original dream to one day become a college professor. (I plan on posting my essay later if I get the fellowship, fingers crossed!) What that story didn‚Äôt cover, however, is why was I really was even on the JMT in the first place? This isn‚Äôt something you do on a weekend, most people can‚Äôt walk the trail while having full-time employment‚Äîit takes about 20-30 days for a backpacker to walk the 211 miles it spans.</p>

<p><div align="center"><blockquote class="instagram-media" data-instgrm-captioned="" data-instgrm-permalink="https://www.instagram.com/p/B4C4NSdhq5k/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/B4C4NSdhq5k/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/B4C4NSdhq5k/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by JMT Hiker (@hikers_of_the_jmt)</a></p></div></blockquote> <script async="" src="//www.instagram.com/embed.js"></script></div></p>

<p>After listening to the stories in the podcast, I realized there was more to my own ‚Äúorigin story‚Äù than I‚Äôd initially talked about. A big goal in my writing is to broaden access in the field, and I‚Äôve had some recent realizations about how many of my struggles to fit in in Computer Science were not <em>solely</em> due to the fact that I am a queer woman in a predominantly cis-masculine hetero-normal field, but <em>also</em> because of the unique set of challenges that having an ADHD brain presents itself with.</p>

<p>There‚Äôs <em>so</em> much to this story that I want to cover, and I probably will be doing more posts about this. But for now, the story that answers: why did I leave industry and end up in academia?</p>

<p>For prior context, in many software engineering teams, work is broken into what is called in Agile Methodology ‚Äúsprints.‚Äù Engineers are assigned a certain number of small tasks to be completed during this time period, typically about a two week long period. The amount of tasks they get assigned is dependent upon level of familiarity with the system and often seniority.</p>

<p>So, a UC San Diego recent graduate, assigned a couple easy bugs a sprint and being paid an <em>astronomically</em> high salary at a resume-making tech company‚Äîits the dream gig, right? For many of my fellow 22-year old peers who‚Äôd also scored a highly competitive, six-figure job right out of college, this was an easy-coasting ride on the gravy train. I saw friends in my cohort who absolutely <em>crushed</em> this game, I saw several rise to the coveted rank of senior and even staff level positions in under a year.</p>

<p>So what was Brooke doing during a typical sprint, 6 months into her tenure?</p>

<p>Hunched over in my dimly-lit corner cubicle, this particular sprint, I was hard at work. Not exactly doing any bug fixes, or new feature requests, or really any programming at all. No, a task much more important than this had me absolutely fixated. I spent an entire two week period‚Äîthe length of the an entire agile ‚Äúsprint‚Äù in that company‚Äîresearching the <em>best</em> dog food for my new puppy Henry. During our team‚Äôs morning stand-up meetings, I literally would report imaginary roadblocks I was facing to justify why this task that was supposed to take a few hours was now taking the entire sprint: ‚ÄúYeah, we gotta loop Mark down in IT on this one, this issue is looking a <em>lot</em> more complicated than we initially budgeted for.‚Äù But really, ‚ÄúMark in IT‚Äù was the author of a book on naturopathic dog food. I would scuffle back to my desk, anytime a senior teammate walked by I‚Äôd pull up the code I hadn‚Äôt touched since it was assigned weeks ago, and go back to spending the <em>entire day</em> <em>researching dog food</em>. I did not get my work done at the end of the sprint, but I was now an expert on DIY raw natural dog food. Even after all this, Henry actually wouldn‚Äôt be any better off either, I realized because of the time involved in implementing all the ‚Äúbest‚Äù methodologies (I could barely clean up my own plates after dinner, how the hell was I going to do it for a dog), this would be totally unrealistic to even attempt. Henry just eats kibble now.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/henry.jpeg" alt="My dog Henry and me at the beach." />
  <figcaption>My dog Henry and me at the beach.</figcaption>
</figure>

<p>This cycle went on for nearly a <em>year</em>. Nine and a half days of dicking around at my desk, then the last half-day of the sprint when the literal fear of god and unemployment were in my veins that I would be able to have the energy to start on my tasks. And unsurprisingly, as probably any working software engineer can attest, tasks are almost <em>always</em> significantly more complicated and time-consuming than originally estimated, and often I‚Äôd have nothing completed at the end of a sprint.</p>

<p>‚ÄúWhat the <em>fuck</em> was wrong with me?‚Äù I would think on a daily basis. I didn‚Äôt <em>like</em> lying to my team, hell I didn‚Äôt even really intend to in the first place. I knew this task wasn‚Äôt supposed to take me very long. But I just could <em>not</em> get myself interested in what I was ‚Äúsupposed‚Äù to be doing. Often unconsciously, I would get sucked in to whatever interested me at the time‚Äîone moment it might be dog food, other times it might be ultralight backpacking gear. It was really only when the assigned work intrinsically interested me where I was able to actually produce work that matched my capabilities. After a few good weeks, inevitably, I‚Äôd get sucked into something tangentially related to the project, such as researching the best possible testing framework, learning the theoretical underpinnings of cybersecurity despite being irrelevant for the looming project milestones. Those ‚Äúlittle‚Äù but ever-important tasks would catch up to me, and I‚Äôd have nothing to show for it.</p>

<p>I felt dishonest, like I was letting both my team and myself down. No matter how ‚Äúsimple‚Äù the task appeared, the endless monotony of working in a large, risk-averse, decades-old legacy system was slowly killing me. Despite the brilliant marketing that tech companies have produced to make software engineering seem fast-paced, cutting-edge, and dare I say sexy, I found myself slowly drowning in a sea of self-hate and office mundanity. Why the <em>fuck</em> is it so hard for me to just fix a simple bug? Why can‚Äôt I just be a functional adult?</p>

<p>In my efforts to force myself to fit that neurotypical mold was when things became dangerous for me. As the months carried on, little was able to capture my attention at all. Towards the end of my brief tenure at this company, I had to have my mother drive me to work because I would sob the entire way there. At lunch, I‚Äôd go off-campus somewhere and sob. On the last day in the office, I felt like I had physically left my body. An empty shell of my former joyful, jovial self, the only thing that could capture my focus now were things that could harm myself, like maybe that plastic butter knife in the break room‚Ä¶</p>

<p>Hearing myself think that, I left work, and went immediately to my doctor, who put me on a medical leave of absence. It took me about a year and a half after that dark, gray day to find what I <em>really</em> wanted to do. For a while, that was nothing. I was able to use the funds I‚Äôd saved from working that job to take time off to backpack. While I had no trouble with my resume getting interviews from more tech companies (I got flown up to Google during this period), the only job that remotely interested me was a summer teaching job I eventually I stumbled upon for Girls Who Code. By that time I‚Äôd committed to doing the John Muir Trail that August, so a seasonal gig was an accidental perfect fit for me at the time.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/sip2019.jpeg" alt="Group picture from Summer 2019 with Girls Who Code." />
  <figcaption>Group picture from Summer 2019 with Girls Who Code.</figcaption>
</figure>

<p>In my dreams at night along the trail, I recalled the joy I experienced teaching those girls that summer. I didn‚Äôt have very good grades in college because of my undiagnosed ADHD‚Äîthe last-minute cramming that‚Äôd gotten me A‚Äôs in high school didn‚Äôt work for me anymore with college-level programming assignments. I usually got Bs and Cs in my Computer Science classes, and so I never thought I‚Äôd be ‚Äúgood enough‚Äù to get into graduate school, a pre-requisite for teaching at the college level. My dreams along the JMT transported me to a time long before I thought I was inadqeuate to become a professor.</p>

<p>I‚Äôm still discovering <em>so</em> much more about my own mind. I‚Äôve also learned that women are generally underdiagnosed with ADHD because we tend to internalize the symptoms rather than realize we may need to seek professional help (Jessica from How to ADHD has a <a href="https://www.youtube.com/watch?v=EMpt40zNK-w">great video</a> on this phenomenon). Sometimes, its not just a toxic internal dialogue but also an external one, I believe that being a queer woman in Computer Science just exacterbated these feelings of isolation and unworthiness.</p>

<p>I‚Äôve discovered, as I did on the JMT, that being a teacher is an integral part of my identity. I love the joyful process of scientific investigation and I love learning. I love the creativity and freedom that crafting my own research agenda and experiments affords. I <em>love</em> the diversity of the kinds of work I get to do in a day‚ÄîI can tutor students, craft engaging lectures, create my <em>own</em> software framework from the ground-up to conduct my neural networks experiments, travel the world to present my research findings, ponder whether silicon will ever acquire consciousness. It might not sound like a huge difference to my neurotypical peers, but even just having the ability to <em>truly</em>, <em>deeply</em> focus on work that interests me without having to be interrupted by the thousands of little-deaths of Slack notifications, emails, ‚Äúbrief‚Äù meetings that take twice as long to ‚Äúunwind‚Äù from and regain focus again‚Äîthis is also part of the freedom that I love being in academia. The only ‚Äúboss‚Äù I have to explain my working habits to really is the scorecard at the end of the year, wherein my objective output in terms of research or teaching productivity is measured. Not whether I punched in on-time every morning at 9 and clocked out at 6. I don‚Äôt have to explain to anyone that talking a 2 hour walk in the park in the middle of the day to stare at the geese is a <em>crucial</em> part of my daily routine‚Äîof course depending on what day it is, and perhaps whether listening to a podcast about UFOs or reading a book about the mysterious origins of eels might be more fun that day. The greater salary potential in industry is <em>nothing</em> compared to this.</p>

<p>As Eric Tivers of ADHD reWired put it so aptly, ADHDers don‚Äôt have the <em>luxury</em> of doing work that is uninteresting to them. We <em>have</em> to find work that interests us in order to <em>survive</em>.</p>

<p>I‚Äôm still learning so much about myself and what ‚Äúit‚Äù is that I truly want to do in this life. I‚Äôve learned I cannot tame the dragon that is ADHD, but I‚Äôve learned I <em>can</em> ride it to where my interests take me. Right now, they‚Äôve taken me to academia, studying neural networks and pondering the nature of consciousness, while teaching Software Engineering courses at UCI through my TAship I‚Äôve been so lucky to acquire. I‚Äôve had a lifelong love of teaching, I know I will continue to be guided there. I love learning, science, discovery, and helping others along the way. From my point of view right now on my ‚Äúdragon‚Äù, a professorship is faintly outlined on the horizon, before that, the mountains of a PhD. And the only compass that I have is not that where the money lies, or where the security is, or where the most prestige lies, but where the beautiful beast of my interests take me. It is the only compass I need, and it is why I was led to where I am in grad school right now.</p>

<h2 id="further-resources">Further Resources</h2>

<p>If you read this and related to many of the symptoms discussed, please connect with a psychiatrist and get the help you deserve. Many people with ADHD are not diagnosed until later in life, particularly for women. Receiving the proper treatment can be life-changing, and I highly reccommend you seek professional help if you believe you may also have this.</p>

<p>If you are also a college student who already has an ADHD diagnosis, this podast from ADHD reWired has some really helpful resources about self-advocacy and accommodations.</p>

<iframe src="https://open.spotify.com/embed/episode/4nwmWYdbW13WrE5kA0ZLnL?utm_source=generator&amp;theme=0" width="100%" height="232" frameborder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"></iframe>

<p>Finally, if you are experiencing similar symptoms of depression or suicidal thoughts like I discussed in this post, please seek help! Even if you do not have health insurance, many therapists offer sliding-scale for low-income patients. If you are a college or graduate student, many universities provide mental health services that are included in the cost of tuition. In last resort scenarios, the <a href="https://suicidepreventionlifeline.org/">Suicide Prevention Hotline</a> can help you if you are in an emergency situation, and can also be reached at 1-800-273-8255.</p>

<h2 id="future-posts">Future Posts</h2>

<p>If you enjoyed this post, please let me know in the forum or reactions below!</p>

<p>In a future post, I‚Äôd love to talk more about my personal journey of accepting my ADHD, as well as strategies I‚Äôve used to help me in school and get good grades. If these ideas interest you, or if you have another idea for a post topic, please comment and let me know!</p>]]></content><author><name>Brooke K. Ryan</name><email>brooke.ryan@uci.edu</email></author><category term="neurodiversity" /><category term="ADHD" /><category term="software engineering" /><category term="work" /><summary type="html"><![CDATA[I‚Äôm often asked by my students how I wound up in grad school, and especially why I chose to come to academia when I had a prestigious, 6-figure job in tech right out of undergrad. Sometimes even my fellow grad students will ask me this question after I declare my goal is to one day become a professor‚Äîwhy not just go to industry where I‚Äôll make way more money doing ‚Äúthe same‚Äù work?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/student-stress.png" /><media:content medium="image" url="http://localhost:4000/assets/images/student-stress.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stealing Code‚ÄîWhat All Software Engineering Students Should Know</title><link href="http://localhost:4000/blog/on-leveraging-source-code.html" rel="alternate" type="text/html" title="Stealing Code‚ÄîWhat All Software Engineering Students Should Know" /><published>2021-01-25T00:00:00-08:00</published><updated>2021-01-25T00:00:00-08:00</updated><id>http://localhost:4000/blog/on-leveraging-source-code</id><content type="html" xml:base="http://localhost:4000/blog/on-leveraging-source-code.html"><![CDATA[<p>One of the most important principles you‚Äôll in Software Engineering, is to <em>leverage existing source code</em>. As a rule of thumb, if you‚Äôre writing something completely from scratch, <em>you‚Äôre probably doing it wrong</em>!</p>

<p>It can feel like a strange transition to <em>deliberately</em> copy another‚Äôs code as an end to your own means, a vast departure from the world of academia and introductory Computer Science courses, where you are mandated to write low-level code and prohibited from copying others‚Äô solutions.</p>

<p>However for most programming you‚Äôll be doing in the Software industry as a whole, you will <em>not</em> be re-inventing the wheel, and its oftentimes <em>better</em> to use these pre-written libraries.</p>

<p>Why is this?  Its not necessarily that Software shuns original, independent thinking.</p>

<p>Take the <a href="https://github.com/stleary/JSON-java">JSON-Java project</a>, for instance.  Looking at their GitHub project page, this is a library that is used by <em>at least</em> <strong>137,000</strong> projects‚Äìand has a team of <strong>41 developers</strong> working on maintaining the code.</p>

<figure>
  <img class="rounded border-brooke" src="/assets/images/JSONJava.png" alt="JSON Java." />
  <figcaption> JSON Java <a href="https://github.com/stleary/JSON-java">GitHub project</a> contributors and users.</figcaption>
</figure>

<p>Software is constantly evolving, new bugs appear as quickly as their predecessors squashed, dependencies are continuously updated‚Äîa project as large as this one is verified not only by the team of developers that maintain it, but by the hundreds of thousands of other open-source projects currently leveraging it successfully.  There‚Äôs always a risk of bugs‚Äîbut such a project will likely have infrastructure in place such as <a href="https://github.com/stleary/JSON-java/issues">Issue Tracking</a> to capture and assess defects.  If there‚Äôs a common operation to be performed in the scope of JSON parsing and processing, its likely been implemented, through several rounds of releases and testing, and is still being actively watched and maintained by this large development group.  Generally, this example demonstrates why we prefer to leverage existing libraries to writing our own completely from scratch.</p>

<h3 id="nuances">Nuances</h3>

<p>There are always exceptions to the rule, as Joshua Bloch‚Äôs famously puts it in <em>Effective Java</em>:  ‚ÄúLearning the art of programming, like most other disciplines, consists of first learning the rules and then learning when to break them.‚Äù</p>

<p>Generally, we want to keep dependencies on outside libraries to a minimum‚Äîparticularly when considering a large project like the JSON project. Really what we‚Äôre trying to do is mitigate the risk that introducing new, minimally tested, potentially bug-prone code can do to the project.</p>

<p>So while we don‚Äôt want to ‚Äúreinvent the wheel‚Äù, we <em>do</em> want to ensure that we‚Äôre looking for that wheel with progressive effort‚Äîfirst check the garage for spares, then in the auto shop down the street, then if we have to, shipping it in from out of state.  Taking the Java-JSON project, here is a general heuristic I would follow:</p>

<ol>
  <li>
    <p>First, check to see if what you‚Äôre looking to do exists already inside of the JSON project.  This is the most preferred as it will minimize the amount of new code introduced to the project.</p>
  </li>
  <li>
    <p>For <em>source code</em> (i.e. code in the ‚Äúsrc/main‚Äù directory):</p>

    <ol>
      <li>Java built-in libraries, which are included java.util, java.lang, java.io, and the likes.</li>
      <li>Utilize code from libraries that the project already depends on.  You can see these in the pom.xml file under the <dependencies> tag, or in the build.gradle file under dependencies{...}.</dependencies></li>
      <li>Well-established third-party java libraries that are not already included as a project dependency, such as Google Guava.  Code such as this is tested almost as much as the java libraries themselves, and hardly introduces a risk to the project.</li>
    </ol>
  </li>
  <li>
    <p>For <em>test code</em> (‚Äúsrc/test‚Äù directory):</p>

    <ol>
      <li>Look at existing tests and utility methods in those test classes.</li>
      <li>For asserts() or things like that, look in the JUnit library or Mockito library, which is already included in the project as a dependency.</li>
    </ol>
  </li>
  <li>
    <p>If you cannot find the operation you‚Äôre looking for after searching through these sources, then look for a reputable third-party library.*</p>

    <p>*In the real world, you‚Äôd probably have to evaluate this as a tradeoff with your team.  Depending on the company and size of the project you‚Äôre working on, sometimes it might be less risky to just build something from scratch.</p>
  </li>
  <li>
    <p>Build from scratch.</p>
  </li>
</ol>

<h2 id="additional-resources">Additional Resources</h2>

<p>I had <em>Effective Java, Third Edition</em> by Joshua Bloch reccommended to me early in my career, and I still reference it regularly.  The Third Edition was updated for the Java 8 release, and its still relevant for the newer Java versions.  It does an excellent job of delineating those principles of good design and effective programming that can appear amongst more experienced programmers to be a-priori.</p>]]></content><author><name>Brooke K. Ryan</name><email>brooke.ryan@uci.edu</email></author><category term="software engineering" /><category term="introductory" /><category term="source code" /><category term="java" /><summary type="html"><![CDATA[One of the most important principles you‚Äôll in Software Engineering, is to leverage existing source code. As a rule of thumb, if you‚Äôre writing something completely from scratch, you‚Äôre probably doing it wrong!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/software-developer.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/software-developer.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>