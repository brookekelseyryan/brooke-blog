
@article{AccelerationInformationProcessingRoutePerceptualHochmann2022,
  title = {Acceleration of Information Processing En Route to Perceptual Awareness in Infancy},
  author = {Hochmann, Jean-Rémy and Kouider, Sid},
  date = {2022-03-14},
  journaltitle = {Current Biology},
  shortjournal = {Current Biology},
  volume = {32},
  number = {5},
  pages = {1206-1210.e3},
  issn = {0960-9822},
  doi = {10.1016/j.cub.2022.01.029},
  url = {https://www.sciencedirect.com/science/article/pii/S0960982222000409},
  urldate = {2022-05-18},
  abstract = {Electrophysiological studies1, 2, 3, 4, 5, 6 have suggested an acceleration in information processing in the first years of life, probably largely caused by the progressive myelination of the cortex.7,8 Here, we ask whether and how this acceleration affects information processes that contribute to perceptual awareness. We addressed this issue leveraging on the attentional blink phenomenon9,10 in infants,11 children, and adult participants. When two visual targets (T1 and T2) are to be detected, the observer often misses T2, if it appears shortly after T1, as if the observer’s attention blinked. This phenomenon is explained by the two-stage model of perception, where an early unconscious sensory stage is followed by a late and central stage that relies on limited attentional resources.9, 10, 11, 12, 13, 14 Although both T1 and T2 are processed in the earlier sensory stage, the capacity limits of the second stage are such that T2 cannot be processed as long as attention is occupied by T1.9, 10, 11, 12, 13 The duration of the attentional blink, thus, indexes the speed of the late processing stage of visual stimuli, which is associated with perceptual awareness.12, 13, 14 Indeed, in adults, the blink only occurs if T1 is consciously perceived but not when it is missed or processed subliminally.15 Accordingly, neuroimaging studies16, 17, 18 have shown that late processes blocked by T1 involve frontoparietal areas, thought to be responsible for global cognitive availability, conscious access, and reportability.19 Here, we show that the attentional blink is present in young infants, suggesting that the two-stage organization of perception is in place at 5 and 8~months of age. In addition, we show that the duration of the attentional blink shrinks with development, suggesting that a fundamental aspect of cognitive development is the fast acceleration of the late processing stage of perception.},
  langid = {english},
  keywords = {attentional blink,consciousness,infancy,perceptual awareness},
  file = {/Users/brookeryan/Zotero/storage/XB3DLSQX/S0960982222000409.html}
}

@inproceedings{ActiveLearningSoftwareEngineeringCambronero2019,
  title = {Active Learning for Software Engineering},
  booktitle = {Proceedings of the 2019 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Cambronero, José P. and Dang, Thurston H. Y. and Vasilakis, Nikos and Shen, Jiasi and Wu, Jerry and Rinard, Martin C.},
  date = {2019-10-23},
  series = {Onward! 2019},
  pages = {62--78},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3359591.3359732},
  url = {https://doi.org/10.1145/3359591.3359732},
  urldate = {2021-10-21},
  abstract = {Software applications have grown increasingly complex to deliver the features desired by users. Software modularity has been used as a way to mitigate the costs of developing such complex software. Active learning-based program inference provides an elegant framework that exploits this modularity to tackle development correctness, performance and cost in large applications. Inferred programs can be used for many purposes, including generation of secure code, code re-use through automatic encapsulation, adaptation to new platforms or languages, and optimization. We show through detailed examples how our approach can infer three modules in a representative application. Finally, we outline the broader paradigm and open research questions.},
  isbn = {978-1-4503-6995-4},
  keywords = {active learning,program inference,program modeling}
}

@inproceedings{AdoptingIndustryAgilePracticesLargescaleSchneider2020,
  title = {Adopting {{Industry Agile Practices}} in {{Large-scale Capstone Education}}},
  booktitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  author = {Schneider, Jean-Guy and Eklund, Peter W. and Lee, Kevin and Chen, Feifei and Cain, Andrew and Abdelrazek, Mohamed},
  date = {2020-10},
  pages = {119--129},
  abstract = {This paper presents the practice and experience in adopting an agile organizational model for a final-year capstone program in Software Engineering. The model developed is motivated by having real (and developing) software artifacts with incrementally changing team members working on a product-line. This in turn results in more sophisticated capstone student-project outcomes. The model proposed supports student mentoring and promotes, through its internal organization, leadership and personal responsibility. The students are supported by professional software engineers, up-skilling workshops, and academic supervisors who act as a personalized reporting and grading point for the team. The academic supervisors are themselves supported by a tribe leader, a faculty member who assumes overall responsibility for a product-line, and who acts as a report to an external industry client/ sponsor. This paper describes the motivation for the capstone model, its adoption, and some preliminary observations.},
  eventtitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  keywords = {agile software development,capstone education,Education,Employment,Industries,Scalability,SEET 2020,Software,Software engineering,Software engineering education,Stakeholders}
}

@inproceedings{AdoptionOpenSourceProjectsEngineeringNascimento2018,
  title = {The {{Adoption}} of {{Open Source Projects}} in {{Engineering Education}}: {{A Real Software Development Experience}}},
  shorttitle = {The {{Adoption}} of {{Open Source Projects}} in {{Engineering Education}}},
  booktitle = {2018 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Nascimento, Debora M. C. and Chavez, Christina F. G. and Bittencourt, Roberto A.},
  date = {2018-10},
  pages = {1--9},
  issn = {2377-634X},
  doi = {10.1109/FIE.2018.8658908},
  abstract = {This research to practice full paper investigates software engineering students' perceptions of their contact with open source projects as a real-world experience. Working with open source projects (OSPs) has been shown as an interesting option in software engineering courses to bringing students closer to more realistic environments. However, when instructors use this approach, it is not clear whether students perceive the OSP as a real industrial software project, or whether they perceive the tasks they perform over OSPs as typical or close to industrial software project activities. The goal of this work was to identify students' perceptions of their interaction with an open source project as a real world experience. To do so, we performed three mixed-methods case studies with three different undergraduate classes. Each class had a different focus: i) software maintenance and evolution, ii) software testing, and iii) reverse engineering of software requirements. Results show that students perceived features that make OSPs close to industrial projects, realized that their OSP tasks are close to the ones in industrial projects, and also faced difficulties typical of working with real world software. Moreover, students forged a view of the skills needed for their future professional success. We conclude that students realized that performing tasks in OSPs was a real world experience they took part, contributing to their background both for the competencies they acquired and the difficulties they had to overcome.},
  eventtitle = {2018 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  keywords = {Computer aided software engineering,Industries,Interviews,Software,Software testing,Task analysis}
}

@article{AgeGenderDependentDevelopmentTheoryCalero2013,
  title = {Age and Gender Dependent Development of {{Theory}} of {{Mind}} in 6- to 8-Years Old Children},
  author = {Calero, Cecilia I. and Salles, Alejo and Semelman, Mariano and Sigman, Mariano},
  date = {2013-06-17},
  journaltitle = {Frontiers in Human Neuroscience},
  shortjournal = {Front Hum Neurosci},
  volume = {7},
  eprint = {23785326},
  eprinttype = {pmid},
  pages = {281},
  issn = {1662-5161},
  doi = {10.3389/fnhum.2013.00281},
  url = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3683618/},
  urldate = {2022-04-20},
  abstract = {The ability to attribute different mental states to distinct individuals, or Theory of Mind (ToM), is widely believed to be developed mostly during preschool years. How different factors such as gender, number of siblings, or coarse personality traits affect this development is not entirely agreed upon. Here, we introduce a computerized version of the scaled ToM suite of tasks introduced by Wellman and Liu (), which allows us to meaningfully test ToM development on children 6 to 8-years old. We find that kids this age are still not entirely proficient in all ToM tasks, and continue to show a progression of performance with age. By testing this new age range, too, we are able to observe a significant advantage of girls over boys in ToM performance. Other factors such as number of siblings, birth order, and coarse personality traits show no significant relation with the ToM task results. Finally, we introduce a novel way to quantify the scaling property of the suite involving a sequence of set inclusions on one hand and a comparison between specially tailored sets of logistic models on the other. These measures confirm the validity of the scale in the 6- to 8-years old range.},
  pmcid = {PMC3683618},
  file = {/Users/brookeryan/Zotero/storage/QPIMPUFE/Calero et al. - 2013 - Age and gender dependent development of Theory of .pdf}
}

@online{AlienDreamsEmergingArtScene,
  title = {Alien {{Dreams}}: {{An Emerging Art Scene}} - {{ML}}@{{B Blog}}},
  shorttitle = {Alien {{Dreams}}},
  url = {https://ml.berkeley.edu/blog/posts/clip-art/},
  urldate = {2022-05-31},
  abstract = {In January 2021, OpenAI released the weights and code for their CLIP model, and since then various hackers, artists, researchers, and deep learning enthusiasts have figured out novel methods for combining CLIP with various generative models to create beautiful visual art from just a text prompt. In this blog post I document the evolution of this new art scene and share a bunch of cool artwork along the way.},
  langid = {english},
  organization = {{Alien Dreams: An Emerging Art Scene - ML@B Blog}},
  file = {/Users/brookeryan/Zotero/storage/6NLVUZC6/clip-art.html}
}

@inproceedings{AnalysisCodeReadingGainMoreBusjahn2011,
  title = {Analysis of Code Reading to Gain More Insight in Program Comprehension},
  booktitle = {Proceedings of the 11th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Busjahn, Teresa and Schulte, Carsten and Busjahn, Andreas},
  date = {2011-11},
  series = {Koli {{Calling}} '11},
  pages = {1--9},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2094131.2094133},
  url = {https://doi.org/10.1145/2094131.2094133},
  urldate = {2021-10-22},
  abstract = {Code reading, although an integral part of program comprehension, is rarely reflected. In this paper, we want to argue for a research approach and direction exploiting the potential that lies in the analysis of reading processes. Based on the vast experience compiled in psychology and some studies in computing, eye tracking and think aloud were elaborated as a viable research instrument for code reading studies. We conducted a feasibility study, designed to examine the actual process of code reading as the sensory starting point of comprehension. Computational and statistical tools were developed to facilitate data capture and analysis for eye tracking experiments. Results do not just provide proof of concept but already emphasize differences between reading natural language text and source code, as well as a distinct attention allocation within different code elements like keywords and operators. In conclusion we suggest a combination of theory-driven selected stimuli material, a carefully designed procedure of eye tracking, complemented with suitable post-tests on comprehension as well as retrospective think aloud in order to obtain additional information on the linking process between perception and comprehension. As an addition to other research approaches this should most certainly help us to improve our knowledge of comprehension within an educational research framework.},
  isbn = {978-1-4503-1052-9},
  keywords = {code comprehension,code reading,CS Ed research,educational research,eye tracking,program comprehension}
}

@inproceedings{AnalysisCodeReadingGainMoreBusjahn2011a,
  title = {Analysis of Code Reading to Gain More Insight in Program Comprehension},
  booktitle = {Proceedings of the 11th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Busjahn, Teresa and Schulte, Carsten and Busjahn, Andreas},
  date = {2011-11-17},
  series = {Koli {{Calling}} '11},
  pages = {1--9},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2094131.2094133},
  url = {https://doi.org/10.1145/2094131.2094133},
  urldate = {2021-10-22},
  abstract = {Code reading, although an integral part of program comprehension, is rarely reflected. In this paper, we want to argue for a research approach and direction exploiting the potential that lies in the analysis of reading processes. Based on the vast experience compiled in psychology and some studies in computing, eye tracking and think aloud were elaborated as a viable research instrument for code reading studies. We conducted a feasibility study, designed to examine the actual process of code reading as the sensory starting point of comprehension. Computational and statistical tools were developed to facilitate data capture and analysis for eye tracking experiments. Results do not just provide proof of concept but already emphasize differences between reading natural language text and source code, as well as a distinct attention allocation within different code elements like keywords and operators. In conclusion we suggest a combination of theory-driven selected stimuli material, a carefully designed procedure of eye tracking, complemented with suitable post-tests on comprehension as well as retrospective think aloud in order to obtain additional information on the linking process between perception and comprehension. As an addition to other research approaches this should most certainly help us to improve our knowledge of comprehension within an educational research framework.},
  isbn = {978-1-4503-1052-9},
  keywords = {code comprehension,code reading,CS Ed research,educational research,eye tracking,program comprehension}
}

@inproceedings{AnyCubesChildrenToyLearningAIScheidt2019,
  title = {Any-{{Cubes}}: {{A Children}}'s {{Toy}} for {{Learning AI}}: {{Enhanced Play}} with {{Deep Learning}} and {{MQTT}}},
  shorttitle = {Any-{{Cubes}}},
  booktitle = {Proceedings of {{Mensch}} Und {{Computer}} 2019},
  author = {Scheidt, Alexander and Pulver, Tim},
  date = {2019-09-08},
  series = {{{MuC}}'19},
  pages = {893--895},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3340764.3345375},
  url = {https://doi.org/10.1145/3340764.3345375},
  urldate = {2022-04-25},
  abstract = {Here we present Any-Cubes, a prototype toy with which children can intuitively and playfully explore and understand machine learning as well as Internet of Things technology. Our prototype is a combination of deep learning-based image classification [12] and machine-to-machine (m2m) communication via MQTT. The system consists of two physical and tangible wooden cubes. Cube 1 ("sensor cube") is inspired by Google's teachable machine [14,15]. The sensor cube can be trained on any object or scenery. The machine learning functionality is directly implemented on the microcontroller (Raspberry Pi) by a Google Edge TPU Stick. Via MQTT protocol, the microcontroller sends its current status to Cube 2, the actuator cube. The actuator cube provides three switches (relays controlled by an Arduino board) to which peripheral devices can be connected. This allows simple if-then functions to be executed in real time, regardless of location. We envision our system as an intuitive didactic tool for schools and maker spaces.},
  isbn = {978-1-4503-7198-8},
  keywords = {Edge AI,Education,IoT,Machine Learning,Transfer Learning},
  file = {/Users/brookeryan/Zotero/storage/T2AJX5X6/Scheidt and Pulver - 2019 - Any-Cubes A Children's Toy for Learning AI Enhan.pdf}
}

@misc{APADictionaryPsychology2020b,
  title = {{{APA Dictionary}} of {{Psychology}}},
  date = {2020},
  journaltitle = {dictionary.app.org},
  url = {https://dictionary.apa.org/social-context},
  urldate = {2021-10-21},
  abstract = {social context the specific circumstance or general environment that serves as a social framework for individual or interpersonal behavior. This context frequently influences, at least to some degree, the actions and feelings that occur within it.},
  langid = {english}
}

@online{APADictionaryPsychology2020c,
  title = {{{APA Dictionary}} of {{Psychology}}},
  date = {2020},
  url = {https://dictionary.apa.org/social-context},
  urldate = {2021-10-21},
  abstract = {social context the specific circumstance or general environment that serves as a social framework for individual or interpersonal behavior. This context frequently influences, at least to some degree, the actions and feelings that occur within it.},
  langid = {english},
  organization = {{dictionary.app.org}}
}

@misc{AskingAnsweringQuestionsProgrammingChangeSillito,
  title = {‪{{Asking}} and Answering Questions during a Programming Change Task‬},
  author = {Sillito, J and Murphy, GC and De Volder, K},
  url = {https://scholar.google.com/citations?view_op=view_citation&hl=en&user=IgGxGN8AAAAJ&citation_for_view=IgGxGN8AAAAJ:u5HHmVD_uO8C},
  urldate = {2021-10-22},
  abstract = {‪J Sillito, GC Murphy, K De Volder‬, ‪IEEE Transactions on Software Engineering, 2008‬ - ‪Cited by 361‬}
}

@article{AskingAnsweringQuestionsProgrammingChangeSillito2008,
  title = {Asking and {{Answering Questions}} during a {{Programming Change Task}}},
  author = {Sillito, Jonathan and Murphy, Gail C. and De Volder, Kris},
  date = {2008-07},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {34},
  number = {4},
  pages = {434--451},
  issn = {1939-3520},
  doi = {10.1109/TSE.2008.26},
  abstract = {Little is known about the specific kinds of questions programmers ask when evolving a code base and how well existing tools support those questions. To better support the activity of programming, answers are needed to three broad research questions: 1) What does a programmer need to know about a code base when evolving a software system? 2) How does a programmer go about finding that information? 3) How well do existing tools support programmers in answering those questions? We undertook two qualitative studies of programmers performing change tasks to provide answers to these questions. In this paper, we report on an analysis of the data from these two user studies. This paper makes three key contributions. The first contribution is a catalog of 44 types of questions programmers ask during software evolution tasks. The second contribution is a description of the observed behavior around answering those questions. The third contribution is a description of how existing deployed and proposed tools do, and do not, support answering programmers' questions.},
  keywords = {Computer science,Data analysis,Enhancement,Genetic programming,IEEE activities,Lab-on-a-chip,Programming Environments/Construction Tools,Programming profession,Software psychology,Software systems,Software tools}
}

@article{AskingAnsweringQuestionsProgrammingChangeSillito2008a,
  title = {Asking and {{Answering Questions}} during a {{Programming Change Task}}},
  author = {Sillito, Jonathan and Murphy, Gail C. and De Volder, Kris},
  date = {2008-07},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {34},
  number = {4},
  pages = {434--451},
  issn = {1939-3520},
  doi = {10.1109/TSE.2008.26},
  abstract = {Little is known about the specific kinds of questions programmers ask when evolving a code base and how well existing tools support those questions. To better support the activity of programming, answers are needed to three broad research questions: 1) What does a programmer need to know about a code base when evolving a software system? 2) How does a programmer go about finding that information? 3) How well do existing tools support programmers in answering those questions? We undertook two qualitative studies of programmers performing change tasks to provide answers to these questions. In this paper, we report on an analysis of the data from these two user studies. This paper makes three key contributions. The first contribution is a catalog of 44 types of questions programmers ask during software evolution tasks. The second contribution is a description of the observed behavior around answering those questions. The third contribution is a description of how existing deployed and proposed tools do, and do not, support answering programmers' questions.},
  keywords = {Computer science,Data analysis,Enhancement,Genetic programming,IEEE activities,Lab-on-a-chip,Programming Environments/Construction Tools,Programming profession,Software psychology,Software systems,Software tools}
}

@article{AskingAnsweringQuestionsProgrammingChangeSillito2008b,
  title = {Asking and {{Answering Questions}} during a {{Programming Change Task}}},
  author = {Sillito, Jonathan and Murphy, Gail C. and De Volder, Kris},
  date = {2008-07},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {34},
  number = {4},
  pages = {434--451},
  issn = {1939-3520},
  doi = {10.1109/TSE.2008.26},
  abstract = {Little is known about the specific kinds of questions programmers ask when evolving a code base and how well existing tools support those questions. To better support the activity of programming, answers are needed to three broad research questions: 1) What does a programmer need to know about a code base when evolving a software system? 2) How does a programmer go about finding that information? 3) How well do existing tools support programmers in answering those questions? We undertook two qualitative studies of programmers performing change tasks to provide answers to these questions. In this paper, we report on an analysis of the data from these two user studies. This paper makes three key contributions. The first contribution is a catalog of 44 types of questions programmers ask during software evolution tasks. The second contribution is a description of the observed behavior around answering those questions. The third contribution is a description of how existing deployed and proposed tools do, and do not, support answering programmers' questions.},
  eventtitle = {{{IEEE Transactions}} on {{Software Engineering}}},
  keywords = {Computer science,Data analysis,Enhancement,Genetic programming,IEEE activities,Lab-on-a-chip,Programming Environments/Construction Tools,Programming profession,Software psychology,Software systems,Software tools}
}

@article{AskingAnsweringQuestionsProgrammingChangeSillito2008c,
  title = {Asking and {{Answering Questions}} during a {{Programming Change Task}}},
  author = {Sillito, Jonathan and Murphy, Gail C. and De Volder, Kris},
  date = {2008-07},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {34},
  number = {4},
  pages = {434--451},
  issn = {1939-3520},
  doi = {10.1109/TSE.2008.26},
  abstract = {Little is known about the specific kinds of questions programmers ask when evolving a code base and how well existing tools support those questions. To better support the activity of programming, answers are needed to three broad research questions: 1) What does a programmer need to know about a code base when evolving a software system? 2) How does a programmer go about finding that information? 3) How well do existing tools support programmers in answering those questions? We undertook two qualitative studies of programmers performing change tasks to provide answers to these questions. In this paper, we report on an analysis of the data from these two user studies. This paper makes three key contributions. The first contribution is a catalog of 44 types of questions programmers ask during software evolution tasks. The second contribution is a description of the observed behavior around answering those questions. The third contribution is a description of how existing deployed and proposed tools do, and do not, support answering programmers' questions.},
  eventtitle = {{{IEEE Transactions}} on {{Software Engineering}}},
  keywords = {Computer science,Data analysis,Enhancement,Genetic programming,IEEE activities,Lab-on-a-chip,Programming Environments/Construction Tools,Programming profession,Software psychology,Software systems,Software tools}
}

@online{AskingAnsweringQuestionsProgrammingChangeSillitoa,
  title = {‪{{Asking}} and Answering Questions during a Programming Change Task‬},
  author = {Sillito, J and Murphy, GC and De Volder, K},
  url = {https://scholar.google.com/citations?view_op=view_citation&hl=en&user=IgGxGN8AAAAJ&citation_for_view=IgGxGN8AAAAJ:u5HHmVD_uO8C},
  urldate = {2021-10-22},
  abstract = {‪J Sillito, GC Murphy, K De Volder‬, ‪IEEE Transactions on Software Engineering, 2008‬ - ‪Cited by 361‬}
}

@article{BAKER20053,
  title = {An Experimental Card Game for Teaching Software Engineering Processes},
  author = {Baker, Alex and Oh Navarro, Emily and van der Hoek, André},
  options = {useprefix=true},
  date = {2005},
  journaltitle = {Journal of Systems and Software},
  volume = {75},
  number = {1},
  pages = {3--16},
  issn = {0164-1212},
  doi = {10.1016/j.jss.2004.02.033},
  url = {https://www.sciencedirect.com/science/article/pii/S0164121204000378},
  abstract = {The typical software engineering course consists of lectures in which concepts and theories are conveyed, along with a small “toy” software engineering project which attempts to give students the opportunity to put this knowledge into practice. Although both of these components are essential, neither one provides students with adequate practical knowledge regarding the process of software engineering. Namely, lectures allow only passive learning and projects are so constrained by the time and scope requirements of the academic environment that they cannot be large enough to exhibit many of the phenomena occurring in real-world software engineering processes. To address this problem, we have developed Problems and Programmers, an educational card game that simulates the software engineering process and is designed to teach those process issues that are not sufficiently highlighted by lectures and projects. We describe how the game is designed, the mechanics of its game play, and the results of an experiment we conducted involving students playing the game.},
  keywords = {Educational games,Simulation games,Software engineering education,Software engineering simulation}
}

@inproceedings{BarriersFacedNewcomersOpenSourceSteinmacher2014,
  title = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}: {{A Systematic Review}}},
  shorttitle = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}},
  author = {Steinmacher, Igor and Graciotto Silva, Marco Aurélio and Gerosa, Marco Aurelio},
  date = {2014-05},
  volume = {427},
  doi = {10.1007/978-3-642-55128-4_21},
  abstract = {To remain sustainable, some open source projects need a constant influx of new volunteers, or newcomers. However, the newcom-ers face different kinds of problems when onboarding to a project. In this paper we present the results of a systematic literature review aiming at identifying the barriers that a newcomer can face when contributing to an Open Source Software project. We identified and analyzed 21 studies that evidence this kind of problem. As a result we provide a hierarchical model that relies on five categories of barriers: finding a way to start, social interactions, code issues, documentation problems and newcom-ers' knowledge. The most evidenced barriers are newcomers' previous technical skills, receiving response from community, centrality of social contacts, and finding the appropriate way to start contributing. This classification provides a baseline for further researches related to new-comers onboarding.},
  isbn = {978-3-642-55127-7}
}

@inproceedings{BarriersFacedNewcomersOpenSourceSteinmacher2014a,
  title = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}: {{A Systematic Review}}},
  shorttitle = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}},
  author = {Steinmacher, Igor and Graciotto Silva, Marco Aurélio and Gerosa, Marco Aurelio},
  date = {2014-05},
  volume = {427},
  doi = {10.1007/978-3-642-55128-4_21},
  abstract = {To remain sustainable, some open source projects need a constant influx of new volunteers, or newcomers. However, the newcom-ers face different kinds of problems when onboarding to a project. In this paper we present the results of a systematic literature review aiming at identifying the barriers that a newcomer can face when contributing to an Open Source Software project. We identified and analyzed 21 studies that evidence this kind of problem. As a result we provide a hierarchical model that relies on five categories of barriers: finding a way to start, social interactions, code issues, documentation problems and newcom-ers' knowledge. The most evidenced barriers are newcomers' previous technical skills, receiving response from community, centrality of social contacts, and finding the appropriate way to start contributing. This classification provides a baseline for further researches related to new-comers onboarding.},
  isbn = {978-3-642-55127-7}
}

@inproceedings{BarriersFacedNewcomersOpenSourceSteinmacher2014b,
  title = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}: {{A Systematic Review}}},
  shorttitle = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}},
  author = {Steinmacher, Igor and Graciotto Silva, Marco Aurélio and Gerosa, Marco Aurelio},
  date = {2014-05-07},
  volume = {427},
  doi = {10.1007/978-3-642-55128-4_21},
  abstract = {To remain sustainable, some open source projects need a constant influx of new volunteers, or newcomers. However, the newcom-ers face different kinds of problems when onboarding to a project. In this paper we present the results of a systematic literature review aiming at identifying the barriers that a newcomer can face when contributing to an Open Source Software project. We identified and analyzed 21 studies that evidence this kind of problem. As a result we provide a hierarchical model that relies on five categories of barriers: finding a way to start, social interactions, code issues, documentation problems and newcom-ers' knowledge. The most evidenced barriers are newcomers' previous technical skills, receiving response from community, centrality of social contacts, and finding the appropriate way to start contributing. This classification provides a baseline for further researches related to new-comers onboarding.},
  eventtitle = {{{IFIP Advances}} in {{Information}} and {{Communication Technology}}},
  isbn = {978-3-642-55127-7}
}

@inproceedings{BarriersFacedNewcomersOpenSourceSteinmacher2014c,
  title = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}: {{A Systematic Review}}},
  shorttitle = {Barriers {{Faced}} by {{Newcomers}} to {{Open Source Projects}}},
  author = {Steinmacher, Igor and Graciotto Silva, Marco Aurélio and Gerosa, Marco Aurelio},
  date = {2014-05-07},
  volume = {427},
  doi = {10.1007/978-3-642-55128-4_21},
  abstract = {To remain sustainable, some open source projects need a constant influx of new volunteers, or newcomers. However, the newcom-ers face different kinds of problems when onboarding to a project. In this paper we present the results of a systematic literature review aiming at identifying the barriers that a newcomer can face when contributing to an Open Source Software project. We identified and analyzed 21 studies that evidence this kind of problem. As a result we provide a hierarchical model that relies on five categories of barriers: finding a way to start, social interactions, code issues, documentation problems and newcom-ers' knowledge. The most evidenced barriers are newcomers' previous technical skills, receiving response from community, centrality of social contacts, and finding the appropriate way to start contributing. This classification provides a baseline for further researches related to new-comers onboarding.},
  eventtitle = {{{IFIP Advances}} in {{Information}} and {{Communication Technology}}},
  isbn = {978-3-642-55127-7}
}

@book{BeautifulCodeOram2007,
  title = {Beautiful Code},
  editor = {Oram, Andrew and Wilson, Greg},
  date = {2007},
  series = {Theory in Practice Series},
  edition = {1st. ed},
  publisher = {{O'Reilly}},
  location = {{Beijing ; Sebastapol, Calif}},
  isbn = {978-0-596-51004-6},
  langid = {english},
  pagetotal = {593},
  keywords = {Software engineering},
  annotation = {OCLC: ocn163289538}
}

@inproceedings{BlockchainBasedTrustedInstantMessagingModelWang2021,
  title = {Blockchain-{{Based Trusted Instant Messaging Model Research}}},
  booktitle = {2021 4th {{International Conference}} on {{Hot Information-Centric Networking}} ({{HotICN}})},
  author = {Wang, Huiyuan and Yu, Yimin and Zhao, Jinyi and Wang, Jingyi},
  date = {2021-11},
  pages = {32--37},
  doi = {10.1109/HotICN53262.2021.9680848},
  abstract = {Instant messaging (IM) provides real-time communication between two or more participants over the Internet. Today's instant messaging products are proliferating and playing an increasingly important role in life. However, the problem of user identity and communication data leakage is gradually revealed. To address the data privacy and security problems brought by current IM systems, this paper proposes a trusted IM model based on blockchain technology, applying IPFS technology, blockchain technology combined with data encryption technology and distributed identity (DID) to design a decentralized instant messaging model, where user identity and data cannot be unilaterally tampered with or destroyed, ensuring the privacy of communication data. The overall structure of the system and the design of each module function are also introduced to provide new ideas for the study of a secure decentralized communication model.},
  eventtitle = {2021 4th {{International Conference}} on {{Hot Information-Centric Networking}} ({{HotICN}})},
  keywords = {Blockchain,Blockchains,Data models,Data privacy,Decentralized Identity (DID),Encryption,Information-centric networking,Instant messaging,Instant Messaging (IM),IPFS,Real-time systems,Smart Contract},
  file = {/Users/brookeryan/Zotero/storage/YBCSZCIP/Wang et al. - 2021 - Blockchain-Based Trusted Instant Messaging Model R.pdf}
}

@misc{CallGraphIntelliJIDEsPlugin2022,
  title = {Call {{Graph}} - {{IntelliJ IDEs Plugin}} \textbackslash textbar {{Marketplace}}},
  date = {2022},
  url = {https://plugins.jetbrains.com/plugin/12304-call-graph},
  urldate = {2022-01-31}
}

@online{CallGraphIntelliJIDEsPlugin2022a,
  title = {Call {{Graph}} - {{IntelliJ IDEs Plugin}} | {{Marketplace}}},
  date = {2022},
  url = {https://plugins.jetbrains.com/plugin/12304-call-graph},
  urldate = {2022-01-31}
}

@online{CalypsoCozmoTakeYourCozmo,
  title = {Calypso for {{Cozmo}}: {{Take}} Your {{Cozmo}} Programming to the next Level.},
  shorttitle = {Calypso for {{Cozmo}}},
  url = {https://calypso.software/},
  urldate = {2022-04-20},
  abstract = {Calypso is a robot intelligence framework for the Cozmo robot by Anki.},
  organization = {{Calypso Software}},
  file = {/Users/brookeryan/Zotero/storage/LX5KWDPW/calypso.software.html}
}

@inproceedings{CaseStudyOnboardingSoftwareTeamsJu2021,
  title = {A Case Study of Onboarding in Software Teams: {{Tasks}} and Strategies},
  shorttitle = {A Case Study of Onboarding in Software Teams},
  booktitle = {2021 {{IEEE}}/{{ACM}} 43rd {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Ju, An and Sajnani, Hitesh and Kelly, Scot and Herzig, Kim},
  date = {2021},
  pages = {613--623},
  publisher = {{IEEE}}
}

@inproceedings{CodeCity3DVisualizationLargescaleSoftwareWettel2008,
  title = {{{CodeCity}}: {{3D}} Visualization of Large-Scale Software},
  shorttitle = {{{CodeCity}}},
  booktitle = {Companion of the 30th International Conference on {{Software}} Engineering},
  author = {Wettel, Richard and Lanza, Michele},
  date = {2008-05},
  series = {{{ICSE Companion}} '08},
  pages = {921--922},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1370175.1370188},
  url = {https://doi.org/10.1145/1370175.1370188},
  urldate = {2021-10-22},
  abstract = {CodeCity is a language-independent interactive 3D visualization tool for the analysis of large software systems. Based on a city metaphor, it depicts classes as buildings and packages as districts of a "software city". By offering consistent locality and solid orientation points we keep the viewer oriented during the exploration of a city. We applied our tool on several large-scale industrial systems.},
  isbn = {978-1-60558-079-1},
  keywords = {visualization}
}

@inproceedings{CodeCity3DVisualizationLargescaleSoftwareWettel2008a,
  title = {{{CodeCity}}: {{3D}} Visualization of Large-Scale Software},
  shorttitle = {{{CodeCity}}},
  booktitle = {Companion of the 30th International Conference on {{Software}} Engineering},
  author = {Wettel, Richard and Lanza, Michele},
  date = {2008-05-10},
  series = {{{ICSE Companion}} '08},
  pages = {921--922},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1370175.1370188},
  url = {https://doi.org/10.1145/1370175.1370188},
  urldate = {2021-10-22},
  abstract = {CodeCity is a language-independent interactive 3D visualization tool for the analysis of large software systems. Based on a city metaphor, it depicts classes as buildings and packages as districts of a "software city". By offering consistent locality and solid orientation points we keep the viewer oriented during the exploration of a city. We applied our tool on several large-scale industrial systems.},
  isbn = {978-1-60558-079-1},
  keywords = {visualization}
}

@book{CodeReadingOpenSourcePerspectiveSpinellis2003,
  title = {Code {{Reading}}: {{The Open Source Perspective}}},
  shorttitle = {Code {{Reading}}},
  author = {Spinellis, Diomidis},
  date = {2003-05-27},
  eprint = {8lYbNfsAVT4C},
  eprinttype = {googlebooks},
  publisher = {{Addison-Wesley Professional}},
  abstract = {If you are a programmer, you need this book.  You've got a day to add a new feature in a 34,000-line program: Where do you start? Page 333  How can you understand and simplify an inscrutable piece of code? Page 39  Where do you start when disentangling a complicated build process? Page 167  How do you comprehend code that appears to be doing five things in parallel? Page 132   You may read code because you have to--to fix it, inspect it, or improve it. You may read code the way an engineer examines a machine--to discover what makes it tick. Or you may read code because you are scavenging--looking for material to reuse.  Code-reading requires its own set of skills, and the ability to determine which technique you use when is crucial. In this indispensable book, Diomidis Spinellis uses more than 600 real-world examples to show you how to identify good (and bad) code: how to read it, what to look for, and how to use this knowledge to improve your own code.   Fact: If you make a habit of reading good code, you will write better code yourself.},
  isbn = {978-0-672-33370-5},
  langid = {english},
  pagetotal = {529},
  keywords = {Computers / Software Development & Engineering / General}
}

@online{CollaborativeApproachTeachingSoftwareArchitecture,
  title = {A {{Collaborative Approach}} to {{Teaching Software Architecture}} | {{Proceedings}} of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  url = {https://dl.acm.org/doi/10.1145/3017680.3017737},
  urldate = {2021-10-22}
}

@inproceedings{CollaborativeApproachTeachingSoftwareArchitectureVanDeursen2017,
  title = {A {{Collaborative Approach}} to {{Teaching Software Architecture}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Van Deursen, Arie and Aniche, Maurício and Aué, Joop and Slag, Rogier and De Jong, Michael and Nederlof, Alex and Bouwers, Eric},
  date = {2017-03},
  series = {{{SIGCSE}} '17},
  pages = {591--596},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3017680.3017737},
  url = {https://doi.org/10.1145/3017680.3017737},
  urldate = {2021-10-22},
  abstract = {Teaching software architecture is hard. The topic is abstract and is best understood by experiencing it, which requires proper scale to fully grasp its complexity. Furthermore, students need to practice both technical and social skills to become good software architects. To overcome these teaching challenges, we developed the Collaborative Software Architecture Course. In this course, participants work together to study and document a large, open source software system of their own choice. In the process, all communication is transparent in order to foster an open learning environment, and the end-result is published as an online book to benefit the larger open source community. We have taught this course during the past four years to classes of 50-100 students each. Our experience suggests that: (1) open source systems can be successfully used to let students gain experience with key software architecture concepts, (2) students are capable of making code contributions to the open source projects, (3) integrators (architects) from open source systems are willing to interact with students about their contributions, (4) working together on a joint book helps teams to look beyond their own work, and study the architectural descriptions produced by the other teams.},
  isbn = {978-1-4503-4698-6},
  keywords = {collaborative book writing,open learning,software architecture,software engineering education}
}

@inproceedings{CollaborativeApproachTeachingSoftwareArchitectureVanDeursen2017a,
  title = {A {{Collaborative Approach}} to {{Teaching Software Architecture}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Van Deursen, Arie and Aniche, Maurício and Aué, Joop and Slag, Rogier and De Jong, Michael and Nederlof, Alex and Bouwers, Eric},
  date = {2017-03-08},
  series = {{{SIGCSE}} '17},
  pages = {591--596},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3017680.3017737},
  url = {https://doi.org/10.1145/3017680.3017737},
  urldate = {2021-10-22},
  abstract = {Teaching software architecture is hard. The topic is abstract and is best understood by experiencing it, which requires proper scale to fully grasp its complexity. Furthermore, students need to practice both technical and social skills to become good software architects. To overcome these teaching challenges, we developed the Collaborative Software Architecture Course. In this course, participants work together to study and document a large, open source software system of their own choice. In the process, all communication is transparent in order to foster an open learning environment, and the end-result is published as an online book to benefit the larger open source community. We have taught this course during the past four years to classes of 50-100 students each. Our experience suggests that: (1) open source systems can be successfully used to let students gain experience with key software architecture concepts, (2) students are capable of making code contributions to the open source projects, (3) integrators (architects) from open source systems are willing to interact with students about their contributions, (4) working together on a joint book helps teams to look beyond their own work, and study the architectural descriptions produced by the other teams.},
  isbn = {978-1-4503-4698-6},
  keywords = {collaborative book writing,open learning,software architecture,software engineering education}
}

@article{ComprehensionComputerCodeReliesPrimarilyIvanova2020,
  title = {Comprehension of Computer Code Relies Primarily on Domain-General Executive Brain Regions},
  author = {Ivanova, Anna A and Srikant, Shashank and Sueoka, Yotaro and Kean, Hope H and Dhamala, Riva and O'Reilly, Una-May and Bers, Marina U and Fedorenko, Evelina},
  editor = {Martin, Andrea E and Behrens, Timothy E and Matchin, William and Bornkessel-Schlesewsky, Ina},
  date = {2020-12-15},
  journaltitle = {eLife},
  volume = {9},
  pages = {e58906},
  issn = {2050-084X},
  doi = {10.7554/eLife.58906},
  url = {https://doi.org/10.7554/eLife.58906},
  urldate = {2021-10-22},
  abstract = {Computer programming is a novel cognitive tool that has transformed modern society. What cognitive and neural mechanisms support this skill? Here, we used functional magnetic resonance imaging to investigate two candidate brain systems: the multiple demand (MD) system, typically recruited during math, logic, problem solving, and executive tasks, and the language system, typically recruited during linguistic processing. We examined MD and language system responses to code written in Python, a text-based programming language (Experiment 1) and in ScratchJr, a graphical programming language (Experiment 2); for both, we contrasted responses to code problems with responses to content-matched sentence problems. We found that the MD system exhibited strong bilateral responses to code in both experiments, whereas the language system responded strongly to sentence problems, but weakly or not at all to code problems. Thus, the MD system supports the use of novel cognitive tools even when the input is structurally similar to natural language.},
  keywords = {computer code,fMRI,language,multiple demand,programming},
  file = {/Users/brookeryan/Zotero/storage/Q39IBJ6X/Ivanova et al. - 2020 - Comprehension of computer code relies primarily on.pdf}
}

@article{ComprehensionComputerCodeReliesPrimarilyIvanova2020a,
  title = {Comprehension of Computer Code Relies Primarily on Domain-General Executive Brain Regions},
  author = {Ivanova, Anna A and Srikant, Shashank and Sueoka, Yotaro and Kean, Hope H and Dhamala, Riva and O'Reilly, Una-May and Bers, Marina U and Fedorenko, Evelina},
  editor = {Martin, Andrea E and Behrens, Timothy E and Matchin, William and Bornkessel-Schlesewsky, Ina},
  date = {2020-12-15},
  journaltitle = {eLife},
  volume = {9},
  pages = {e58906},
  publisher = {{eLife Sciences Publications, Ltd}},
  issn = {2050-084X},
  doi = {10.7554/eLife.58906},
  url = {https://doi.org/10.7554/eLife.58906},
  urldate = {2021-10-22},
  abstract = {Computer programming is a novel cognitive tool that has transformed modern society. What cognitive and neural mechanisms support this skill? Here, we used functional magnetic resonance imaging to investigate two candidate brain systems: the multiple demand (MD) system, typically recruited during math, logic, problem solving, and executive tasks, and the language system, typically recruited during linguistic processing. We examined MD and language system responses to code written in Python, a text-based programming language (Experiment 1) and in ScratchJr, a graphical programming language (Experiment 2); for both, we contrasted responses to code problems with responses to content-matched sentence problems. We found that the MD system exhibited strong bilateral responses to code in both experiments, whereas the language system responded strongly to sentence problems, but weakly or not at all to code problems. Thus, the MD system supports the use of novel cognitive tools even when the input is structurally similar to natural language.},
  keywords = {computer code,fMRI,language,multiple demand,programming}
}

@article{ComprehensiveModelCodeReadabilityScalabrino2018,
  title = {A Comprehensive Model for Code Readability},
  author = {Scalabrino, Simone and Linares-Vásquez, Mario and Oliveto, Rocco and Poshyvanyk, Denys},
  date = {2018},
  journaltitle = {Journal of Software: Evolution and Process},
  volume = {30},
  number = {6},
  pages = {e1958},
  issn = {2047-7481},
  doi = {10.1002/smr.1958},
  url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1958},
  urldate = {2021-10-05},
  abstract = {Unreadable code could compromise program comprehension, and it could cause the introduction of bugs. Code consists of mostly natural language text, both in identifiers and comments, and it is a particular form of text. Nevertheless, the models proposed to estimate code readability take into account only structural aspects and visual nuances of source code, such as line length and alignment of characters. In this paper, we extend our previous work in which we use textual features to improve code readability models. We introduce 2 new textual features, and we reassess the readability prediction power of readability models on more than 600 code snippets manually evaluated, in terms of readability, by 5K+ people. We also replicate a study by Buse and Weimer on the correlation between readability and FindBugs warnings, evaluating different models on 20 software systems, for a total of 3M lines of code. The results demonstrate that (1) textual features complement other features and (2) a model containing all the features achieves a significantly higher accuracy as compared with all the other state-of-the-art models. Also, readability estimation resulting from a more accurate model, ie, the combined model, is able to predict more accurately FindBugs warnings.},
  langid = {english},
  keywords = {code readability,quality warning prediction,textual analysis},
  annotation = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1958}
}

@inproceedings{ConnectingDotsRethinkingRelationshipCodeKaras2021,
  title = {Connecting the Dots: Rethinking the Relationship between Code and Prose Writing with Functional Connectivity},
  shorttitle = {Connecting the Dots},
  booktitle = {Proceedings of the 29th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Karas, Zachary and Jahn, Andrew and Weimer, Westley and Huang, Yu},
  date = {2021-08},
  series = {{{ESEC}}/{{FSE}} 2021},
  pages = {767--779},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3468264.3468579},
  url = {https://doi.org/10.1145/3468264.3468579},
  urldate = {2021-10-21},
  abstract = {Medical imaging studies of software engineering have risen in popularity and may reveal the neural underpinnings of coding activities. To date, however, all studies in computer science venues have treated brain regions independently and in isolation. Since most complex neural activity involves coordination among multiple regions, previous analyses may overlook neural behavior. We propose to apply functional connectivity analysis to medical imaging data from software engineering tasks. Informally, this analysis treats the brain as a graph, rather than a series of independent modules, and statistically infers relevant edges. We present a functional connectivity analysis of existing data, which elucidates the interconnections between code writing and prose writing, especially regarding higher mathematics and semantic processing. First, we found a significant link between Broca’s Area (language) and the Number Form Area (higher mathematics) for coding. This both refines previous interpretations that code writing and natural language are distinct from each other, and may also contribute to the understanding of the Number Form Area in the Psychology literature. Second, we identify an area with important functional connectivity for both prose writing and coding, unlike previous analyses that associated it with coding. This advances our neural understanding of coding and prose writing, and was only exposed by using functional connectivity analysis. Third, for coding, we find a strong functional connectivity result for a brain region involved in semantic processing for language, with implications for CS training. Finally, we find a neural relationship between coding and expertise, including a more grounded explanation than prior work.},
  isbn = {978-1-4503-8562-6},
  keywords = {code writing,expertise,fMRI,functional connectivity}
}

@inproceedings{ConnectingDotsRethinkingRelationshipCodeKaras2021a,
  title = {Connecting the Dots: Rethinking the Relationship between Code and Prose Writing with Functional Connectivity},
  shorttitle = {Connecting the Dots},
  booktitle = {Proceedings of the 29th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Karas, Zachary and Jahn, Andrew and Weimer, Westley and Huang, Yu},
  date = {2021-08-20},
  series = {{{ESEC}}/{{FSE}} 2021},
  pages = {767--779},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3468264.3468579},
  url = {https://doi.org/10.1145/3468264.3468579},
  urldate = {2021-10-21},
  abstract = {Medical imaging studies of software engineering have risen in popularity and may reveal the neural underpinnings of coding activities. To date, however, all studies in computer science venues have treated brain regions independently and in isolation. Since most complex neural activity involves coordination among multiple regions, previous analyses may overlook neural behavior. We propose to apply functional connectivity analysis to medical imaging data from software engineering tasks. Informally, this analysis treats the brain as a graph, rather than a series of independent modules, and statistically infers relevant edges. We present a functional connectivity analysis of existing data, which elucidates the interconnections between code writing and prose writing, especially regarding higher mathematics and semantic processing. First, we found a significant link between Broca’s Area (language) and the Number Form Area (higher mathematics) for coding. This both refines previous interpretations that code writing and natural language are distinct from each other, and may also contribute to the understanding of the Number Form Area in the Psychology literature. Second, we identify an area with important functional connectivity for both prose writing and coding, unlike previous analyses that associated it with coding. This advances our neural understanding of coding and prose writing, and was only exposed by using functional connectivity analysis. Third, for coding, we find a strong functional connectivity result for a brain region involved in semantic processing for language, with implications for CS training. Finally, we find a neural relationship between coding and expertise, including a more grounded explanation than prior work.},
  isbn = {978-1-4503-8562-6},
  keywords = {code writing,expertise,fMRI,functional connectivity}
}

@article{ConstructionismEthicsCreativityDevelopingPrimaryAli,
  title = {Constructionism, {{Ethics}}, and {{Creativity}}: {{Developing Primary}} and {{Middle School Artiﬁcial Intelligence Education}}},
  author = {Ali, Safinah and Payne, Blakeley H and Williams, Randi and Park, Hae Won and Breazeal, Cynthia},
  pages = {4},
  abstract = {Children growing up in the era of artificial intelligence (AI) will have a fundamentally different relationship with technology than those before them. As AI changes how we live, work, and play this raises the critical question, ”How do we best prepare students to flourish in the era of AI?” In order to create a future where a diverse and inclusive citizenry can participate in the development of the future of AI, we are developing powerful K12 AI education curricula that emphasize constructionist learning, designing with ethics in mind, and developing a creative mindset. Children will need all of these skills to thrive in the AI era. Here, we describe the tools we created and studies we conducted to build curricula that embody these core principles.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/EIM7IDZ6/Ali et al. - Constructionism, Ethics, and Creativity Developin.pdf}
}

@online{DALL,
  title = {{{DALL}}·{{E}} 2},
  url = {https://openai.com/dall-e-2/},
  urldate = {2022-05-12},
  abstract = {DALL·E 2 is a new AI system that can create realistic images and art from a description in natural language.},
  langid = {english},
  organization = {{OpenAI}},
  file = {/Users/brookeryan/Zotero/storage/QKSAUZIT/dall-e-2.html}
}

@online{DanYaminsHome,
  title = {Dan {{Yamins}} - {{Home}}},
  url = {http://stanford.edu/~yamins/},
  urldate = {2021-10-22},
  file = {/Users/brookeryan/Zotero/storage/K4CQIDHX/~yamins.html}
}

@online{DeepDreamb,
  title = {{{DeepDream}}}
}

@online{DeepstyleNewDeepLearningAlgorithm5ives2015,
  type = {Reddit Post},
  title = {Deepstyle? {{New}} Deep Learning Algorithm Will Stylize Images Based on Another (Ex: {{Van Gogh}})},
  shorttitle = {Deepstyle?},
  author = {5ives},
  date = {2015-08-30T04:22:45},
  url = {www.reddit.com/r/deepdream/comments/3ix9ow/deepstyle_new_deep_learning_algorithm_will/},
  urldate = {2022-05-12},
  organization = {{r/deepdream}},
  file = {/Users/brookeryan/Zotero/storage/VXIWGHUE/deepstyle_new_deep_learning_algorithm_will.html}
}

@book{DesignPatternsElementsReusableObjectOrientedGamma1995,
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  shorttitle = {Design Patterns},
  author = {Gamma, Erich and Johnson, Ralph and Helm, Richard and Johnson, Ralph E. and Vlissides, John},
  date = {1995},
  eprint = {tmNNfSkfTlcC},
  eprinttype = {googlebooks},
  publisher = {{Pearson Deutschland GmbH}},
  abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently. Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk. 0201633612B07092001},
  isbn = {978-3-8273-3043-7},
  langid = {german},
  pagetotal = {512},
  keywords = {Computers / Programming / Object Oriented}
}

@inproceedings{DevelopingMiddleSchoolStudentsAILee2021,
  title = {Developing {{Middle School Students}}' {{AI Literacy}}},
  booktitle = {Proceedings of the 52nd {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Lee, Irene and Ali, Safinah and Zhang, Helen and DiPaola, Daniella and Breazeal, Cynthia},
  date = {2021-03-03},
  pages = {191--197},
  publisher = {{ACM}},
  location = {{Virtual Event USA}},
  doi = {10.1145/3408877.3432513},
  url = {https://dl.acm.org/doi/10.1145/3408877.3432513},
  urldate = {2022-04-25},
  abstract = {In this experience report, we describe an AI summer workshop designed to prepare middle school students to become informed citizens and critical consumers of AI technology and to develop their foundational knowledge and skills to support future endeavors as AI-empowered workers. The workshop featured the 30-hour “Developing AI Literacy” or DAILy curriculum that is grounded in literature on child development, ethics education, and career development. The participants in the workshop were students between the ages of 10 and 14; 87\% were from underrepresented groups in STEM and Computing. In this paper we describe the online curriculum, its implementation during synchronous online workshop sessions in summer of 2020, and preliminary findings on student outcomes. We reflect on the successes and lessons we learned in terms of supporting students’ engagement and conceptual learning of AI, shifting attitudes toward AI, and fostering conceptions of future selves as AI-enabled workers. We conclude with discussions of the affordances and barriers to bringing AI education to students from underrepresented groups in STEM and Computing.},
  eventtitle = {{{SIGCSE}} '21: {{The}} 52nd {{ACM Technical Symposium}} on {{Computer Science Education}}},
  isbn = {978-1-4503-8062-1},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/9D7RB3S9/Lee et al. - 2021 - Developing Middle School Students' AI Literacy.pdf}
}

@online{DiscoDiffusionb,
  title = {{{DiscoDiffusion}}}
}

@online{DreamingNeuralNets,
  title = {Dreaming {{Neural Nets}}},
  url = {https://www.reddit.com/r/deepdream/},
  urldate = {2022-05-12},
  file = {/Users/brookeryan/Zotero/storage/DH47AE5Z/deepdream.html}
}

@article{EmergenceHumanConsciousnessFetalNeonatalLagercrantz2009,
  title = {The {{Emergence}} of {{Human Consciousness}}: {{From Fetal}} to {{Neonatal Life}}},
  shorttitle = {The {{Emergence}} of {{Human Consciousness}}},
  author = {Lagercrantz, Hugo and Changeux, Jean-Pierre},
  date = {2009-03},
  journaltitle = {Pediatric Research},
  shortjournal = {Pediatr Res},
  volume = {65},
  number = {3},
  pages = {255--260},
  publisher = {{Nature Publishing Group}},
  issn = {1530-0447},
  doi = {10.1203/PDR.0b013e3181973b0d},
  url = {https://www.nature.com/articles/pr200950},
  urldate = {2022-05-18},
  abstract = {A simple definition of consciousness is sensory awareness of the body, the self, and the world. The fetus may be aware of the body, for example by perceiving pain. It reacts to touch, smell, and sound, and shows facial expressions responding to external stimuli. However, these reactions are probably preprogrammed and have a subcortical nonconscious origin. Furthermore, the fetus is almost continuously asleep and unconscious partially due to endogenous sedation. Conversely, the newborn infant can be awake, exhibit sensory awareness, and process memorized mental representations. It is also able to differentiate between self and nonself touch, express emotions, and show signs of shared feelings. Yet, it is unreflective, present oriented, and makes little reference to concept of him/herself. Newborn infants display features characteristic of what may be referred to as basic consciousness and they still have to undergo considerable maturation to reach the level of adult consciousness. The preterm infant, ex utero, may open its eyes and establish minimal eye contact with its mother. It also shows avoidance reactions to harmful stimuli. However, the thalamocortical connections are not yet fully established, which is why it can only reach a minimal level of consciousness.},
  issue = {3},
  langid = {english},
  keywords = {general,Medicine/Public Health,Pediatric Surgery,Pediatrics},
  file = {/Users/brookeryan/Zotero/storage/PT4HDDPR/Lagercrantz and Changeux - 2009 - The Emergence of Human Consciousness From Fetal t.pdf;/Users/brookeryan/Zotero/storage/2HYPKDAQ/pr200950.html}
}

@inproceedings{EmpiricalEvaluationTarantulaAutomaticFaultlocalizationJones2005,
  title = {Empirical Evaluation of the Tarantula Automatic Fault-Localization Technique},
  booktitle = {Proceedings of the 20th {{IEEE}}/{{ACM}} International {{Conference}} on {{Automated}} Software Engineering},
  author = {Jones, James A. and Harrold, Mary Jean},
  date = {2005-11},
  series = {{{ASE}} '05},
  pages = {273--282},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1101908.1101949},
  url = {https://doi.org/10.1145/1101908.1101949},
  urldate = {2021-10-22},
  abstract = {The high cost of locating faults in programs has motivated the development of techniques that assist in fault localization by automating part of the process of searching for faults. Empirical studies that compare these techniques have reported the relative effectiveness of four existing techniques on a set of subjects. These studies compare the rankings that the techniques compute for statements in the subject programs and the effectiveness of these rankings in locating the faults. However, it is unknown how these four techniques compare with Tarantula, another existing fault-localization technique, although this technique also provides a way to rank statements in terms of their suspiciousness. Thus, we performed a study to compare the Tarantula technique with the four techniques previously compared. This paper presents our study—it overviews the Tarantula technique along with the four other techniques studied, describes our experiment, and reports and discusses the results. Our studies show that, on the same set of subjects, the Tarantula technique consistently outperforms the other four techniques in terms of effectiveness in fault localization, and is comparable in efficiency to the least expensive of the other four techniques.},
  isbn = {978-1-58113-993-8},
  keywords = {automated debugging,empirical study,fault localization,program analysis}
}

@inproceedings{EmpiricalEvaluationTarantulaAutomaticFaultlocalizationJones2005a,
  title = {Empirical Evaluation of the Tarantula Automatic Fault-Localization Technique},
  booktitle = {Proceedings of the 20th {{IEEE}}/{{ACM}} International {{Conference}} on {{Automated}} Software Engineering},
  author = {Jones, James A. and Harrold, Mary Jean},
  date = {2005-11-07},
  series = {{{ASE}} '05},
  pages = {273--282},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1101908.1101949},
  url = {https://doi.org/10.1145/1101908.1101949},
  urldate = {2021-10-22},
  abstract = {The high cost of locating faults in programs has motivated the development of techniques that assist in fault localization by automating part of the process of searching for faults. Empirical studies that compare these techniques have reported the relative effectiveness of four existing techniques on a set of subjects. These studies compare the rankings that the techniques compute for statements in the subject programs and the effectiveness of these rankings in locating the faults. However, it is unknown how these four techniques compare with Tarantula, another existing fault-localization technique, although this technique also provides a way to rank statements in terms of their suspiciousness. Thus, we performed a study to compare the Tarantula technique with the four techniques previously compared. This paper presents our study---it overviews the Tarantula technique along with the four other techniques studied, describes our experiment, and reports and discusses the results. Our studies show that, on the same set of subjects, the Tarantula technique consistently outperforms the other four techniques in terms of effectiveness in fault localization, and is comparable in efficiency to the least expensive of the other four techniques.},
  isbn = {978-1-58113-993-8},
  keywords = {automated debugging,empirical study,fault localization,program analysis}
}

@article{EstimatingSuccessReidentificationsIncompleteDatasetsRocher2019,
  title = {Estimating the Success of Re-Identifications in Incomplete Datasets Using Generative Models},
  author = {Rocher, Luc and Hendrickx, Julien M. and de Montjoye, Yves-Alexandre},
  options = {useprefix=true},
  date = {2019-12},
  journaltitle = {Nature Communications},
  shortjournal = {Nat Commun},
  volume = {10},
  number = {1},
  pages = {3069},
  issn = {2041-1723},
  doi = {10.1038/s41467-019-10933-3},
  url = {http://www.nature.com/articles/s41467-019-10933-3},
  urldate = {2022-04-26},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/STCVBAA7/Rocher et al. - 2019 - Estimating the success of re-identifications in in.pdf}
}

@article{ExploratoryStudyProgramComprehensionStrategiesCorritore2001,
  title = {An Exploratory Study of Program Comprehension Strategies of Procedural and Object-Oriented Programmers},
  author = {Corritore, Cynthia L. and Wiedenbeck, Susan},
  date = {2001-01},
  journaltitle = {International Journal of Human-Computer Studies},
  shortjournal = {International Journal of Human-Computer Studies},
  volume = {54},
  number = {1},
  pages = {1--23},
  issn = {10715819},
  doi = {10.1006/ijhc.2000.0423},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S1071581900904233},
  urldate = {2021-10-21},
  langid = {english}
}

@inproceedings{ExploringMachineTeachingChildrenDwivedi2021,
  title = {Exploring {{Machine Teaching}} with {{Children}}},
  booktitle = {2021 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Dwivedi, Utkarsh and Gandhi, Jaina and Parikh, Raj and Coenraad, Merijke and Bonsignore, Elizabeth and Kacorri, Hernisa},
  date = {2021-10},
  pages = {1--11},
  issn = {1943-6106},
  doi = {10.1109/VL/HCC51201.2021.9576171},
  abstract = {Iteratively building and testing machine learning models can help children develop creativity, flexibility, and comfort with machine learning and artificial intelligence. We explore how children use machine teaching interfaces with a team of 14 children (aged 7–13 years) and adult co-designers. Children trained image classifiers and tested each other's models for robustness. Our study illuminates how children reason about ML concepts, offering these insights for designing machine teaching experiences for children: (i) ML metrics (e.g. confidence scores) should be visible for experimentation; (ii) ML activities should enable children to exchange models for promoting reflection and pattern recognition; and (iii) the interface should allow quick data inspection (e.g. images vs. gestures).},
  eventtitle = {2021 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  keywords = {AI education,child-computer interaction,Education,informal learning,Inspection,machine learning,Machine learning,machine teaching,Measurement,Reflection,Robustness,Visualization},
  file = {/Users/brookeryan/Zotero/storage/EBA7NQ9H/Dwivedi et al. - 2021 - Exploring Machine Teaching with Children.pdf;/Users/brookeryan/Zotero/storage/H32H98VG/9576171.html}
}

@incollection{ExploringWhyUnderrepresentedStudentsAreBarretto2021,
  title = {Exploring {{Why Underrepresented Students Are Less Likely}} to {{Study Machine Learning}} and {{Artificial Intelligence}}},
  booktitle = {Proceedings of the 26th {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Barretto, Daphne and LaChance, Julienne and Burton, Emanuelle and Liao, Soohyun Nam},
  date = {2021-06-26},
  pages = {457--463},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  url = {https://doi.org/10.1145/3430665.3456332},
  urldate = {2022-04-25},
  abstract = {There is little research on why underrepresented minorities are less likely to specifically study Machine Learning and Artificial Intelligence (ML/AI). We surveyed 159 undergraduate students about their interest in, exposure to, and personal views on ML/AI in order to explore variations in responses by self-reported gender and race/ethnicity groups. We found that students underrepresented by race/ethnicity are \textasciitilde 6 times less likely to take a traditional ML/AI course than those not underrepresented by race/ethnicity, but no significant difference was found between gender representation. Additionally, students underrepresented by race/ethnicity are more likely to report interest in social, cultural, and political impacts of ML/AI rather than the more technical aspects of ML/AI itself, which is a prevalent interest of students not underrepresented by race/ethnicity. We explore potential reasoning for this difference through further analysis of their survey responses. Encouragingly, we find that regardless of representational status 72.0\% of students who report lack of interest in a traditional introductory course are interested in a ML/AI course that focuses more on the political, philosophical, and ethical issues raised by ML/AI and its impacts on society. Our findings suggest that a 'CS Principles" style introductory ML/AI course, emphasizing social and political impacts, could be an effective way to promote diversity in ML/AI.},
  isbn = {978-1-4503-8214-4},
  keywords = {artificial intelligence,diversity,machine learning,race and ethnicity,underrepresented students},
  file = {/Users/brookeryan/Zotero/storage/NLP77MHN/Barretto et al. - 2021 - Exploring Why Underrepresented Students Are Less L.pdf}
}

@online{Faculty,
  title = {Faculty},
  url = {https://hai.stanford.edu/people/faculty},
  urldate = {2021-10-22},
  langid = {english},
  organization = {{Stanford Institute for Human-Centered Artificial Intelligence}},
  file = {/Users/brookeryan/Zotero/storage/JN2TYYH5/faculty.html}
}

@online{FeiFeiLiProfileStanfordProfiles,
  title = {Fei-{{Fei Li}}'s {{Profile}} | {{Stanford Profiles}}},
  url = {https://profiles.stanford.edu/fei-fei-li},
  urldate = {2021-10-22}
}

@online{GANGoghCreatingArtGANsJones2017,
  title = {{{GANGogh}}: {{Creating Art}} with {{GANs}}},
  shorttitle = {{{GANGogh}}},
  author = {Jones, Kenny},
  date = {2017-06-19T00:19:58},
  url = {https://towardsdatascience.com/gangogh-creating-art-with-gans-8d087d8f74a1},
  urldate = {2022-05-12},
  abstract = {Introduction:},
  langid = {english},
  organization = {{Medium}},
  file = {/Users/brookeryan/Zotero/storage/BPDXPLA2/gangogh-creating-art-with-gans-8d087d8f74a1.html}
}

@online{GaryCottrellGradSchoolAdvice,
  title = {Gary {{Cottrell}}: {{Grad}} School Advice},
  url = {https://cseweb.ucsd.edu//~gary/Advice.html},
  urldate = {2021-10-28},
  file = {/Users/brookeryan/Zotero/storage/CD79ZFFX/Advice.html}
}

@misc{Gitb,
  title = {Git},
  url = {https://git-scm.com/},
  urldate = {2022-01-31}
}

@online{Gitc,
  title = {Git},
  url = {https://git-scm.com/},
  urldate = {2022-01-31}
}

@audio{GlassConcreteStone2004,
  title = {Glass, {{Concrete}} \& {{Stone}}},
  date = {2004-03-15},
  url = {https://open.spotify.com/track/5JJRxktdvtSjN3AeITJNCs},
  urldate = {2022-05-11},
  abstract = {David Byrne · Song · 2004},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/JI95SUF8/5JJRxktdvtSjN3AeITJNCs.html}
}

@online{GoogleCalendarWeekJuly2022,
  title = {Google {{Calendar}} - {{Week}} of {{July}} 4, 2022},
  url = {https://calendar.google.com/calendar/u/0/r/week/2022/7/9},
  urldate = {2022-05-21},
  file = {/Users/brookeryan/Zotero/storage/N7ZYIGLV/9.html}
}

@online{HomeCognimatesa,
  title = {Home - {{Cognimates}}},
  url = {http://cognimates.me/home/},
  urldate = {2022-04-20},
  file = {/Users/brookeryan/Zotero/storage/TXYF4PKV/home.html}
}

@online{HotPotb,
  title = {Hot {{Pot}}},
  url = {https://hotpot.ai/art-maker}
}

@online{HowCanPublishPapersNIPS,
  title = {How Can {{I}} Publish Papers in {{NIPS}}, {{ICML}}, {{AAAI}}, {{IJCAI}}? {{I}} Don't Know How to Get the Novel Ideas.},
  shorttitle = {How Can {{I}} Publish Papers in {{NIPS}}, {{ICML}}, {{AAAI}}, {{IJCAI}}?},
  url = {https://www.quora.com/How-can-I-publish-papers-in-NIPS-ICML-AAAI-IJCAI-I-dont-know-how-to-get-the-novel-ideas},
  urldate = {2021-10-01},
  abstract = {Answer (1 of 4): I am a firm believer of this notion of Andrew Ng. (paraphrasing his words) You have to put the following steps in loop: 1. Read as much as recent papers in your research area as possible. This gives you an understanding of the current research problems in your area. 2. Try to ...},
  langid = {english},
  organization = {{Quora}},
  file = {/Users/brookeryan/Zotero/storage/RLBUX5DM/How-can-I-publish-papers-in-NIPS-ICML-AAAI-IJCAI-I-dont-know-how-to-get-the-novel-ideas.html}
}

@article{HowDevelopersUseAPIDocumentationMeng2019,
  title = {How Developers Use {{API}} Documentation: An Observation Study},
  shorttitle = {How Developers Use {{API}} Documentation},
  author = {Meng, Michael and Steinhardt, Stephanie and Schubert, Andreas},
  date = {2019-08-26},
  journaltitle = {Communication Design Quarterly},
  shortjournal = {Commun. Des. Q. Rev},
  volume = {7},
  number = {2},
  pages = {40--49},
  doi = {10.1145/3358931.3358937},
  url = {https://doi.org/10.1145/3358931.3358937},
  urldate = {2021-10-21},
  abstract = {Application Programming Interfaces (APIs) play a crucial role in modern software engineering. However, learning to use a new API often is a challenge for developers. In order to support the learning process effectively, we need to understand how developers use documentation when starting to work with a new API. We report an exploratory study that observed developers while they solved programming tasks involving a simple API. The results reveal differences regarding developer activities and documentation usage that a successful design strategy for API documentation needs to accommodate. Several guidelines to optimize API documentation are discussed.},
  keywords = {API documentation,information design,observation method,usability}
}

@article{HowEffectiveDevelopersInvestigateSourceRobillard2005,
  title = {How Effective Developers Investigate Source Code: {{An}} Exploratory Study},
  shorttitle = {How Effective Developers Investigate Source Code},
  author = {Robillard, Martin and Coelho, Wesley and Murphy, Gail},
  date = {2005-01},
  journaltitle = {Software Engineering, IEEE Transactions on},
  volume = {30},
  pages = {889--903},
  doi = {10.1109/TSE.2004.101},
  abstract = {Prior to performing a software change task, developers must discover and understand the subset of the system relevant to the task. Since the behavior exhibited by individual developers when investigating a software system is influenced by intuition, experience, and skill, there is often significant variability in developer effectiveness. To understand the factors that contribute to effective program investigation behavior, we conducted a study of five developers performing a change task on a medium-size open source system. We isolated the factors related to effective program investigation behavior by performing a detailed qualitative analysis of the program investigation behavior of successful and unsuccessful developers. We report on these factors as a set of detailed observations, such as evidence of the phenomenon of inattention blindness by developers skimming source code. In general, our results support the intuitive notion that a methodical and structured approach to program investigation is the most effective.}
}

@article{HowEffectiveDevelopersInvestigateSourceRobillard2005a,
  title = {How Effective Developers Investigate Source Code: {{An}} Exploratory Study},
  shorttitle = {How Effective Developers Investigate Source Code},
  author = {Robillard, Martin and Coelho, Wesley and Murphy, Gail},
  date = {2005-01-01},
  journaltitle = {Software Engineering, IEEE Transactions on},
  shortjournal = {Software Engineering, IEEE Transactions on},
  volume = {30},
  pages = {889--903},
  doi = {10.1109/TSE.2004.101},
  abstract = {Prior to performing a software change task, developers must discover and understand the subset of the system relevant to the task. Since the behavior exhibited by individual developers when investigating a software system is influenced by intuition, experience, and skill, there is often significant variability in developer effectiveness. To understand the factors that contribute to effective program investigation behavior, we conducted a study of five developers performing a change task on a medium-size open source system. We isolated the factors related to effective program investigation behavior by performing a detailed qualitative analysis of the program investigation behavior of successful and unsuccessful developers. We report on these factors as a set of detailed observations, such as evidence of the phenomenon of inattention blindness by developers skimming source code. In general, our results support the intuitive notion that a methodical and structured approach to program investigation is the most effective.}
}

@online{HowItGoodDALLEExplained,
  title = {How Is It so Good ? ({{DALL-E Explained Pt}}. 2) - {{ML}}@{{B Blog}}},
  shorttitle = {How Is It so Good ?},
  url = {https://ml.berkeley.edu/blog/posts/dalle2/},
  urldate = {2022-05-31},
  abstract = {DALL-E is an increibly powerful model from OpenAI capable of generating incredibly creative images from a text prompt. In this blog post we explore the transformer part of DALL-E, which is sort of like its brain; it's the component responsible for connecting the world of natural language with our visual world. Specificially this blog will look at questions like "how is it so good ?" and "why are transformers able to express and integrate so much information ?"},
  langid = {english},
  organization = {{How is it so good ? (DALL-E Explained Pt. 2) - ML@B Blog}},
  file = {/Users/brookeryan/Zotero/storage/389A5E4B/dalle2.html}
}

@inproceedings{HowProfessionalDevelopersComprehendSoftwareRoehm2012,
  title = {How Do Professional Developers Comprehend Software?},
  booktitle = {2012 34th {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Roehm, Tobias and Tiarks, Rebecca and Koschke, Rainer and Maalej, Walid},
  date = {2012-06},
  pages = {255--265},
  issn = {1558-1225},
  doi = {10.1109/ICSE.2012.6227188},
  abstract = {Research in program comprehension has considerably evolved over the past two decades. However, only little is known about how developers practice program comprehension under time and project pressure, and which methods and tools proposed by researchers are used in industry. This paper reports on an observational study of 28 professional developers from seven companies, investigating how developers comprehend software. In particular we focus on the strategies followed, information needed, and tools used. We found that developers put themselves in the role of end users by inspecting user interfaces. They try to avoid program comprehension, and employ recurring, structured comprehension strategies depending on work context. Further, we found that standards and experience facilitate comprehension. Program comprehension was considered a subtask of other maintenance tasks rather than a task by itself. We also found that face-to-face communication is preferred to documentation. Overall, our results show a gap between program comprehension research and practice as we did not observe any use of state of the art comprehension tools and developers seem to be unaware of them. Our findings call for further careful analysis and for reconsidering research agendas.},
  eventtitle = {2012 34th {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  keywords = {Companies,Content management,context awareness,Documentation,empirical studies,Interviews,Java,maintenance,program comprehension,Software,software documentation,Visualization}
}

@online{HowTakeSmartNotesObsidianDuffney2021,
  type = {Substack newsletter},
  title = {How to {{Take Smart Notes}} in {{Obsidian}}},
  author = {Duffney, Josh},
  date = {2021-07-26},
  url = {https://theknowledgeworker.substack.com/p/how-to-take-smart-notes-in-obsidian},
  urldate = {2022-05-11},
  abstract = {A Zettelkasten Tutorial},
  organization = {{The Knowledge Worker}},
  file = {/Users/brookeryan/Zotero/storage/R3JJEQWR/how-to-take-smart-notes-in-obsidian.html}
}

@book{HowTakeSmartNotesOneAhrens2022,
  title = {How to {{Take Smart Notes}}: {{One Simple Technique}} to {{Boost Writing}}, {{Learning}} and {{Thinking}}},
  shorttitle = {How to {{Take Smart Notes}}},
  author = {Ahrens, Sönke},
  date = {2022-03-11},
  eprint = {QmBjEAAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {{Sönke Ahrens}},
  abstract = {This is the second, revised and expanded edition. The first edition was published under the slightly longer title \&quot;How to Take Smart Notes. One Simple Technique to Boost Writing,~Learning and Thinking - for Students, Academics and Nonfiction Book Writers\&quot;.The key to good and efficient writing lies in the intelligent organisation of ideas and notes. This book helps students, academics and other knowledge workers to get more done, write intelligent texts and learn for the long run. It teaches you how to take smart notes and ensure they bring you and your projects forward.The Take Smart Notes principle is based on established psychological insight and draws from a tried and tested note-taking technique: the~Zettelkasten. This is the first comprehensive guide and description of this system in English, and not only does it explain how it works, but also why. It suits students and academics in the social sciences and humanities, nonfiction writers and others who are in the business of reading, thinking and writing.Instead of wasting your time searching for your notes, quotes or references, you can focus on what really counts: thinking, understanding and developing new ideas in writing.Dr. Sönke Ahrens is a writer and researcher in the field of education and social science. He is the author of the award-winning book “Experiment and Exploration: Forms of World Disclosure” (Springer).Since its first publication, How to Take Smart Notes has sold more than 100,000 copies and has been translated into seven languages.},
  isbn = {978-3-9824388-1-8},
  langid = {english},
  pagetotal = {212},
  keywords = {Self-Help / Personal Growth / Memory Improvement,Self-Help / Self-Management / Time Management,Study Aids / Book Notes}
}

@online{IllustratedVQGANMIRANDA2021,
  title = {The {{Illustrated VQGAN}}},
  author = {MIRANDA, LJ},
  date = {2021-08-08T00:00:00+08:00},
  url = {https://ljvmiranda921.github.io/notebook/2021/08/08/clip-vqgan/},
  urldate = {2022-05-31},
  abstract = {VQGAN allows us to generate high-resolution images from text, and has now taken art Twitter by storm. Let me talk about how it works on a conceptual level in...},
  langid = {english},
  organization = {{Lj Miranda}},
  file = {/Users/brookeryan/Zotero/storage/3A7R439Q/clip-vqgan.html}
}

@inproceedings{ImprovingCodeReadabilityModelsTextualScalabrino2016,
  title = {Improving Code Readability Models with Textual Features},
  booktitle = {2016 {{IEEE}} 24th {{International Conference}} on {{Program Comprehension}} ({{ICPC}})},
  author = {Scalabrino, Simone and Linares-Vásquez, Mario and Poshyvanyk, Denys and Oliveto, Rocco},
  date = {2016-05},
  pages = {1--10},
  doi = {10.1109/ICPC.2016.7503707},
  abstract = {Code reading is one of the most frequent activities in software maintenance; before implementing changes, it is necessary to fully understand source code often written by other developers. Thus, readability is a crucial aspect of source code that may significantly influence program comprehension effort. In general, models used to estimate software readability take into account only structural aspects of source code, e.g., line length and a number of comments. However, source code is a particular form of text; therefore, a code readability model should not ignore the textual aspects of source code encapsulated in identifiers and comments. In this paper, we propose a set of textual features aimed at measuring code readability. We evaluated the proposed textual features on 600 code snippets manually evaluated (in terms of readability) by 5K+ people. The results demonstrate that the proposed features complement classic structural features when predicting code readability judgments. Consequently, a code readability model based on a richer set of features, including the ones proposed in this paper, achieves a significantly higher accuracy as compared to all of the state-of-the-art readability models.},
  eventtitle = {2016 {{IEEE}} 24th {{International Conference}} on {{Program Comprehension}} ({{ICPC}})},
  keywords = {Computational modeling,Feature extraction,Semantics,Software quality,Syntactics,Visualization}
}

@online{InformationForagingTheorya,
  title = {Information Foraging Theory},
  url = {https://irwinkwan.com/tag/information-foraging-theory/},
  urldate = {2021-10-21},
  abstract = {Posts about information foraging theory written by irwinhkwan},
  langid = {english},
  organization = {{Irwin Kwan}}
}

@article{InformationForagingTheoryPerspectiveToolsFleming2013,
  title = {An {{Information Foraging Theory Perspective}} on {{Tools}} for {{Debugging}}, {{Refactoring}}, and {{Reuse Tasks}}},
  author = {Fleming, Scott D. and Scaffidi, Chris and Piorkowski, David and Burnett, Margaret and Bellamy, Rachel and Lawrance, Joseph and Kwan, Irwin},
  date = {2013-03-01},
  journaltitle = {ACM Transactions on Software Engineering and Methodology},
  shortjournal = {ACM Trans. Softw. Eng. Methodol.},
  volume = {22},
  number = {2},
  pages = {14:1--14:41},
  issn = {1049-331X},
  doi = {10.1145/2430545.2430551},
  url = {https://doi.org/10.1145/2430545.2430551},
  urldate = {2021-10-21},
  abstract = {Theories of human behavior are an important but largely untapped resource for software engineering research. They facilitate understanding of human developers’ needs and activities, and thus can serve as a valuable resource to researchers designing software engineering tools. Furthermore, theories abstract beyond specific methods and tools to fundamental principles that can be applied to new situations. Toward filling this gap, we investigate the applicability and utility of Information Foraging Theory (IFT) for understanding information-intensive software engineering tasks, drawing upon literature in three areas: debugging, refactoring, and reuse. In particular, we focus on software engineering tools that aim to support information-intensive activities, that is, activities in which developers spend time seeking information. Regarding applicability, we consider whether and how the mathematical equations within IFT can be used to explain why certain existing tools have proven empirically successful at helping software engineers. Regarding utility, we applied an IFT perspective to identify recurring design patterns in these successful tools, and consider what opportunities for future research are revealed by our IFT perspective.},
  keywords = {Information foraging,software maintenance}
}

@inproceedings{InfusingDesignThinkingSoftwareEngineeringPalacin-Silva2017,
  title = {Infusing {{Design Thinking}} into a {{Software Engineering Capstone Course}}},
  booktitle = {2017 {{IEEE}} 30th {{Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  author = {Palacin-Silva, Maria and Khakurel, Jayden and Happonen, Ari and Hynninen, Timo and Porras, Jari},
  date = {2017-11},
  pages = {212--221},
  issn = {2377-570X},
  doi = {10.1109/CSEET.2017.41},
  abstract = {Software engineering (SE) educators are challenged to balance the scope and depth in their courses to train students in skills which will fulfill the ever-evolving industry needs. Capstone courses are a tool for educators to transfer hands-on experience into practical knowledge and skills of SE students. This paper describes the design of a Casptone course, at Lappeenranta University of Technology. The designed course is "human-centric SE capstone", infusing design thinking methods and agile practices into the project life-cycle knowhow. The capstone was offered in spring of 2017 as a 16-week course for 29 students. Design thinking was effective to perform requirement elicitation, software design and testing. Also, the applied approach allowed students to be self-directed which increased their motivation, as a result there was zero dropout rate. Design thinking is a powerful mean of problem solving and effectively supports SE education in bringing a more hands-on and minds-on, problem-based curriculum.},
  eventtitle = {2017 {{IEEE}} 30th {{Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  keywords = {capstone,course design,Design methodology,design thinking,education,Education,human-centric,Industries,Software,software curricula,software engineering,Software engineering,Testing,Tools}
}

@inproceedings{InteractiveLearningMethodEngageStudentsKrusche2020,
  title = {An Interactive Learning Method to Engage Students in Modeling},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}}},
  author = {Krusche, Stephan and von Frankenberg, Nadine and Reimer, Lara Marie and Bruegge, Bernd},
  options = {useprefix=true},
  date = {2020-06-27},
  series = {{{ICSE-SEET}} '20},
  pages = {12--22},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3377814.3381701},
  url = {https://doi.org/10.1145/3377814.3381701},
  urldate = {2021-09-24},
  abstract = {Modeling is an important skill in software engineering. However, it is often not tangible for students and not appreciated. Students prefer coding because they receive immediate feedback from the compiler. Engaging students in modeling is difficult, especially in large introductory courses. We have developed an interactive learning method for modeling which is based on an easy to use online editor. Students learn modeling in guided tutorials in the lecture right after the theory is introduced and deepen their modeling skills in group work and homework exercises. This learning method was applied in a large introductory course with more than 1000 students. An empirical evaluation of the method demonstrated that the students' learning outcome in modeling improved significantly by up to 87 \%. Students are motivated to use models in their future projects and understand how to approach problems with models. The use of interactive models in programming exercises improves their understanding of the taught concepts.},
  isbn = {978-1-4503-7124-7},
  keywords = {education,interactive,learning management system,learning success,modeling,online editor,SEET 2020,software engineering}
}

@online{Interpolationb,
  title = {Interpolation},
  url = {https://magenta.tensorflow.org/assets/sketch_rnn_demo/multi_predict.html}
}

@inproceedings{IntroductorySoftwareEngineeringCourseThatLudi2005,
  title = {An Introductory Software Engineering Course That Facilitates Active Learning},
  booktitle = {Proceedings of the 36th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Ludi, Stephanie and Natarajan, Swaminathan and Reichlmayr, Thomas},
  date = {2005-02-23},
  series = {{{SIGCSE}} '05},
  pages = {302--306},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1047344.1047449},
  url = {https://doi.org/10.1145/1047344.1047449},
  urldate = {2021-10-21},
  abstract = {At the Rochester Institute of Technology, the undergraduate introductory software engineering course has been redesigned from a lecture-lab format to a project-centric studio format. The new format blends the lecture material with the project work. As a result, students drive their own learning experience based on scaffolding created by the course design. The challenges faced and the techniques and strategies utilized in the planning and delivery of the course will be discussed, including the utilization of online learning support infrastructure. This paper presents instructor experiences, analysis of student feedback, lessons learned and recommendations for other educators considering an active learning approach for their courses.},
  isbn = {978-1-58113-997-6},
  keywords = {active learning,cooperative learning,software engineering,student centered instruction,student teams}
}

@article{JammingTogetherConceptMappingPandemicPothier2021,
  title = {Jamming {{Together}}: {{Concept Mapping}} in the {{Pandemic Classroom}}},
  shorttitle = {Jamming {{Together}}},
  author = {Pothier, Wendy},
  date = {2021-03-12},
  journaltitle = {Ticker: The Academic Business Librarianship Review},
  volume = {5},
  number = {2},
  issn = {2369-9779},
  doi = {10.3998/ticker.16481003.0005.220},
  url = {http://hdl.handle.net/2027/spo.16481003.0005.220},
  urldate = {2021-10-21},
  langid = {english}
}

@online{JeannetteBohg,
  title = {Jeannette {{Bohg}}},
  url = {http://iprl.stanford.edu/},
  urldate = {2021-10-22},
  abstract = {Jeannette Bohg, Assistant Professor for Robotics at Stanford.},
  langid = {english},
  organization = {{Jeannette Bohg}},
  file = {/Users/brookeryan/Zotero/storage/UYK3TYTQ/~bohg.html}
}

@online{JoshTenenbaumHomePage,
  title = {Josh {{Tenenbaum}}'s Home Page},
  url = {http://web.mit.edu/cocosci/josh.html},
  urldate = {2021-10-22},
  file = {/Users/brookeryan/Zotero/storage/K3MEPAS3/josh.html}
}

@inproceedings{LetChancePlayfulProbabilisticProgrammingDhariwal2020,
  title = {Let's {{Chance}}: {{Playful Probabilistic Programming}} for {{Children}}},
  shorttitle = {Let's {{Chance}}},
  booktitle = {Extended {{Abstracts}} of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Dhariwal, Manuj and Dhariwal, Shruti},
  date = {2020-04-25},
  pages = {1--7},
  publisher = {{ACM}},
  location = {{Honolulu HI USA}},
  doi = {10.1145/3334480.3383071},
  url = {https://dl.acm.org/doi/10.1145/3334480.3383071},
  urldate = {2022-04-20},
  abstract = {Probabilistic thinking has been one of the most powerful ideas in the history of science, and it is rapidly gaining even more relevance as it lies at the core of artificial intelligence (AI) systems and machine learning (ML) algorithms that are increasingly pervading our everyday lives. In this paper, we introduce Let’s Chance—a novel computational microworld that extends the widely popular Scratch Programming Language with new types of code blocks and representations that make it accessible for children to encounter and tinker with the rich ideas and sophisticated concepts of probabilistic modeling and learning. Using the tool, children can imagine and code their own expressive, playful, and personally meaningful probabilistic projects, such as—generative art, music, or text; chance-based games and stories; interactive visualizations; and even advanced projects for making a computer learn from input data using simple Markov models of probabilistic learning, among many other creative possibilities.},
  eventtitle = {{{CHI}} '20: {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  isbn = {978-1-4503-6819-3},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/3W8L3F2F/Dhariwal and Dhariwal - 2020 - Let's Chance Playful Probabilistic Programming fo.pdf}
}

@inproceedings{LetGoWhiteboardHowWhyCherubini2007,
  title = {Let's {{Go}} to the {{Whiteboard}}: {{How}} and {{Why Software Developers Use Drawings}}},
  shorttitle = {Let's Go to the Whiteboard},
  booktitle = {{{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Cherubini, Mauro and Venolia, Gina and DeLine, Rob and Ko, Amy J.},
  date = {2007},
  series = {{{CHI}} '07},
  pages = {557--566},
  doi = {10.1145/1240624.1240714},
  url = {https://doi.org/10.1145/1240624.1240714},
  urldate = {2021-10-13},
  abstract = {Software developers are rooted in the written form of their code, yet they often draw diagrams representing their code. Unfortunately, we still know little about how and why they create these diagrams, and so there is little research to inform the design of visual tools to support developers' work. This paper presents findings from semi-structured interviews that have been validated with a structured survey. Results show that most of the diagrams had a transient nature because of the high cost of changing whiteboard sketches to electronic renderings. Diagrams that documented design decisions were often externalized in these temporary drawings and then subsequently lost. Current visualization tools and the software development practices that we observed do not solve these issues, but these results suggest several directions for future research.},
  isbn = {978-1-59593-593-9},
  keywords = {diagrams,exploratory/field study,software visualization}
}

@inproceedings{LetGoWhiteboardHowWhyCherubini2007a,
  title = {Let's {{Go}} to the {{Whiteboard}}: {{How}} and {{Why Software Developers Use Drawings}}},
  shorttitle = {Let's Go to the Whiteboard},
  booktitle = {{{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Cherubini, Mauro and Venolia, Gina and DeLine, Rob and Ko, Amy J.},
  date = {2007},
  series = {{{CHI}} '07},
  pages = {557--566},
  doi = {10.1145/1240624.1240714},
  url = {https://doi.org/10.1145/1240624.1240714},
  urldate = {2021-10-13},
  abstract = {Software developers are rooted in the written form of their code, yet they often draw diagrams representing their code. Unfortunately, we still know little about how and why they create these diagrams, and so there is little research to inform the design of visual tools to support developers' work. This paper presents findings from semi-structured interviews that have been validated with a structured survey. Results show that most of the diagrams had a transient nature because of the high cost of changing whiteboard sketches to electronic renderings. Diagrams that documented design decisions were often externalized in these temporary drawings and then subsequently lost. Current visualization tools and the software development practices that we observed do not solve these issues, but these results suggest several directions for future research.},
  isbn = {978-1-59593-593-9},
  keywords = {diagrams,exploratory/field study,software visualization}
}

@article{LetMeGuidelinesSuccessfulOnboardingSteinmacher2018,
  title = {Let {{Me In}}: {{Guidelines}} for the {{Successful Onboarding}} of {{Newcomers}} to {{Open Source Projects}}},
  shorttitle = {Let {{Me In}}},
  author = {Steinmacher, Igor and Treude, Christoph and Gerosa, Marco Aurelio},
  date = {2018-01},
  journaltitle = {IEEE Software},
  volume = {PP},
  pages = {1--1},
  doi = {10.1109/MS.2018.110162131},
  abstract = {Many community-based open source software (OSS) projects depend on a continuous influx of newcomers for their survival and continuity; yet, newcomers face many barriers to contributing to a project for the first time, leading in many cases to dropouts. In this paper, we provide guidelines for both OSS communities interested in receiving more external contributions, and newcomers who want to contribute to OSS projects. These guidelines are based on our previous work, which characterized barriers encountered by newcomers and proposed tools to support them in overcoming these barriers. Since newcomers are critical for OSS growth and continuity, our work may help increase contributions to OSS projects, as well as promote a more diverse community.}
}

@article{LetMeGuidelinesSuccessfulOnboardingSteinmacher2018a,
  title = {Let {{Me In}}: {{Guidelines}} for the {{Successful Onboarding}} of {{Newcomers}} to {{Open Source Projects}}},
  shorttitle = {Let {{Me In}}},
  author = {Steinmacher, Igor and Treude, Christoph and Gerosa, Marco Aurelio},
  date = {2018-01-11},
  journaltitle = {IEEE Software},
  shortjournal = {IEEE Software},
  volume = {PP},
  pages = {1--1},
  doi = {10.1109/MS.2018.110162131},
  abstract = {Many community-based open source software (OSS) projects depend on a continuous influx of newcomers for their survival and continuity; yet, newcomers face many barriers to contributing to a project for the first time, leading in many cases to dropouts. In this paper, we provide guidelines for both OSS communities interested in receiving more external contributions, and newcomers who want to contribute to OSS projects. These guidelines are based on our previous work, which characterized barriers encountered by newcomers and proposed tools to support them in overcoming these barriers. Since newcomers are critical for OSS growth and continuity, our work may help increase contributions to OSS projects, as well as promote a more diverse community.}
}

@inproceedings{LeveragingBiometricDataBoostSoftwareFritz2016,
  title = {Leveraging {{Biometric Data}} to {{Boost Software Developer Productivity}}},
  author = {Fritz, Thomas and Muller, Sebastian},
  date = {2016-03},
  pages = {66--77},
  doi = {10.1109/SANER.2016.107},
  abstract = {Producing great software requires great productive developers. Yet, what does it really mean for an individual developer to be productive, and what can we do to best help developers to be productive? To answer these questions, research has traditionally focused on measuring a developer’s output and therefore suffered from two drawbacks: the measures can only be calculated after a developer finished her work and these measures do not account for individual differences between developers. The recent advances in biometric sensor technology offer new opportunities to measure a developer’s cognitive and emotional states in real-time and thus allow us to know more about what an individual developer is currently experiencing and what might foster or impede the developer’s productivity. Results from recent research studies demonstrate the potential that biometric data has to accurately predict aspects of a developer’s work, such as perceived task and code difficulty, progress and interruptibility of a developer. This opens up new opportunities for better supporting developers in their work and, for instance, prevent bugs from entering the code, reduce costly interruptions, and foster a better and more productive work day. Our vision is that biometric sensing will be integrated into a developer’s work and that biometrics can be}
}

@inproceedings{LeveragingBiometricDataBoostSoftwareFritz2016a,
  title = {Leveraging {{Biometric Data}} to {{Boost Software Developer Productivity}}},
  author = {Fritz, Thomas and Muller, Sebastian},
  date = {2016-03-01},
  pages = {66--77},
  doi = {10.1109/SANER.2016.107},
  abstract = {Producing great software requires great productive developers. Yet, what does it really mean for an individual developer to be productive, and what can we do to best help developers to be productive? To answer these questions, research has traditionally focused on measuring a developer’s output and therefore suffered from two drawbacks: the measures can only be calculated after a developer finished her work and these measures do not account for individual differences between developers. The recent advances in biometric sensor technology offer new opportunities to measure a developer’s cognitive and emotional states in real-time and thus allow us to know more about what an individual developer is currently experiencing and what might foster or impede the developer’s productivity. Results from recent research studies demonstrate the potential that biometric data has to accurately predict aspects of a developer’s work, such as perceived task and code difficulty, progress and interruptibility of a developer. This opens up new opportunities for better supporting developers in their work and, for instance, prevent bugs from entering the code, reduce costly interruptions, and foster a better and more productive work day. Our vision is that biometric sensing will be integrated into a developer’s work and that biometrics can be}
}

@online{ListToolsResourcesAIArta,
  title = {List of {{Tools}} and {{Resources}} for {{AI Art}}},
  url = {https://pharmapsychotic.com/tools.html},
  urldate = {2022-05-04},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/LGK7N644/tools.html}
}

@inproceedings{LocalizedOpenSourceCollaborationSoftwareBuffardi2015,
  title = {Localized Open Source Collaboration in Software Engineering Education},
  booktitle = {2015 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Buffardi, Kevin},
  date = {2015-10},
  pages = {1--5},
  doi = {10.1109/FIE.2015.7344142},
  abstract = {Involving computer science students in open source software projects provides opportunities for them to contribute to real products with more authentic scope than typical computer science assignments. However, the environment of collaborating with external, distributed teams also poses unique challenges and may distance students from the potential for valuable, direct contact and mentorship from software professionals. In addition, while the technology industry continues to grow, smaller communities have a vested interest in growing a culture for collaboration between students and local software developers. We formed a local open source organization to collaborate on a product by combining efforts from students and professionals. This paper describes the localized free and open source software (LFOSS) organization and reports initial findings from software engineering students' involvement.},
  eventtitle = {2015 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  keywords = {Collaboration,Computer science,computer science education,Education,free and open source software (FOSS),Hafnium compounds,humanitarian free and open source software (HFOSS),industry collaboration,Open source software,software engineering,Software engineering,team projects}
}

@online{MachineLearningKidsa,
  title = {Machine {{Learning}} for {{Kids}}},
  url = {https://machinelearningforkids.co.uk},
  urldate = {2022-04-20},
  abstract = {An educational tool for teaching kids about machine learning, by letting them train a computer to recognise text, pictures, numbers, or sounds, and make things with it in Scratch.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/ZRTZKHNA/machinelearningforkids.co.uk.html}
}

@inproceedings{MaintainingMentalModelsStudyDeveloperLaToza2006,
  title = {Maintaining Mental Models: A Study of Developer Work Habits},
  shorttitle = {Maintaining Mental Models},
  booktitle = {Proceedings of the 28th International Conference on {{Software}} Engineering},
  author = {LaToza, Thomas D. and Venolia, Gina and DeLine, Robert},
  date = {2006-05-28},
  series = {{{ICSE}} '06},
  pages = {492--501},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1134285.1134355},
  url = {https://doi.org/10.1145/1134285.1134355},
  urldate = {2021-10-21},
  abstract = {To understand developers' typical tools, activities, and practices and their satisfaction with each, we conducted two surveys and eleven interviews. We found that many problems arose because developers were forced to invest great effort recovering implicit knowledge by exploring code and interrupting teammates and this knowledge was only saved in their memory. Contrary to expectations that email and IM prevent expensive task switches caused by face-to-face interruptions, we found that face-to-face communication enjoys many advantages. Contrary to expectations that documentation makes understanding design rationale easy, we found that current design documents are inadequate. Contrary to expectations that code duplication involves the copy and paste of code snippets, developers reported several types of duplication. We use data to characterize these and other problems and draw implications for the design of tools for their solution.},
  isbn = {978-1-59593-375-1},
  keywords = {agile software development,code duplication,code ownership,communication,debugging,interruptions}
}

@misc{MasterFineArtsSoftwareGabriel,
  title = {Master of {{Fine Arts}} in {{Software}}},
  author = {Gabriel, Richard P.},
  journaltitle = {Dreamsongs.com},
  url = {https://dreamsongs.com/MFASoftware.html},
  urldate = {2021-10-21}
}

@online{MasterFineArtsSoftwareGabriela,
  title = {Master of {{Fine Arts}} in {{Software}}},
  author = {Gabriel, Richard P.},
  url = {https://dreamsongs.com/MFASoftware.html},
  urldate = {2021-10-21},
  organization = {{Dreamsongs.com}}
}

@misc{MasterSoftwareEngineeringMSE2019,
  title = {Master of {{Software Engineering}} ({{MSE}})},
  date = {2019},
  journaltitle = {https://mswe.ics.uci.edu/},
  url = {https://mswe.ics.uci.edu/},
  urldate = {2021-10-21}
}

@online{MasterSoftwareEngineeringMSE2019a,
  title = {Master of {{Software Engineering}} ({{MSE}})},
  date = {2019},
  url = {https://mswe.ics.uci.edu/},
  urldate = {2021-10-21},
  organization = {{https://mswe.ics.uci.edu/}}
}

@inproceedings{MeasuringNeuralEfficiencyProgramComprehensionSiegmund2017,
  title = {Measuring Neural Efficiency of Program Comprehension},
  booktitle = {Proceedings of the 2017 11th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Siegmund, Janet and Peitek, Norman and Parnin, Chris and Apel, Sven and Hofmeister, Johannes and Kästner, Christian and Begel, Andrew and Bethmann, Anja and Brechmann, André},
  date = {2017-08-21},
  series = {{{ESEC}}/{{FSE}} 2017},
  pages = {140--150},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3106237.3106268},
  url = {https://doi.org/10.1145/3106237.3106268},
  urldate = {2021-10-21},
  abstract = {Most modern software programs cannot be understood in their entirety by a single programmer. Instead, programmers must rely on a set of cognitive processes that aid in seeking, filtering, and shaping relevant information for a given programming task. Several theories have been proposed to explain these processes, such as ``beacons,' for locating relevant code, and ``plans,'' for encoding cognitive models. However, these theories are decades old and lack validation with modern cognitive-neuroscience methods. In this paper, we report on a study using functional magnetic resonance imaging (fMRI) with 11 participants who performed program comprehension tasks. We manipulated experimental conditions related to beacons and layout to isolate specific cognitive processes related to bottom-up comprehension and comprehension based on semantic cues. We found evidence of semantic chunking during bottom-up comprehension and lower activation of brain areas during comprehension based on semantic cues, confirming that beacons ease comprehension.},
  isbn = {978-1-4503-5105-8},
  keywords = {functional magnetic resonance imaging,neural efficiency,program comprehension}
}

@article{MeetDALLEThatDrawsAnythingMetz2022,
  title = {Meet {{DALL-E}}, the {{A}}.{{I}}. {{That Draws Anything}} at {{Your Command}}},
  author = {Metz, Cade},
  date = {2022-04-06},
  journaltitle = {The New York Times},
  issn = {0362-4331},
  url = {https://www.nytimes.com/2022/04/06/technology/openai-images-dall-e.html},
  urldate = {2022-05-12},
  abstract = {New technology that blends language and images could serve graphic artists — and speed disinformation campaigns.},
  entrysubtype = {newspaper},
  journalsubtitle = {Technology},
  langid = {american},
  keywords = {AISpecialReport2022,Allen Institute for Artificial Intelligence,Artificial Intelligence,Computers and the Internet,OpenAI Labs,Research,Rumors and Misinformation},
  file = {/Users/brookeryan/Zotero/storage/ZW3H4APV/openai-images-dall-e.html}
}

@online{MGHGuidesZoteroCompleteGuideBell,
  title = {{{MGH Guides}}: {{Zotero Complete Guide}}: {{Organizing Your Library}}},
  shorttitle = {{{MGH Guides}}},
  author = {Bell, Jessica},
  url = {https://libguides.massgeneral.org/zotero/organizing-library},
  urldate = {2022-05-11},
  abstract = {The MGH IHP's complete guide to using and getting the most out of Zotero},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/GPN3D8NJ/organizing-library.html}
}

@article{MICROWORLDSTRANSFORMINGEDUCATIONPapert,
  title = {{{MICRO WORLDS}}: {{TRANSFORMING EDUCA TION}}},
  author = {Papert, Seymour},
  pages = {16},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/3A3N9XEW/Papert - MICRO WORLDS TRANSFORMING EDUCA TION.pdf}
}

@online{MmantsetsaMarope,
  title = {Mmantsetsa {{Marope}}},
  url = {https://gsolen.ucsd.edu/team/mmantsetsa-marope/},
  urldate = {2022-05-11},
  abstract = {Professor Mmantsetsa Marope is the Executive Director of The World Heritage Group, and the Honorary President of the Indian Ocean Comparative and International Education Societies. She holds a Ph.D. in Education from the University of Chicago, an MEd from Pennsylvania State University, a BA, and a CDE from the University of Botswana and Swaziland. Her […]},
  langid = {american},
  organization = {{Global Science of Learning Education Network}},
  file = {/Users/brookeryan/Zotero/storage/V4MBDIJV/mmantsetsa-marope.html}
}

@article{MultimodalNeuronsArtificialNeuralNetworksGoh2021,
  title = {Multimodal {{Neurons}} in {{Artificial Neural Networks}}},
  author = {Goh, Gabriel and †, Nick Cammarata and †, Chelsea Voss and Carter, Shan and Petrov, Michael and Schubert, Ludwig and Radford, Alec and Olah, Chris},
  date = {2021-03-04},
  journaltitle = {Distill},
  shortjournal = {Distill},
  volume = {6},
  number = {3},
  pages = {e30},
  issn = {2476-0757},
  doi = {10.23915/distill.00030},
  url = {https://distill.pub/2021/multimodal-neurons},
  urldate = {2022-05-31},
  abstract = {We report the existence of multimodal neurons in artificial neural networks, similar to those found in the human brain.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/X635XEPB/multimodal-neurons.html}
}

@unpublished{NeuralDiscreteRepresentationLearningOord2018,
  title = {Neural {{Discrete Representation Learning}}},
  author = {van den Oord, Aaron and Vinyals, Oriol and Kavukcuoglu, Koray},
  date = {2018-05-30},
  number = {arXiv:1711.00937},
  eprint = {1711.00937},
  eprinttype = {arxiv},
  primaryclass = {cs},
  publisher = {{arXiv}},
  url = {http://arxiv.org/abs/1711.00937},
  urldate = {2022-05-31},
  abstract = {Learning useful representations without supervision remains a key challenge in machine learning. In this paper, we propose a simple yet powerful generative model that learns such discrete representations. Our model, the Vector Quantised-Variational AutoEncoder (VQ-VAE), differs from VAEs in two key ways: the encoder network outputs discrete, rather than continuous, codes; and the prior is learnt rather than static. In order to learn a discrete latent representation, we incorporate ideas from vector quantisation (VQ). Using the VQ method allows the model to circumvent issues of "posterior collapse" -- where the latents are ignored when they are paired with a powerful autoregressive decoder -- typically observed in the VAE framework. Pairing these representations with an autoregressive prior, the model can generate high quality images, videos, and speech as well as doing high quality speaker conversion and unsupervised learning of phonemes, providing further evidence of the utility of the learnt representations.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Machine Learning},
  file = {/Users/brookeryan/Zotero/storage/CRMACJXJ/Oord et al. - 2018 - Neural Discrete Representation Learning.pdf;/Users/brookeryan/Zotero/storage/DKQJ7FLC/1711.html}
}

@article{NeuralMarkerPerceptualConsciousnessInfantsKouider2013,
  title = {A Neural Marker of Perceptual Consciousness in Infants},
  author = {Kouider, Sid and Stahlhut, Carsten and Gelskov, Sofie V. and Barbosa, Leonardo S. and Dutat, Michel and de Gardelle, Vincent and Christophe, Anne and Dehaene, Stanislas and Dehaene-Lambertz, Ghislaine},
  options = {useprefix=true},
  date = {2013-04-19},
  journaltitle = {Science (New York, N.Y.)},
  shortjournal = {Science},
  volume = {340},
  number = {6130},
  eprint = {23599498},
  eprinttype = {pmid},
  pages = {376--380},
  issn = {1095-9203},
  doi = {10.1126/science.1232509},
  abstract = {Infants have a sophisticated behavioral and cognitive repertoire suggestive of a capacity for conscious reflection. Yet, demonstrating conscious access in infants remains challenging, mainly because they cannot report their thoughts. Here, to circumvent this problem, we studied whether an electrophysiological signature of consciousness found in adults, corresponding to a late nonlinear cortical response [\textasciitilde 300 milliseconds (ms)] to brief pictures, already exists in infants. We recorded event-related potentials while 5-, 12-, and 15-month-old infants (N = 80) viewed masked faces at various levels of visibility. In all age groups, we found a late slow wave showing a nonlinear profile at the expected perceptual thresholds. However, this late component shifted from a weak and delayed response in 5-month-olds (starting around 900 ms) to a more sustained and faster response in older infants (around 750 ms). These results reveal that the brain mechanisms underlying the threshold for conscious perception are already present in infancy but undergo a slow acceleration during development.},
  langid = {english},
  keywords = {Adult,Brain,Consciousness,Electroencephalography,Evoked Potentials,Female,Humans,Infant,Male,Neurons,Perception,Perceptual Masking,Photic Stimulation},
  file = {/Users/brookeryan/Zotero/storage/ITRXXEHQ/Kouider et al. - 2013 - A neural marker of perceptual consciousness in inf.pdf}
}

@article{NewcomersBarriersThatAllAnalysisBalali2018,
  title = {Newcomers’ {{Barriers}}. . . {{Is That All}}? {{An Analysis}} of {{Mentors}}’ and {{Newcomers}}’ {{Barriers}} in {{OSS Projects}}},
  shorttitle = {Newcomers’ {{Barriers}}. . . {{Is That All}}?},
  author = {Balali, Sogol and Steinmacher, Igor and Annamalai, Umayal and Sarma, Anita and Gerosa, Marco Aurelio},
  date = {2018-12},
  journaltitle = {Computer Supported Cooperative Work (CSCW)},
  volume = {27},
  number = {3},
  pages = {679--714},
  issn = {1573-7551},
  doi = {10.1007/s10606-018-9310-8},
  url = {https://doi.org/10.1007/s10606-018-9310-8},
  urldate = {2021-10-22},
  abstract = {Newcomers’ seamless onboarding is important for open collaboration communities, particularly those that leverage outsiders’ contributions to remain sustainable. Nevertheless, previous work shows that OSS newcomers often face several barriers to contribute, which lead them to lose motivation and even give up on contributing. A well-known way to help newcomers overcome initial contribution barriers is mentoring. This strategy has proven effective in offline and online communities, and to some extent has been employed in OSS projects. Studying mentors’ perspectives on the barriers that newcomers face play a vital role in improving onboarding processes; yet, OSS mentors face their own barriers, which hinder the effectiveness of the strategy. Since little is known about the barriers mentors face, in this paper, we investigate the barriers that affect mentors and their newcomer mentees. We interviewed mentors from OSS projects and qualitatively analyzed their answers. We found 44 barriers: 19 that affect mentors; and 34 that affect newcomers (9 affect both newcomers and mentors). Interestingly, most of the barriers we identified (66\%) have a social nature. Additionally, we identified 10 strategies that mentors indicated to potentially alleviate some of the barriers. Since gender-related challenges emerged in our analysis, we conducted nine follow-up structured interviews to further explore this perspective. The contributions of this paper include: identifying the barriers mentors face; bringing the unique perspective of mentors on barriers faced by newcomers; unveiling strategies that can be used by mentors to support newcomers; and investigating gender-specific challenges in OSS mentorship. Mentors, newcomers, online communities, and educators can leverage this knowledge to foster new contributors to OSS projects.},
  langid = {english}
}

@article{NewcomersBarriersThatAllAnalysisBalali2018a,
  title = {Newcomers’ {{Barriers}}. . . {{Is That All}}? {{An Analysis}} of {{Mentors}}’ and {{Newcomers}}’ {{Barriers}} in {{OSS Projects}}},
  shorttitle = {Newcomers’ {{Barriers}}. . . {{Is That All}}?},
  author = {Balali, Sogol and Steinmacher, Igor and Annamalai, Umayal and Sarma, Anita and Gerosa, Marco Aurelio},
  date = {2018-12-01},
  journaltitle = {Computer Supported Cooperative Work (CSCW)},
  shortjournal = {Comput Supported Coop Work},
  volume = {27},
  number = {3},
  pages = {679--714},
  issn = {1573-7551},
  doi = {10.1007/s10606-018-9310-8},
  url = {https://doi.org/10.1007/s10606-018-9310-8},
  urldate = {2021-10-22},
  abstract = {Newcomers’ seamless onboarding is important for open collaboration communities, particularly those that leverage outsiders’ contributions to remain sustainable. Nevertheless, previous work shows that OSS newcomers often face several barriers to contribute, which lead them to lose motivation and even give up on contributing. A well-known way to help newcomers overcome initial contribution barriers is mentoring. This strategy has proven effective in offline and online communities, and to some extent has been employed in OSS projects. Studying mentors’ perspectives on the barriers that newcomers face play a vital role in improving onboarding processes; yet, OSS mentors face their own barriers, which hinder the effectiveness of the strategy. Since little is known about the barriers mentors face, in this paper, we investigate the barriers that affect mentors and their newcomer mentees. We interviewed mentors from OSS projects and qualitatively analyzed their answers. We found 44 barriers: 19 that affect mentors; and 34 that affect newcomers (9 affect both newcomers and mentors). Interestingly, most of the barriers we identified (66\%) have a social nature. Additionally, we identified 10 strategies that mentors indicated to potentially alleviate some of the barriers. Since gender-related challenges emerged in our analysis, we conducted nine follow-up structured interviews to further explore this perspective. The contributions of this paper include: identifying the barriers mentors face; bringing the unique perspective of mentors on barriers faced by newcomers; unveiling strategies that can be used by mentors to support newcomers; and investigating gender-specific challenges in OSS mentorship. Mentors, newcomers, online communities, and educators can leverage this knowledge to foster new contributors to OSS projects.},
  langid = {english}
}

@online{NightCafeb,
  title = {{{NightCafe}}},
  url = {https://creator.nightcafe.studio/},
  urldate = {2022-05-04},
  abstract = {AI Art Generator App. \&\#9989; Fast \&\#9989; Free \&\#9989; Easy. Create amazing artworks using artificial intelligence.},
  langid = {english},
  organization = {{NightCafe Creator}},
  file = {/Users/brookeryan/Zotero/storage/I455QQWH/  AI Art Generator, AI Art Maker.html}
}

@inproceedings{NoviceSoftwareDevelopersAllAgainBegel2008,
  title = {Novice Software Developers, All over Again},
  booktitle = {Proceedings of the {{Fourth}} International {{Workshop}} on {{Computing Education Research}}},
  author = {Begel, Andrew and Simon, Beth},
  date = {2008-09},
  series = {{{ICER}} '08},
  pages = {3--14},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1404520.1404522},
  url = {https://doi.org/10.1145/1404520.1404522},
  urldate = {2021-10-21},
  abstract = {Transitions from novice to expert often cause stress and anxiety and require specialized instruction and support to enact efficiently. While many studies have looked at novice computer science students, very little research has been conducted on professional novices. We conducted a two-month in-situ qualitative case study of new software developers in their first six months working at Microsoft. We shadowed them in all aspects of their jobs: coding, debugging, designing, and engaging with their team, and analyzed the types of tasks in which they engage. We can explain many of the behaviors revealed by our analyses if viewed through the lens of newcomer socialization from the field of organizational man-agement. This new perspective also enables us to better understand how current computer science pedagogy prepares students for jobs in the software industry. We consider the implications of this data and analysis for developing new processes for learning in both university and industrial settings to help accelerate the transition from novice to expert software developer.},
  isbn = {978-1-60558-216-0},
  keywords = {computer science pedagogy,human aspects of software engineering,software development,training}
}

@inproceedings{NoviceSoftwareDevelopersAllAgainBegel2008a,
  title = {Novice Software Developers, All over Again},
  booktitle = {Proceedings of the {{Fourth}} International {{Workshop}} on {{Computing Education Research}}},
  author = {Begel, Andrew and Simon, Beth},
  date = {2008-09-06},
  series = {{{ICER}} '08},
  pages = {3--14},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1404520.1404522},
  url = {https://doi.org/10.1145/1404520.1404522},
  urldate = {2021-10-21},
  abstract = {Transitions from novice to expert often cause stress and anxiety and require specialized instruction and support to enact efficiently. While many studies have looked at novice computer science students, very little research has been conducted on professional novices. We conducted a two-month in-situ qualitative case study of new software developers in their first six months working at Microsoft. We shadowed them in all aspects of their jobs: coding, debugging, designing, and engaging with their team, and analyzed the types of tasks in which they engage. We can explain many of the behaviors revealed by our analyses if viewed through the lens of newcomer socialization from the field of organizational man-agement. This new perspective also enables us to better understand how current computer science pedagogy prepares students for jobs in the software industry. We consider the implications of this data and analysis for developing new processes for learning in both university and industrial settings to help accelerate the transition from novice to expert software developer.},
  isbn = {978-1-60558-216-0},
  keywords = {computer science pedagogy,human aspects of software engineering,software development,training}
}

@inproceedings{OnboardingProgramsWorkLabuschagne2015,
  title = {Do Onboarding Programs Work?},
  booktitle = {2015 {{IEEE}}/{{ACM}} 12th {{Working Conference}} on {{Mining Software Repositories}}},
  author = {Labuschagne, Adriaan and Holmes, Reid},
  date = {2015},
  pages = {381--385},
  publisher = {{IEEE}}
}

@inproceedings{OpenRepositoryTeachingSoftwareModelingSilva2020,
  title = {Towards an {{Open Repository}} for {{Teaching Software Modeling}} Applying {{Active Learning Strategies}}},
  booktitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  author = {Silva, Williamson and Gadelha, Bruno and Steinmacher, Igor and Conte, Tayana},
  date = {2020-10},
  pages = {162--172},
  abstract = {Modeling is a core topic in Software Engineering Education. Nevertheless, students face difficulties while learning software modeling. To teach software modeling effectively in computing courses, instructors who usually employed traditional methods could use active learning strategies. However, instructors are reluctant to change their teaching approaches due to several barriers that hinder the application of active learning strategies. Besides, relatively little research addresses how to mitigate them. The objective of this research is to help instructors implementing active learning strategies when teaching software modeling with UML diagrams. To achieve this objective, we conducted a Design Science Research (DSR). We proposed an artifact called OpenSMALS, an Open Repository for teaching Software Modeling applying Active Learning Strategies. OpenSMALS provides specific guidelines on how instructors can apply these strategies and helping instructors to identify the active learning strategies best suit their teaching context. We performed four DSR Design Cycles-in four different universities-to evaluate and evolve OpenSMALS. Our results show that OpenSMALS satisfactorily reduced the barriers faced by instructors, and it achieved an appropriate maturity level to be adopted by other instructors.},
  eventtitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  keywords = {Active Learning Strategies,Computational modeling,Education,Faces,Knowledge based systems,Modeling Education,Software,Software engineering,Software Engineering Education,UML,Unified modeling language}
}

@inproceedings{PABLOHelpingNovicesDebugPythonCosman2020,
  title = {{{PABLO}}: {{Helping Novices Debug Python Code Through Data-Driven Fault Localization}}},
  shorttitle = {{{PABLO}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Cosman, Benjamin and Endres, Madeline and Sakkas, Georgios and Medvinsky, Leon and Yang, Yao-Yuan and Jhala, Ranjit and Chaudhuri, Kamalika and Weimer, Westley},
  date = {2020-02-26},
  series = {{{SIGCSE}} '20},
  pages = {1047--1053},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3328778.3366860},
  url = {https://doi.org/10.1145/3328778.3366860},
  urldate = {2021-09-27},
  abstract = {As dynamically-typed languages grow in popularity, especially among beginning programmers, there is an increased need to pinpoint their defects. Localization for novice bugs can be ambiguous: not all locations formally implicated are equally useful for beginners. We propose a scalable fault localization approach for dynamic languages that is helpful for debugging and generalizes to handle a wide variety of errors commonly faced by novice programmers. We base our approach on a combination of static, dynamic, and contextual features, guided by machine learning. We evaluate on over 980,000 diverse real user interactions across four years from the popular PythonTutor.com website, which is used both in classes and by non-traditional learners. We find that our approach is scalable, general, and quite accurate: up to 77\% of these historical novice users would have been helped by our top-three responses, compared to 45\% for the default interpreter. We also conducted a human study: participants preferred our approach to the baseline (\$p = 0.018)\$, and found it additionally useful for bugs meriting multiple edits.},
  isbn = {978-1-4503-6793-6},
  keywords = {debugging,fault localization,machine learning}
}

@report{PacmanWilmer2010,
  title = {Pacman},
  author = {Wilmer, D. W. H. and De Ridder, G. R. and Kol, A. A. and Harkes, D. C.},
  date = {2010},
  url = {https://repository.tudelft.nl/islandora/object/uuid%3A8bc685df-fcf4-4ed8-8ef3-a11e75f82c76},
  urldate = {2021-10-21},
  abstract = {This bachelor report describes the creation of a fun and informative robot game for the Science Centre Delft. The project entails simulating the classic Pacman computer game using real robots. One robot, Pacman, is controlled by a player and has to fulfil certain assignments. Simultaneously the other robots, monsters, try to catch Pacman. A camera captures the movements of all the robots and with the help of image processing the camera input is used to run a control program. The same image is also used to display information on monitors. This gives the player and other visitors an insight in the inner workings of the game.},
  langid = {english}
}

@article{PerformanceoptimizedHierarchicalModelsPredictNeuralYamins2014,
  title = {Performance-Optimized Hierarchical Models Predict Neural Responses in Higher Visual Cortex},
  author = {Yamins, D. L. K. and Hong, H. and Cadieu, C. F. and Solomon, E. A. and Seibert, D. and DiCarlo, J. J.},
  date = {2014-06-10},
  journaltitle = {Proceedings of the National Academy of Sciences},
  shortjournal = {Proceedings of the National Academy of Sciences},
  volume = {111},
  number = {23},
  pages = {8619--8624},
  issn = {0027-8424, 1091-6490},
  doi = {10.1073/pnas.1403112111},
  url = {http://www.pnas.org/cgi/doi/10.1073/pnas.1403112111},
  urldate = {2021-10-03},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/EQDS7E9V/Yamins et al. - 2014 - Performance-optimized hierarchical models predict .pdf}
}

@inproceedings{PhysicalProgrammingDesigningToolsChildrenMontemayor2002,
  title = {Physical Programming: {{Designing}} Tools for Children to Create Physical Interactive Environments},
  shorttitle = {Physical Programming},
  author = {Montemayor, Jaime and Druin, Allison and Farber, Allison and Simms, Sante and Churaman, Wayne and D'Amour, Allison},
  date = {2002-01-01},
  volume = {4},
  pages = {299--306},
  doi = {10.1145/503376.503430},
  abstract = {Physical interactive environments can come in many forms: museum installations, amusement parks, experimental theaters, and more. Programming these environments has historically been done by adults, and children, as the visiting participants, have been offered few pre-created choices to explore. Given these creative limitations, the goal of our research has been to develop programming tools for physical interactive environments that are appropriate for use by young children (ages 4-6). We have explored numerous design approaches over the past two years. Recently we began focusing on a "physical programming" approach and developed a wizard-of-oz prototype for young children. This paper presents the motivation for this research, the evolution of our programming approach, and our recent explorations with children},
  file = {/Users/brookeryan/Zotero/storage/TCMHW3CH/Montemayor et al. - 2002 - Physical programming Designing tools for children.pdf}
}

@unpublished{PhysionEvaluatingPhysicalPredictionVisionBear2021,
  title = {Physion: {{Evaluating Physical Prediction}} from {{Vision}} in {{Humans}} and {{Machines}}},
  shorttitle = {Physion},
  author = {Bear, Daniel M. and Wang, Elias and Mrowca, Damian and Binder, Felix J. and Tung, Hsiau-Yu Fish and Pramod, R. T. and Holdaway, Cameron and Tao, Sirui and Smith, Kevin and Sun, Fan-Yun and Fei-Fei, Li and Kanwisher, Nancy and Tenenbaum, Joshua B. and Yamins, Daniel L. K. and Fan, Judith E.},
  date = {2021-06-17},
  eprint = {2106.08261},
  eprinttype = {arxiv},
  primaryclass = {cs},
  url = {http://arxiv.org/abs/2106.08261},
  urldate = {2021-10-22},
  abstract = {While machine learning algorithms excel at many challenging visual tasks, it is unclear that they can make predictions about commonplace real world physical events. Here, we present a visual and physical prediction benchmark that precisely measures this capability. In realistically simulating a wide variety of physical phenomena -- rigid and soft-body collisions, stable multi-object configurations, rolling and sliding, projectile motion -- our dataset presents a more comprehensive challenge than existing benchmarks. Moreover, we have collected human responses for our stimuli so that model predictions can be directly compared to human judgments. We compare an array of algorithms -- varying in their architecture, learning objective, input-output structure, and training data -- on their ability to make diverse physical predictions. We find that graph neural networks with access to the physical state best capture human behavior, whereas among models that receive only visual input, those with object-centric representations or pretraining do best but fall far short of human accuracy. This suggests that extracting physically meaningful representations of scenes is the main bottleneck to achieving human-like visual prediction. We thus demonstrate how our benchmark can identify areas for improvement and measure progress on this key aspect of physical understanding.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Artificial Intelligence,Computer Science - Computer Vision and Pattern Recognition,I.2.10,I.4.8,I.5},
  file = {/Users/brookeryan/Zotero/storage/79A9KGWG/Bear et al. - 2021 - Physion Evaluating Physical Prediction from Visio.pdf;/Users/brookeryan/Zotero/storage/JQ262EXM/2106.html}
}

@inproceedings{ProductionProgrammingClassroomAllen2003,
  title = {Production Programming in the Classroom},
  booktitle = {Proceedings of the 34th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Allen, Eric and Cartwright, Robert and Reis, Charles},
  date = {2003-01},
  series = {{{SIGCSE}} '03},
  pages = {89--93},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/611892.611940},
  url = {https://doi.org/10.1145/611892.611940},
  urldate = {2021-10-22},
  abstract = {Students in programming courses generally write "toy" programs that are superficially tested, graded, and then discarded. This approach to teaching programming leaves students unprepared for production programming because the gap between writing toy programs and developing reliable software products is enormous.This paper describes how production programming can be effectively taught to undergraduate students in the classroom. The key to teaching such a course is using Extreme Programming methodology to develop a sustainable open source project with real customers, including the students themselves. Extreme Programming and open source project management are facilitated by a growing collection of free tools such as the JUnit testing framework, the Ant scripting tool, and the SourceForge website for managing open source projects.},
  isbn = {978-1-58113-648-7},
  keywords = {ant,DrJava,extreme programming,JUnit,open source,production programming,software engineering,sourceforge}
}

@inproceedings{ProductionProgrammingClassroomAllen2003a,
  title = {Production Programming in the Classroom},
  booktitle = {Proceedings of the 34th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Allen, Eric and Cartwright, Robert and Reis, Charles},
  date = {2003-01-11},
  series = {{{SIGCSE}} '03},
  pages = {89--93},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/611892.611940},
  url = {https://doi.org/10.1145/611892.611940},
  urldate = {2021-10-22},
  abstract = {Students in programming courses generally write "toy" programs that are superficially tested, graded, and then discarded. This approach to teaching programming leaves students unprepared for production programming because the gap between writing toy programs and developing reliable software products is enormous.This paper describes how production programming can be effectively taught to undergraduate students in the classroom. The key to teaching such a course is using Extreme Programming methodology to develop a sustainable open source project with real customers, including the students themselves. Extreme Programming and open source project management are facilitated by a growing collection of free tools such as the JUnit testing framework, the Ant scripting tool, and the SourceForge website for managing open source projects.},
  isbn = {978-1-58113-648-7},
  keywords = {ant,DrJava,extreme programming,JUnit,open source,production programming,software engineering,sourceforge}
}

@online{ProductivityToolsUseEndorseFelix,
  title = {Productivity Tools {{I}} Use \& Endorse · {{Felix Binder}}},
  url = {https://ac.felixbinder.net/writings/2020/07/01/the-stack.html},
  urldate = {2022-05-18},
  file = {/Users/brookeryan/Zotero/storage/73DVAP4Z/the-stack.html}
}

@inproceedings{ProgramComprehensionPresentFutureSiegmund2016,
  title = {Program {{Comprehension}}: {{Past}}, {{Present}}, and {{Future}}},
  shorttitle = {Program {{Comprehension}}},
  booktitle = {2016 {{IEEE}} 23rd {{International Conference}} on {{Software Analysis}}, {{Evolution}}, and {{Reengineering}} ({{SANER}})},
  author = {Siegmund, Janet},
  date = {2016-03},
  volume = {5},
  pages = {13--20},
  doi = {10.1109/SANER.2016.35},
  abstract = {Program comprehension is the main activity of the software developers. Although there has been substantial research to support the programmer, the high amount of time developers need to understand source code remained constant over thirty years. Beside more complex software, what might be the reason? In this paper, I explore the past of program-comprehension research, discuss the current state, and outline what future research on program comprehension might bring.},
  keywords = {Atmospheric measurements,Computer languages,empirical software engineering,Particle measurements,Program comprehension,Programming,Protocols,Software,Time factors}
}

@inproceedings{ProgramComprehensionPresentFutureSiegmund2016a,
  title = {Program {{Comprehension}}: {{Past}}, {{Present}}, and {{Future}}},
  shorttitle = {Program {{Comprehension}}},
  booktitle = {2016 {{IEEE}} 23rd {{International Conference}} on {{Software Analysis}}, {{Evolution}}, and {{Reengineering}} ({{SANER}})},
  author = {Siegmund, Janet},
  date = {2016-03},
  volume = {5},
  pages = {13--20},
  doi = {10.1109/SANER.2016.35},
  abstract = {Program comprehension is the main activity of the software developers. Although there has been substantial research to support the programmer, the high amount of time developers need to understand source code remained constant over thirty years. Beside more complex software, what might be the reason? In this paper, I explore the past of program-comprehension research, discuss the current state, and outline what future research on program comprehension might bring.},
  eventtitle = {2016 {{IEEE}} 23rd {{International Conference}} on {{Software Analysis}}, {{Evolution}}, and {{Reengineering}} ({{SANER}})},
  keywords = {Atmospheric measurements,Computer languages,empirical software engineering,Particle measurements,Program comprehension,Programming,Protocols,Software,Time factors}
}

@inproceedings{ProgrammingProblemSolvingSelfAwarenessEffectsLoksa2016,
  title = {Programming, {{Problem Solving}}, and {{Self-Awareness}}: {{Effects}} of {{Explicit Guidance}}},
  shorttitle = {Programming, {{Problem Solving}}, and {{Self-Awareness}}},
  booktitle = {Proceedings of the 2016 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Loksa, Dastyni and Ko, Amy J. and Jernigan, Will and Oleson, Alannah and Mendez, Christopher J. and Burnett, Margaret M.},
  date = {2016-05},
  series = {{{CHI}} '16},
  pages = {1449--1461},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2858036.2858252},
  url = {https://doi.org/10.1145/2858036.2858252},
  urldate = {2021-10-21},
  abstract = {More people are learning to code than ever, but most learning opportunities do not explicitly teach the problem solving skills necessary to succeed at open-ended programming problems. In this paper, we present a new approach to impart these skills, consisting of: 1) explicit instruction on programming problem solving, which frames coding as a process of translating mental representations of problems and solutions into source code, 2) a method of visualizing and monitoring progression through six problem solving stages, 3) explicit, on-demand prompts for learners to reflect on their strategies when seeking help from instructors, and 4) context-sensitive help embedded in a code editor that reinforces the problem solving instruction. We experimentally evaluated the effects of our intervention across two 2-week web development summer camps with 48 high school students, finding that the intervention increased productivity, independence, programming self-efficacy, metacognitive awareness, and growth mindset. We discuss the implications of these results on learning technologies and classroom instruction.},
  isbn = {978-1-4503-3362-7},
  keywords = {computer science education,metacognition,problem-solving,programming}
}

@inproceedings{ProgrammingProblemSolvingSelfAwarenessEffectsLoksa2016a,
  title = {Programming, {{Problem Solving}}, and {{Self-Awareness}}: {{Effects}} of {{Explicit Guidance}}},
  shorttitle = {Programming, {{Problem Solving}}, and {{Self-Awareness}}},
  booktitle = {Proceedings of the 2016 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Loksa, Dastyni and Ko, Amy J. and Jernigan, Will and Oleson, Alannah and Mendez, Christopher J. and Burnett, Margaret M.},
  date = {2016-05-07},
  series = {{{CHI}} '16},
  pages = {1449--1461},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2858036.2858252},
  url = {https://doi.org/10.1145/2858036.2858252},
  urldate = {2021-10-21},
  abstract = {More people are learning to code than ever, but most learning opportunities do not explicitly teach the problem solving skills necessary to succeed at open-ended programming problems. In this paper, we present a new approach to impart these skills, consisting of: 1) explicit instruction on programming problem solving, which frames coding as a process of translating mental representations of problems and solutions into source code, 2) a method of visualizing and monitoring progression through six problem solving stages, 3) explicit, on-demand prompts for learners to reflect on their strategies when seeking help from instructors, and 4) context-sensitive help embedded in a code editor that reinforces the problem solving instruction. We experimentally evaluated the effects of our intervention across two 2-week web development summer camps with 48 high school students, finding that the intervention increased productivity, independence, programming self-efficacy, metacognitive awareness, and growth mindset. We discuss the implications of these results on learning technologies and classroom instruction.},
  isbn = {978-1-4503-3362-7},
  keywords = {computer science education,metacognition,problem-solving,programming}
}

@inproceedings{ProgrammingStorytellingOpportunitiesLearningCodingBurke2010,
  title = {Programming \& Storytelling: Opportunities for Learning about Coding \& Composition},
  shorttitle = {Programming \& Storytelling},
  booktitle = {Proceedings of the 9th {{International Conference}} on {{Interaction Design}} and {{Children}} - {{IDC}} '10},
  author = {Burke, Quinn and Kafai, Yasmin B.},
  date = {2010},
  pages = {348},
  publisher = {{ACM Press}},
  location = {{Barcelona, Spain}},
  doi = {10.1145/1810543.1810611},
  url = {http://portal.acm.org/citation.cfm?doid=1810543.1810611},
  urldate = {2022-04-20},
  abstract = {The focus of this paper is to investigate how writing computer programs can help children develop their storytelling and creative writing abilities. The process of writing a program—coding—has long been considered only in terms of computer science, but such coding is also reflective of the imaginative and narrative elements of fiction writing workshops. Writing to program can also serve as programming to write, in which a child learns the importance of sequence, structure, and clarity of expression—three aspects characteristic of effective coding and good storytelling alike. While there have been efforts examining how learning to write code can be facilitated by storytelling, there has been little exploration as to how such creative coding can also be directed to teach students about the narrative and storytelling process. Using the introductory programming language Scratch, this paper explores the potential of having children create their own digital stories with the software and how the narrative structure of these stories offers kids the opportunity to better understand the process of expanding an idea into the arc of a story.},
  eventtitle = {The 9th {{International Conference}}},
  isbn = {978-1-60558-951-0},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/2TXNDVKW/Burke and Kafai - 2010 - Programming & storytelling opportunities for lear.pdf}
}

@inproceedings{PuttingInformationForagingTheoryWorkNabi2016,
  title = {Putting Information Foraging Theory to Work: {{Community-based}} Design Patterns for Programming Tools},
  shorttitle = {Putting Information Foraging Theory to Work},
  booktitle = {2016 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Nabi, Tahmid and Sweeney, Kyle M. D. and Lichlyter, Sam and Piorkowski, David and Scaffidi, Chris and Burnett, Margaret and Fleming, Scott D.},
  date = {2016-09},
  pages = {129--133},
  issn = {1943-6106},
  doi = {10.1109/VLHCC.2016.7739675},
  abstract = {The design of programming tools is slow and costly. To ease this process, we developed a design pattern catalog aimed at providing guidance for tool designers. This catalog is grounded in Information Foraging Theory (IFT), which empirical studies have shown to be useful for understanding how developers look for information during development tasks. New design patterns, authored by members of the research community for the catalog, concretely explain how to apply IFT in tool design. In our evaluation, qualitative analyses revealed the community-written design patterns compared well in quality to patterns that we had ourselves published in a smaller, peer-reviewed catalog.},
  eventtitle = {2016 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  keywords = {applied theory,Documentation,Encoding,Navigation,Software,software engineering,Software engineering,tool design,Topology,Visualization}
}

@inproceedings{ReadingSourceCodeRaymond1991,
  title = {Reading Source Code},
  booktitle = {Proceedings of the 1991 Conference of the {{Centre}} for {{Advanced Studies}} on {{Collaborative}} Research},
  author = {Raymond, Darrell R.},
  date = {1991-10-28},
  series = {{{CASCON}} '91},
  pages = {3--16},
  publisher = {{IBM Press}},
  location = {{Toronto, Ontario, Canada}},
  abstract = {Source code is, among other things, a text to be read. In this paper I argue that reading source code is a key activity in software maintenance, and that we can profitably apply experiences and reading systems from text databases to the problem of reading source code. Three prototype systems are presented, and the main features of their design are discussed.}
}

@inproceedings{ReadingWriteCodeExperienceReportRyan2022,
  title = {Reading to {{Write Code}}: {{An Experience Report}} of a {{Reverse Engineering}} and {{Modeling Course}}},
  author = {Ryan, Brooke Kelsey and Soria, Adriana Meza and Dreef, Kaj},
  date = {2022},
  pages = {12},
  abstract = {A substantial portion of any software engineer’s job is reading code. Despite the criticality of this skill in a budding software engineer, reading code—and more specifically, techniques on how to read code when integrating oneself into a large existing software project—is often neglected in the typical software engineering education. As part of a new professional Master of Software Engineering at [anonymous institution], we designed and delivered a “reading to write code” course from the ground up. Titled Reverse Engineering and Modeling, the course introduces students to techniques they can use to become familiar with a large code base, so they are able to make meaningful contributions. In this paper, we briefly introduce the Master program and its underlying philosophy, articulate the course’s learning outcomes, present the design of the course, and provide a detailed reflection on our experiences in terms of what went well, what did not go well, what we do not know yet, and what our next steps are in preparing for the forthcoming incarnation of the course in Spring 2022. In so doing, we hope to provide a baseline together with lessons learned for others who may be interested in instituting a similar course at their institution.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/BJXTZIFI/Ryan et al. - 2022 - Reading to Write Code An Experience Report of a R.pdf}
}

@inproceedings{ReadingWriteCodeExperienceReportRyan2022a,
  title = {Reading to {{Write Code}}: {{An Experience Report}} of a {{Reverse Engineering}} and {{Modeling Course}}},
  author = {Ryan, Brooke and Soria, Adriana Meza and Dreef, Kaj},
  date = {2022},
  pages = {12},
  abstract = {A substantial portion of any software engineer’s job is reading code. Despite the criticality of this skill in a budding software engineer, reading code—and more specifically, techniques on how to read code when integrating oneself into a large existing software project—is often neglected in the typical software engineering education. As part of a new professional Master of Software Engineering at the University of California, Irvine, we designed and delivered a “reading to write code” course from the ground up. Titled Reverse Engineering and Modeling, the course introduces students to techniques they can use to become familiar with a large code base, so they are able to make meaningful contributions. In this paper, we briefly introduce the Master program and its underlying philosophy, articulate the course’s learning outcomes, present the design of the course, and provide a detailed reflection on our experiences in terms of what went well, what did not go well, what we do not know yet, and what our next steps are in preparing for the forthcoming incarnation of the course in Spring 2022. In so doing, we hope to provide a baseline together with lessons learned for others who may be interested in instituting a similar course at their institution.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/RRJFSVKA/Ryan et al. - 2022 - Reading to Write Code An Experience Report of a R.pdf}
}

@inproceedings{ReadYouWriteHilburn2011,
  title = {Read before You Write},
  booktitle = {2011 24th {{IEEE-CS Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  author = {Hilburn, Thomas B. and Towhidnejad, Massood and Salamah, Salamah},
  date = {2011-05},
  pages = {371--380},
  doi = {10.1109/CSEET.2011.5876108},
  abstract = {This paper describes and advocates a focused approach to using inspections of software artifacts as an active learning technique in software engineering education. A central thesis is that one must “learn to read before they write” that is, you should read and study an existing software artifact, before you develop one. There is discussion of how software artifacts and supporting instructional materials from a Digital Home case study project can be used to support and guide software inspection exercises. These inspection exercises are designed to introduce students to realistic software engineering artifacts and involve them in rigorous examination of their contents. Instances of the use of software inspections to teach software engineering are described and analyzed: the experiences of students and instructors, what worked and what did not, and how this influenced the cases study project. The authors also outline a set of topics and courses in which software inspections might be used as a teaching tool throughout a computing curriculum.},
  keywords = {DH-HEMTs,Education,Inspection,Programming,Software,Software engineering,Temperature sensors}
}

@inproceedings{ReadYouWriteHilburn2011a,
  title = {Read before You Write},
  booktitle = {2011 24th {{IEEE-CS Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  author = {Hilburn, Thomas B. and Towhidnejad, Massood and Salamah, Salamah},
  date = {2011-05},
  pages = {371--380},
  doi = {10.1109/CSEET.2011.5876108},
  abstract = {This paper describes and advocates a focused approach to using inspections of software artifacts as an active learning technique in software engineering education. A central thesis is that one must “learn to read before they write” that is, you should read and study an existing software artifact, before you develop one. There is discussion of how software artifacts and supporting instructional materials from a Digital Home case study project can be used to support and guide software inspection exercises. These inspection exercises are designed to introduce students to realistic software engineering artifacts and involve them in rigorous examination of their contents. Instances of the use of software inspections to teach software engineering are described and analyzed: the experiences of students and instructors, what worked and what did not, and how this influenced the cases study project. The authors also outline a set of topics and courses in which software inspections might be used as a teaching tool throughout a computing curriculum.},
  keywords = {DH-HEMTs,Education,Inspection,Programming,Software,Software engineering,Temperature sensors}
}

@inproceedings{ReadYouWriteHilburn2011b,
  title = {Read before You Write},
  booktitle = {2011 24th {{IEEE-CS Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  author = {Hilburn, Thomas B. and Towhidnejad, Massood and Salamah, Salamah},
  date = {2011-05},
  pages = {371--380},
  issn = {2377-570X},
  doi = {10.1109/CSEET.2011.5876108},
  abstract = {This paper describes and advocates a focused approach to using inspections of software artifacts as an active learning technique in software engineering education. A central thesis is that one must “learn to read before they write” that is, you should read and study an existing software artifact, before you develop one. There is discussion of how software artifacts and supporting instructional materials from a Digital Home case study project can be used to support and guide software inspection exercises. These inspection exercises are designed to introduce students to realistic software engineering artifacts and involve them in rigorous examination of their contents. Instances of the use of software inspections to teach software engineering are described and analyzed: the experiences of students and instructors, what worked and what did not, and how this influenced the cases study project. The authors also outline a set of topics and courses in which software inspections might be used as a teaching tool throughout a computing curriculum.},
  eventtitle = {2011 24th {{IEEE-CS Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  keywords = {DH-HEMTs,Education,Inspection,Programming,Software,Software engineering,Temperature sensors}
}

@inproceedings{ReadYouWriteHilburn2011c,
  title = {Read before You Write},
  booktitle = {2011 24th {{IEEE-CS Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  author = {Hilburn, Thomas B. and Towhidnejad, Massood and Salamah, Salamah},
  date = {2011-05},
  pages = {371--380},
  issn = {2377-570X},
  doi = {10.1109/CSEET.2011.5876108},
  abstract = {This paper describes and advocates a focused approach to using inspections of software artifacts as an active learning technique in software engineering education. A central thesis is that one must “learn to read before they write” that is, you should read and study an existing software artifact, before you develop one. There is discussion of how software artifacts and supporting instructional materials from a Digital Home case study project can be used to support and guide software inspection exercises. These inspection exercises are designed to introduce students to realistic software engineering artifacts and involve them in rigorous examination of their contents. Instances of the use of software inspections to teach software engineering are described and analyzed: the experiences of students and instructors, what worked and what did not, and how this influenced the cases study project. The authors also outline a set of topics and courses in which software inspections might be used as a teaching tool throughout a computing curriculum.},
  eventtitle = {2011 24th {{IEEE-CS Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  keywords = {DH-HEMTs,Education,Inspection,Programming,Software,Software engineering,Temperature sensors}
}

@online{ReadYouWriteIEEEConference,
  title = {Read before You Write | {{IEEE Conference Publication}} | {{IEEE Xplore}}},
  url = {https://ieeexplore.ieee.org/document/5876108},
  urldate = {2021-10-22}
}

@misc{ReadYouWriteTextbarIEEE,
  title = {Read before You Write \textbackslash textbar {{IEEE Conference Publication}} \textbackslash textbar {{IEEE Xplore}}},
  url = {https://ieeexplore.ieee.org/document/5876108},
  urldate = {2021-10-22}
}

@inproceedings{ReflectionsOnboardingPracticesMidsizedCompaniesViviani2019,
  title = {Reflections on Onboarding Practices in Mid-Sized Companies},
  booktitle = {2019 {{IEEE}}/{{ACM}} 12th {{International Workshop}} on {{Cooperative}} and {{Human Aspects}} of {{Software Engineering}} ({{CHASE}})},
  author = {Viviani, Giovanni and Murphy, Gail C.},
  date = {2019},
  pages = {83--84},
  publisher = {{IEEE}}
}

@inproceedings{RequirementsEngineeringOutClassroomAnticipatingMarques2020,
  title = {Requirements {{Engineering Out}} of the {{Classroom}}: {{Anticipating Challenges Experienced}} in {{Practice}}},
  shorttitle = {Requirements {{Engineering Out}} of the {{Classroom}}},
  booktitle = {2020 {{IEEE}} 32nd {{Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  author = {Marques, Pedro and Silva, Murilo and Gusmão, Camila and Castro, Diego and Schots, Marcelo},
  date = {2020-11},
  pages = {1--9},
  issn = {2377-570X},
  doi = {10.1109/CSEET49119.2020.9206220},
  abstract = {Requirements Engineering (RE) education makes use of different methods to motivate and prepare students to perform well this activity in the practical scenario. Such educational methods, however, are typically based on some simulation, be it in the scope of the scenario, the problem, or the stakeholders. A change in the traditional teaching paradigm becomes necessary, bringing the student to the center of the RE activities. This helps them realize the importance of properly identifying and organizing the demands from the target audience, so that a quality requirements specification document can be produced. This paper describes a method applied during the Requirements Engineering course using a real scenario, in which students sought to identify the diverse stakeholders' needs with respect to the university institute website. Through this work, students achieved effective engagement in practical RE activities, whose results has benefits not only to the university community, but also to the external public interested in institute information. The conduction of this work revealed - and reinforced - some relevant challenges and lessons learned.},
  eventtitle = {2020 {{IEEE}} 32nd {{Conference}} on {{Software Engineering Education}} and {{Training}} ({{CSEE T}})},
  keywords = {Computer science,Education,Interviews,requirements engineering,Requirements engineering,Situated learning,Software engineering,software engineering education,Stakeholders,Task analysis}
}

@inproceedings{ReverseEngineeringEducationToolComputerKlimek2011,
  title = {Reverse Engineering as an Education Tool in Computer Science},
  booktitle = {2011 9th {{International Conference}} on {{Emerging eLearning Technologies}} and {{Applications}} ({{ICETA}})},
  author = {Klimek, Ivan and Keltika, Marián and Jakab, František},
  date = {2011-10},
  pages = {123--126},
  doi = {10.1109/ICETA.2011.6112599},
  abstract = {The concept of Reverse Engineering is used in many fields of IT every day, to name just a few: legacy compatibility, binary code patching, malware analysis, network protocols analysis, debugging or even rapid prototyping. Despite its broad use, reverse engineering is not actively taught as a part of computer science courses. This paper tries to provide a survey of some of the real life usage scenarios of reverse engineering, analyzes what skills and ways of thinking are developed by reverse engineering and provides examples how reverse engineering could be taught by practical problem solving, introducing creative thinking models and strategies. We focus on the importance of reverse engineering as a tool to ignite the self-motivation of students and systematically build their logical thinking capabilities and analytical skills.},
  eventtitle = {2011 9th {{International Conference}} on {{Emerging eLearning Technologies}} and {{Applications}} ({{ICETA}})},
  keywords = {Educational institutions,Internet,Protocols,Reverse engineering,Security,Software}
}

@inproceedings{RoleCollaborationCreativityEmbodimentAILong2021,
  title = {The {{Role}} of {{Collaboration}}, {{Creativity}}, and {{Embodiment}} in {{AI Learning Experiences}}},
  booktitle = {Creativity and {{Cognition}}},
  author = {Long, Duri and Padiyath, Aadarsh and Teachey, Anthony and Magerko, Brian},
  date = {2021-06-22},
  series = {C\&amp;{{C}} '21},
  pages = {1--10},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3450741.3465264},
  url = {https://doi.org/10.1145/3450741.3465264},
  urldate = {2022-04-20},
  abstract = {Fostering public AI literacy (i.e. a high-level understanding of artificial intelligence (AI) that allows individuals to critically and effectively use AI technologies) is increasingly important as AI is integrated into individuals’ everyday lives and as concerns about AI grow. This paper investigates how to design collaborative, creative, and embodied interactions that foster AI learning and interest development. We designed three prototypes of collaborative, creative, and/or embodied learning experiences that aim to communicate AI literacy competencies. We present the design of these prototypes as well as the results from a user study that we conducted with 14 family groups (38 participants). Our data analysis explores how collaboration, creativity, and embodiment contributed to AI learning and interest development across the three prototypes. The main contributions of this paper are: 1) three designs of AI literacy learning activities and 2) insights into the role creativity, collaboration, and embodiment play in AI learning experiences.},
  isbn = {978-1-4503-8376-9},
  keywords = {AI education,AI literacy,co-creative,collaboration,creativity,embodiment,family learning,informal learning},
  file = {/Users/brookeryan/Zotero/storage/GV9A38C8/Long et al. - 2021 - The Role of Collaboration, Creativity, and Embodim.pdf}
}

@inproceedings{ScratchMicroworldsDesigningProjectBasedIntroductionsTsur2018,
  title = {Scratch {{Microworlds}}: {{Designing Project-Based Introductions}} to {{Coding}}},
  shorttitle = {Scratch {{Microworlds}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Tsur, Moran and Rusk, Natalie},
  date = {2018-02-21},
  pages = {894--899},
  publisher = {{ACM}},
  location = {{Baltimore Maryland USA}},
  doi = {10.1145/3159450.3159559},
  url = {https://dl.acm.org/doi/10.1145/3159450.3159559},
  urldate = {2022-04-20},
  abstract = {In this paper, we present our experience developing introductory coding environments called Scratch Microworlds. These interactive environments enable learners to get started with coding by creating projects, rather than solving puzzles. The primary educational goal of these microworlds is to engage learners (ages 8 to 14) who otherwise may not be drawn to coding. The microworlds are simplified versions of the Scratch coding environment that contain a small set of blocks and are designed to encourage exploration and experimentation. They are also interest-based, so learners can choose to work on a topic that is motivating to them (such as dance, music, or soccer). We present three main design principles and related challenges that we addressed through the iterative process of developing Scratch Microworlds: (1) how to simplify initial experiences while still supporting creativity, (2) how to provide scaffolding while maintaining learners’ agency, and (3) how to provide starting points that spark rather than limit the imagination. We share observations and feedback from workshops with children and educators, which informed our iterative design process. We conclude by considering next steps for providing more entry points into coding that support children as creative thinkers.},
  eventtitle = {{{SIGCSE}} '18: {{The}} 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  isbn = {978-1-4503-5103-4},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/MTRY2TDC/Tsur and Rusk - 2018 - Scratch Microworlds Designing Project-Based Intro.pdf}
}

@article{ScratchProgrammingAllResnick2009,
  title = {Scratch: Programming for All},
  shorttitle = {Scratch},
  author = {Resnick, Mitchel and Maloney, John and Monroy-Hernández, Andrés and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay and Silverman, Brian and Kafai, Yasmin},
  date = {2009-11},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {52},
  number = {11},
  pages = {60--67},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/1592761.1592779},
  url = {https://dl.acm.org/doi/10.1145/1592761.1592779},
  urldate = {2022-04-20},
  abstract = {"Digital fluency" should mean designing, creating, and remixing, not just browsing, chatting, and interacting.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/QKVTNNYB/Resnick et al. - 2009 - Scratch programming for all.pdf}
}

@article{SearchBeautyStruggleComplexityChristopherGabriel2019,
  title = {A {{Search}} for {{Beauty}}/{{A Struggle}} with {{Complexity}}: {{Christopher Alexander}}},
  shorttitle = {A {{Search}} for {{Beauty}}/{{A Struggle}} with {{Complexity}}},
  author = {Gabriel, Richard and Quillien, Jenny},
  date = {2019-06-16},
  journaltitle = {Urban Science},
  shortjournal = {Urban Science},
  volume = {3},
  number = {2},
  pages = {64},
  issn = {2413-8851},
  doi = {10.3390/urbansci3020064},
  url = {https://www.mdpi.com/2413-8851/3/2/64},
  urldate = {2021-10-03},
  abstract = {Beauty. Christopher Alexander’s prolific journey in building, writing, and teaching was fueled by a relentless search for Beauty and its meaning. While all around him the world was intent on figuring out how to simplify, Alexander came to embrace complexity as the only path to his goal. The Beauty and life of that which he encountered and appreciated—an Indian village, a city, a subway network, an old Turkish carpet, or a campus—lay in its well-ordered complexity. As a designer and maker he found that simplicity came from choosing—at every step—the simplest way to add the necessary complexity. The failure of so much of our modern world, in Alexander’s eyes, was oversimplification, wantonly bulldozing context, misunderstanding the relationships of part and whole, ignoring the required role of time in the shaping of shapes, and ultimately dismissing, like Esau, our birthright of Value in favor of a lentil pottage of mere Fact. Ever elusive, Beauty demands of her suitors a constant return of attention to see what might be newly revealed, and Alexander duly returned again and again in pursuit of the mystery. In this essay—essentially biographical and descriptive of one man’s endeavors—we examine the full arc of his work from dissertation to most recent memoir. We don’t shy away from his failures, and we don’t simplify his journey. We leave work done by other scholars for another day. We reach no conclusion, rather, we invite readers to reflect on what Alexander’s lifelong effort suggests to them about their own path, their own sense of aesthetics and order, innate cognitive shortfalls, and professional blind alleys.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/LQHGZEEE/Gabriel and Quillien - 2019 - A Search for BeautyA Struggle with Complexity Ch.pdf}
}

@inproceedings{SecureMessagingPlatformBasedBlockchainEllewala2020,
  title = {Secure {{Messaging Platform Based}} on {{Blockchain}}},
  booktitle = {2020 2nd {{International Conference}} on {{Advancements}} in {{Computing}} ({{ICAC}})},
  author = {Ellewala, U. P. and Amarasena, W.D.H.U and Lakmali, H.V Sachini and Senanayaka, L.M.K and Senarathne, A.N.},
  date = {2020-12},
  volume = {1},
  pages = {317--322},
  doi = {10.1109/ICAC51239.2020.9357306},
  abstract = {The boundaries between personal and business communications is a key issue faced by most organizations. Use of unsecured and unsafe applications in workplaces pose enormous security risks. Companies are not adequately aware about the applications that are being used in their employees' devices. When it comes to critical business communication involving exchanging trade secrets, making business referrals and strategic business decisions, protecting of messages and shared files becomes a challenge. Most publicly available communication platforms do not empower organizations to regulate, track and scale their communication and does not provide compliance with data protection frameworks, which can result in cross industry system risks. As a result, both individuals and organizations express deep concern about data security and protection of privacy when using Instant Messaging applications. Non-repudiation in communications not only conveys to the user, recognition of the communication process, but it is also a crucial way to establish a relationship of trust and to overcome trust disputes. Our primary objective, through this research, is to develop a chat application with more secure channels of enterprise level communication. Using new technologies such as blockchain, which operate on a decentralized model, we can surmount the drawbacks of traditional messaging applications, thereby ensuring confidentiality, integrity and availability of official data, along with advanced auditing features.},
  eventtitle = {2020 2nd {{International Conference}} on {{Advancements}} in {{Computing}} ({{ICAC}})},
  keywords = {Authentication,Blockchain,Business communication,Data Loss Prevention,Data protection,Data security,Employment,Encryption,Industries,Instant messaging,Instant Messaging,Smart Contract},
  file = {/Users/brookeryan/Zotero/storage/GJT44H55/Ellewala et al. - 2020 - Secure Messaging Platform Based on Blockchain.pdf;/Users/brookeryan/Zotero/storage/DRSC5LRX/9357306.html}
}

@inproceedings{SelectingOpenSourceSoftwareProjectsSmith2014,
  title = {Selecting Open Source Software Projects to Teach Software Engineering},
  booktitle = {Proceedings of the 45th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Smith, Therese Mary and McCartney, Robert and Gokhale, Swapna S. and Kaczmarczyk, Lisa C.},
  date = {2014-03-05},
  series = {{{SIGCSE}} '14},
  pages = {397--402},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2538862.2538932},
  url = {https://doi.org/10.1145/2538862.2538932},
  urldate = {2021-09-27},
  abstract = {Aspiring software engineers must be able to comprehend and evolve legacy code, which is challenging because the code may be poorly documented, ill structured, and lacking in human support. These challenges of understanding and evolving existing code can be illustrated in academic settings by leveraging the rich and varied volume of Open Source Software (OSS) code. To teach SE with OSS, however, it is necessary to select uniform projects of appropriate size and complexity. This paper reports on our search for suitable OSS projects to teach an introductory SE course with a focus on maintenance and evolution. The search turned out to be quite labor intensive and cumbersome, contrary to our expectations that it would be quick and simple. The chosen projects successfully demonstrated the maintenance challenges, highlighting the promise of using OSS. The burden of selecting projects, however, may impede widespread integration of OSS into SE and other computing courses.},
  isbn = {978-1-4503-2605-6},
  keywords = {maintenance,open source,program comprehension,software engineering}
}

@inproceedings{SelectingOpenSourceSoftwareProjectsSmith2014a,
  title = {Selecting Open Source Software Projects to Teach Software Engineering},
  booktitle = {Proceedings of the 45th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Smith, Therese Mary and McCartney, Robert and Gokhale, Swapna S. and Kaczmarczyk, Lisa C.},
  date = {2014-03-05},
  series = {{{SIGCSE}} '14},
  pages = {397--402},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2538862.2538932},
  url = {https://doi.org/10.1145/2538862.2538932},
  urldate = {2021-09-27},
  abstract = {Aspiring software engineers must be able to comprehend and evolve legacy code, which is challenging because the code may be poorly documented, ill structured, and lacking in human support. These challenges of understanding and evolving existing code can be illustrated in academic settings by leveraging the rich and varied volume of Open Source Software (OSS) code. To teach SE with OSS, however, it is necessary to select uniform projects of appropriate size and complexity. This paper reports on our search for suitable OSS projects to teach an introductory SE course with a focus on maintenance and evolution. The search turned out to be quite labor intensive and cumbersome, contrary to our expectations that it would be quick and simple. The chosen projects successfully demonstrated the maintenance challenges, highlighting the promise of using OSS. The burden of selecting projects, however, may impede widespread integration of OSS into SE and other computing courses.},
  isbn = {978-1-4503-2605-6},
  keywords = {maintenance,open source,program comprehension,software engineering}
}

@misc{SequenceDiagramIntelliJIDEAAndroidStudio2022,
  title = {{{SequenceDiagram}} - {{IntelliJ IDEA}} \& {{Android Studio Plugin}} \textbackslash textbar {{Marketplace}}},
  date = {2022},
  url = {https://plugins.jetbrains.com/plugin/8286-sequencediagram},
  urldate = {2022-01-31}
}

@online{SequenceDiagramIntelliJIDEAAndroidStudio2022a,
  title = {{{SequenceDiagram}} - {{IntelliJ IDEA}} \& {{Android Studio Plugin}} | {{Marketplace}}},
  date = {2022},
  url = {https://plugins.jetbrains.com/plugin/8286-sequencediagram},
  urldate = {2022-01-31}
}

@article{SharedMentalModelsCoordinationLargeScaleEspinosa2001,
  title = {Shared {{Mental Models}} and {{Coordination}} in {{Large-Scale}}, {{Distributed Software Development}}},
  author = {Espinosa, Alberto and Kraut, Robert and Lerch, Javier and Slaughter, Sandra and Herbsleb, James and Mockus, Audris},
  date = {2001-12-31},
  journaltitle = {ICIS 2001 Proceedings},
  url = {https://aisel.aisnet.org/icis2001/64}
}

@inproceedings{SocialBarriersFacedNewcomersPlacingSteinmacher2015,
  title = {Social {{Barriers Faced}} by {{Newcomers Placing Their First Contribution}} in {{Open Source Software Projects}}},
  booktitle = {Proceedings of the 18th {{ACM Conference}} on {{Computer Supported Cooperative Work}} \& {{Social Computing}}},
  author = {Steinmacher, Igor and Conte, Tayana and Gerosa, Marco Aurélio and Redmiles, David},
  date = {2015-02},
  series = {{{CSCW}} '15},
  pages = {1379--1392},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2675133.2675215},
  url = {https://doi.org/10.1145/2675133.2675215},
  urldate = {2021-10-21},
  abstract = {Newcomers' seamless onboarding is important for online communities that depend upon leveraging the contribution of outsiders. Previous studies investigated aspects of the joining process and motivation in open collaboration communities, but few have focused on identifying and understanding the critical barriers newcomers face when placing their first contribution, a period that frequently leads to dropout. This is important for Open Source Software (OSS) projects, which receive contributions from many one-time contributors. Focusing on OSS, our study qualitatively analyzed social barriers that hindered newcomers' first contributions. We defined a conceptual model composed of 58 barriers including 13 social barriers. The barriers were identified from a qualitative data analysis considering different sources: a systematic literature review; open question responses gathered from OSS projects' contributors; students contributing to OSS projects; and semi-structured interviews with 36 developers from 14 different projects. This paper focuses on social barriers and its contributions include gathering empirical evidence of the barriers faced by newcomers, organizing and better understanding these barriers, surveying the literature from the perspective of the barriers, and identifying new potential research streams.},
  isbn = {978-1-4503-2922-4},
  keywords = {barriers,entry,joining,new contributor,newcomers,onboarding,online communities,open collaboration,open source software,qualitative study,social barriers,socialization}
}

@inproceedings{SocialBarriersFacedNewcomersPlacingSteinmacher2015a,
  title = {Social {{Barriers Faced}} by {{Newcomers Placing Their First Contribution}} in {{Open Source Software Projects}}},
  booktitle = {Proceedings of the 18th {{ACM Conference}} on {{Computer Supported Cooperative Work}} \& {{Social Computing}}},
  author = {Steinmacher, Igor and Conte, Tayana and Gerosa, Marco Aurélio and Redmiles, David},
  date = {2015-02-28},
  series = {{{CSCW}} '15},
  pages = {1379--1392},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2675133.2675215},
  url = {https://doi.org/10.1145/2675133.2675215},
  urldate = {2021-10-21},
  abstract = {Newcomers' seamless onboarding is important for online communities that depend upon leveraging the contribution of outsiders. Previous studies investigated aspects of the joining process and motivation in open collaboration communities, but few have focused on identifying and understanding the critical barriers newcomers face when placing their first contribution, a period that frequently leads to dropout. This is important for Open Source Software (OSS) projects, which receive contributions from many one-time contributors. Focusing on OSS, our study qualitatively analyzed social barriers that hindered newcomers' first contributions. We defined a conceptual model composed of 58 barriers including 13 social barriers. The barriers were identified from a qualitative data analysis considering different sources: a systematic literature review; open question responses gathered from OSS projects' contributors; students contributing to OSS projects; and semi-structured interviews with 36 developers from 14 different projects. This paper focuses on social barriers and its contributions include gathering empirical evidence of the barriers faced by newcomers, organizing and better understanding these barriers, surveying the literature from the perspective of the barriers, and identifying new potential research streams.},
  isbn = {978-1-4503-2922-4},
  keywords = {barriers,entry,joining,new contributor,newcomers,onboarding,online communities,open collaboration,open source software,qualitative study,social barriers,socialization}
}

@book{SoftwareDesignDecoded66WaysPetre2016,
  title = {Software {{Design Decoded}}: 66 {{Ways Experts Think}}},
  shorttitle = {Software {{Design Decoded}}},
  author = {Petre, Marian and van der Hoek, André},
  date = {2016-10-06},
  eprint = {EVE4DQAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {{MIT Press}},
  abstract = {An engaging, illustrated collection of insights revealing the practices and principles that expert software designers use to create great software.What makes an expert software designer? It is more than experience or innate ability. Expert software designers have specific habits, learned practices, and observed principles that they apply deliberately during their design work. This book offers sixty-six insights, distilled from years of studying experts at work, that capture what successful software designers actually do to create great software. The book presents these insights in a series of two-page illustrated spreads, with the principle and a short explanatory text on one page, and a drawing on the facing page. For example, “Experts generate alternatives” is illustrated by the same few balloons turned into a set of very different balloon animals. The text is engaging and accessible; the drawings are thought-provoking and often playful.Organized into such categories as “Experts reflect,” “Experts are not afraid,” and “Experts break the rules,” the insights range from “Experts prefer simple solutions” to “Experts see error as opportunity.” Readers learn that “Experts involve the user”; “Experts take inspiration from wherever they can”; “Experts design throughout the creation of software”; and “Experts draw the problem as much as they draw the solution.” One habit for an aspiring expert software designer to develop would be to read and reread this entertaining but essential little book. The insights described offer a guide for the novice or a reference for the veteran—in software design or any design profession.A companion web site provides an annotated bibliography that compiles key underpinning literature, the opportunity to suggest additional insights, and more.},
  isbn = {978-0-262-03518-7},
  langid = {english},
  pagetotal = {185},
  keywords = {Computers / Software Development & Engineering / Systems Analysis & Design}
}

@book{SolidCodeMarshall2009,
  title = {Solid {{Code}}},
  author = {Marshall, Donis and Bruno, John},
  date = {2009-02-18},
  eprint = {ZZtCAwAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {{Microsoft Press}},
  abstract = {Get best-in-class engineering practices to help you write more-robust, bug-free code. Two Microsoft .NET development experts share real-world examples and proven methods for optimizing the software development life cycle—from avoiding costly programming pitfalls to making your development team more efficient. Managed code developers at all levels will find design, prototyping, implementation, debugging, and testing tips to boost the quality of their code—today. Optimize each stage of the development process—from design to testing—and produce higher-quality applications.  Use metaprogramming to reduce code complexity, while increasing flexibility and maintainability Treat performance as a feature—and manage it throughout the development life cycle Apply best practices for application scalability Employ preventative security measures to ward off malicious attacks Practice defensive programming to catch bugs before run time Incorporate automated builds, code analysis, and testing into the daily engineering process Implement better source-control management and check-in procedures Establish a quality-driven, milestone-based project rhythm—and improve your results!},
  isbn = {978-0-7356-3851-8},
  langid = {english},
  pagetotal = {620},
  keywords = {Computers / Software Development & Engineering / General}
}

@inproceedings{SquishyCircuitsTangibleMediumElectronicsJohnson2010,
  title = {Squishy Circuits: A Tangible Medium for Electronics Education},
  shorttitle = {Squishy Circuits},
  booktitle = {{{CHI}} '10 {{Extended Abstracts}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Johnson, Samuel and Thomas, AnnMarie P.},
  date = {2010-04-10},
  pages = {4099--4104},
  publisher = {{ACM}},
  location = {{Atlanta Georgia USA}},
  doi = {10.1145/1753846.1754109},
  url = {https://dl.acm.org/doi/10.1145/1753846.1754109},
  urldate = {2022-04-20},
  abstract = {This paper reports on the design of a circuit building activity intended for children, which replaces wires with malleable conductive and non-conductive dough. By eliminating the need for soldering or breadboards, it becomes possible to very quickly incorporate movement and light into sculptures, and to introduce simple circuit concepts to children at a younger age. Future applications in both structured and unstructured learning environments, based on results from a preliminary pilot study, are presented.},
  eventtitle = {{{CHI}} '10: {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  isbn = {978-1-60558-930-5},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/8Q7RMDKC/Johnson and Thomas - 2010 - Squishy circuits a tangible medium for electronic.pdf}
}

@online{StatisticIntelliJIDEsPluginMarketplace2022,
  title = {Statistic - {{IntelliJ IDEs Plugin}} | {{Marketplace}}},
  date = {2022},
  url = {https://plugins.jetbrains.com/plugin/4509-statistic},
  urldate = {2022-01-31}
}

@misc{StatisticIntelliJIDEsPluginTextbar2022,
  title = {Statistic - {{IntelliJ IDEs Plugin}} \textbackslash textbar {{Marketplace}}},
  date = {2022},
  url = {https://plugins.jetbrains.com/plugin/4509-statistic},
  urldate = {2022-01-31}
}

@article{SystematicLiteratureReviewBlockchainbasedApplicationsCasino2019,
  title = {A Systematic Literature Review of Blockchain-Based Applications: {{Current}} Status, Classification and Open Issues},
  author = {Casino, Fran and Dasaklis, Thomas K. and Patsakis, Constantinos},
  date = {2019},
  journaltitle = {Telematics and Informatics},
  volume = {36},
  pages = {55--81},
  issn = {0736-5853},
  doi = {10.1016/j.tele.2018.11.006},
  url = {https://www.sciencedirect.com/science/article/pii/S0736585318306324},
  abstract = {This work provides a systematic literature review of blockchain-based applications across multiple domains. The aim is to investigate the current state of blockchain technology and its applications and to highlight how specific characteristics of this disruptive technology can revolutionise “business-as-usual” practices. To this end, the theoretical underpinnings of numerous research papers published in high ranked scientific journals during the last decade, along with several reports from grey literature as a means of streamlining our assessment and capturing the continuously expanding blockchain domain, are included in this review. Based on a structured, systematic review and thematic content analysis of the discovered literature, we present a comprehensive classification of blockchain-enabled applications across diverse sectors such as supply chain, business, healthcare, IoT, privacy, and data management, and we establish key themes, trends and emerging areas for research. We also point to the shortcomings identified in the relevant literature, particularly limitations the blockchain technology presents and how these limitations spawn across different sectors and industries. Building on these findings, we identify various research gaps and future exploratory directions that are anticipated to be of significant value both for academics and practitioners.},
  keywords = {Applications,Blockchain,Classification}
}

@online{TamingTransformersHighResolutionImageSynthesis,
  title = {Taming {{Transformers}} for {{High-Resolution Image Synthesis}}},
  url = {https://compvis.github.io/taming-transformers/},
  urldate = {2022-05-31},
  file = {/Users/brookeryan/Zotero/storage/QRJLZHF9/taming-transformers.html}
}

@inproceedings{TASSALAutofoldingSourceCodeSummarizationFowkes2016,
  title = {{{TASSAL}}: {{Autofolding}} for {{Source Code Summarization}}},
  shorttitle = {{{TASSAL}}},
  booktitle = {2016 {{IEEE}}/{{ACM}} 38th {{International Conference}} on {{Software Engineering Companion}} ({{ICSE-C}})},
  author = {Fowkes, Jaroslav and Chanthirasegaran, Pankajan and Ranca, Razvan and Allamanis, Miltiadis and Lapata, Mirella and Sutton, Charles},
  date = {2016-05},
  pages = {649--652},
  abstract = {We present a novel tool, TASSAL, that automatically creates a summary of each source file in a project by folding its least salient code regions. The intended use-case for our tool is the first-look problem: to help developers who are unfamiliar with a new codebase and are attempting to understand it. TASSAL is intended to aid developers in this task by folding away less informative regions of code and allowing them to focus their efforts on the most informative ones. While modern code editors do provide \textbackslash textbackslashemphcode folding to selectively hide blocks of code, it is impractical to use as folding decisions must be made manually or based on simple rules. We find through a case study that TASSAL is strongly preferred by experienced developers over simple folding baselines, demonstrating its usefulness. In short, we strongly believe TASSAL can aid program comprehension by turning code folding into a usable and valuable tool. A video highlighting the main features of TASSAL can be found at https://youtu.be/\_yu7JZgiBA4.},
  keywords = {code folding,code summarization,Conferences,Java,Optimization,program comprehension,Programming,Software engineering,Standards,topic modelling,Turning}
}

@inproceedings{TASSALAutofoldingSourceCodeSummarizationFowkes2016a,
  title = {{{TASSAL}}: {{Autofolding}} for {{Source Code Summarization}}},
  shorttitle = {{{TASSAL}}},
  booktitle = {2016 {{IEEE}}/{{ACM}} 38th {{International Conference}} on {{Software Engineering Companion}} ({{ICSE-C}})},
  author = {Fowkes, Jaroslav and Chanthirasegaran, Pankajan and Ranca, Razvan and Allamanis, Miltiadis and Lapata, Mirella and Sutton, Charles},
  date = {2016-05},
  pages = {649--652},
  abstract = {We present a novel tool, TASSAL, that automatically creates a summary of each source file in a project by folding its least salient code regions. The intended use-case for our tool is the first-look problem: to help developers who are unfamiliar with a new codebase and are attempting to understand it. TASSAL is intended to aid developers in this task by folding away less informative regions of code and allowing them to focus their efforts on the most informative ones. While modern code editors do provide \textbackslash emphcode folding to selectively hide blocks of code, it is impractical to use as folding decisions must be made manually or based on simple rules. We find through a case study that TASSAL is strongly preferred by experienced developers over simple folding baselines, demonstrating its usefulness. In short, we strongly believe TASSAL can aid program comprehension by turning code folding into a usable and valuable tool. A video highlighting the main features of TASSAL can be found at https://youtu.be/\_yu7JZgiBA4.},
  eventtitle = {2016 {{IEEE}}/{{ACM}} 38th {{International Conference}} on {{Software Engineering Companion}} ({{ICSE-C}})},
  keywords = {code folding,code summarization,Conferences,Java,Optimization,program comprehension,Programming,Software engineering,Standards,topic modelling,Turning}
}

@online{TeachableMachinea,
  title = {Teachable {{Machine}}},
  url = {https://teachablemachine.withgoogle.com/},
  urldate = {2022-04-20},
  abstract = {Train a computer to recognize your own images, sounds, \& poses.                 A fast, easy way to create machine learning models for your sites, apps, and more – no expertise or coding required.},
  file = {/Users/brookeryan/Zotero/storage/DQR4BG8Q/teachablemachine.withgoogle.com.html}
}

@inproceedings{TeachingSoftwareEngineeringProjectsLudewig2012,
  title = {Teaching Software Engineering with Projects},
  booktitle = {2012 {{First International Workshop}} on {{Software Engineering Education Based}} on {{Real-World Experiences}} ({{EduRex}})},
  author = {Ludewig, Jochen and Bogicevic, Ivan},
  date = {2012-06},
  pages = {25--28},
  doi = {10.1109/EduRex.2012.6225701},
  abstract = {The software engineering curriculum offered by the University of Stuttgart emphasizes project work from the first to the last semester. While some of the projects are similar to those in other programs, others are less common. In this paper, we describe an introductory course called “Program Understanding”, and the so called “Consulting Task”. We also give a short description of what we call the First Software Project and the Large Software Project. In the Program Understanding course, new students learn to understand a fairly large, complex program in order to implement some modifications. In the Large Software Project, some ten people work on a serious software development for one year. In the Consulting Task, a group of three students analyses a problem, usually one given by an industrial partner. The students investigate possible solutions, and finally deliver a recommendation. Both our experience and feedback from students, including feedback from alumni, prove that these projects are very successful and highly esteemed.},
  eventtitle = {2012 {{First International Workshop}} on {{Software Engineering Education Based}} on {{Real-World Experiences}} ({{EduRex}})},
  keywords = {Companies,Consulting Task,Educational institutions,Industries,Java,Program Understanding,Programming,Software,Software engineering,software engineering curriculum,software projects}
}

@inproceedings{TeachingSoftwareModellingUndergraduateIntroductionWestphal2019,
  title = {Teaching {{Software Modelling}} in an {{Undergraduate Introduction}} to {{Software Engineering}}},
  booktitle = {2019 {{ACM}}/{{IEEE}} 22nd {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems Companion}} ({{MODELS-C}})},
  author = {Westphal, Bernd},
  date = {2019-09},
  pages = {690--699},
  doi = {10.1109/MODELS-C.2019.00105},
  abstract = {In this article we present our design of an (otherwise completely ordinary) undergraduate introduction to software engineering with an emphasis on contemporary software modelling. A distinguishing aspect of our course is that we aim at a comprehensive introduction of modelling in two regards. Firstly, we introduce proper sub-languages of common modelling languages like UML class diagrams (rather than sampling examples or covering as many building blocks as possible) with a complete formal abstract syntax and semantics (so to give exact meaning to all models from the sub-language). Secondly, we emphasise issues arising from software models in the context of software engineering, e.g., that (formal) analysis results needs proper interpretation wrt. the considered software. We discuss our objectives wrt. formal modelling in software engineering, and outline the content of the course and the narratives that we use to reach these objectives. Evaluation results from four seasons of teaching the course give no indication of over-straining students wrt. level or workload.},
  eventtitle = {2019 {{ACM}}/{{IEEE}} 22nd {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems Companion}} ({{MODELS-C}})},
  keywords = {education,formal methods,software engineering,software modelling,teaching}
}

@inproceedings{TeachingUndergraduateSoftwareEngineeringCourseDorodchi2019,
  title = {Teaching an {{Undergraduate Software Engineering Course}} Using {{Active Learning}} and {{Open Source Projects}}},
  booktitle = {2019 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Dorodchi, Mohsen and Al-Hossami, Erfan and Nagahisarchoghaei, Mohammad and Diwadkar, Rohit Shenvi and Benedict, Aileen},
  date = {2019-10},
  pages = {1--5},
  publisher = {{IEEE}},
  location = {{Covington, KY, USA}},
  doi = {10.1109/FIE43999.2019.9028517},
  url = {https://ieeexplore.ieee.org/document/9028517/},
  urldate = {2021-09-28},
  eventtitle = {2019 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  isbn = {978-1-72811-746-1}
}

@inproceedings{TellMeWhatWrongPythonKohn2020,
  title = {Tell {{Me What}}'s {{Wrong}}: {{A Python IDE}} with {{Error Messages}}},
  shorttitle = {Tell {{Me What}}'s {{Wrong}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Kohn, Tobias and Manaris, Bill},
  date = {2020-02-26},
  series = {{{SIGCSE}} '20},
  pages = {1054--1060},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3328778.3366920},
  url = {https://doi.org/10.1145/3328778.3366920},
  urldate = {2021-09-27},
  abstract = {Development environments play a crucial role for novice programmers. Not only do they act as interface to type in and execute programs, but a programming environment is also responsible for reporting errors, managing in- and output when the program is running, or offering the programmer access to the underlying notional machine. In recent years several new educational programming environments for Python have been presented. However, the important issue of reporting errors has rarely been addressed and evaluations often hint that students main issue is the poor quality of Python's error messages. We have therefore written an educational Python environment with enhanced error messages. This paper presents the design and rationale of its three primary features: modifications to Python, enhanced error messages, and the visual debugger.},
  isbn = {978-1-4503-6793-6},
  keywords = {compiler error messages,ide,python}
}

@online{TipsHelpYouCreateAwesome,
  title = {6 Tips to Help You Create Awesome {{AI}} Generated Artworks with Neural Style Transfer},
  url = {https://nightcafe.studio/blogs/blog/6-tips-ai-generated-art-neural-style-transfer},
  urldate = {2022-06-01},
  abstract = {In the last year I’ve developed an intuition for how to make good AI generated artworks. Here are some tips to help you do the same.},
  langid = {english},
  organization = {{NightCafe Creator}}
}

@online{TobiasGerstenberg,
  title = {Tobias {{Gerstenberg}}},
  url = {https://hai.stanford.edu/people/tobias-gerstenberg},
  urldate = {2021-10-22},
  abstract = {Tobias Gerstenberg is an Assistant Professor in Psychology at Stanford University. He leads the Causality in Cognition Lab (http://cicl.stanford.edu) which studies the role that causality plays in people's understanding of the world, and of each other. In his research, Gerstenberg develops computational models of how people think. He tests the predictions of these models in large-scale online experiments, as well as in eye-tracking studies in the lab. Gerstenberg received his MSc and PhD from University College London under the supervision of Prof.},
  langid = {english},
  organization = {{Stanford HAI}},
  file = {/Users/brookeryan/Zotero/storage/R7PM4Y5K/tobias-gerstenberg.html}
}

@article{TodayWasGoodDayDailyMeyer2021,
  title = {Today {{Was}} a {{Good Day}}: {{The Daily Life}} of {{Software Developers}}},
  shorttitle = {Today {{Was}} a {{Good Day}}},
  author = {Meyer, André N. and Barr, Earl T. and Bird, Christian and Zimmermann, Thomas},
  date = {2021-05},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {47},
  number = {5},
  pages = {863--880},
  issn = {1939-3520},
  doi = {10.1109/TSE.2019.2904957},
  abstract = {What is a good workday for a software developer? What is a typical workday? We seek to answer these two questions to learn how to make good days typical. Concretely, answering these questions will help to optimize development processes and select tools that increase job satisfaction and productivity. Our work adds to a large body of research on how software developers spend their time. We report the results from 5,971 responses of professional developers at Microsoft, who reflected about what made their workdays good and typical, and self-reported about how they spent their time on various activities at work. We developed conceptual frameworks to help define and characterize developer workdays from two new perspectives: good and typical. Our analysis confirms some findings in previous work, including the fact that developers actually spend little time on development and developers' aversion for meetings and interruptions. It also discovered new findings, such as that only 1.7 percent of survey responses mentioned emails as a reason for a bad workday, and that meetings and interruptions are only unproductive during development phases; during phases of planning, specification and release, they are common and constructive. One key finding is the importance of agency, developers' control over their workday and whether it goes as planned or is disrupted by external factors. We present actionable recommendations for researchers and managers to prioritize process and tool improvements that make good workdays typical. For instance, in light of our finding on the importance of agency, we recommend that, where possible, managers empower developers to choose their tools and tasks.},
  keywords = {Birds,Collaboration,Encoding,good workdays,job satisfaction,productivity,Productivity,quantified workplace,Software,Software developer workdays,Task analysis,Tools,typical workdays}
}

@article{TodayWasGoodDayDailyMeyer2021a,
  title = {Today {{Was}} a {{Good Day}}: {{The Daily Life}} of {{Software Developers}}},
  shorttitle = {Today {{Was}} a {{Good Day}}},
  author = {Meyer, André N. and Barr, Earl T. and Bird, Christian and Zimmermann, Thomas},
  date = {2021-05},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {47},
  number = {5},
  pages = {863--880},
  issn = {1939-3520},
  doi = {10.1109/TSE.2019.2904957},
  abstract = {What is a good workday for a software developer? What is a typical workday? We seek to answer these two questions to learn how to make good days typical. Concretely, answering these questions will help to optimize development processes and select tools that increase job satisfaction and productivity. Our work adds to a large body of research on how software developers spend their time. We report the results from 5,971 responses of professional developers at Microsoft, who reflected about what made their workdays good and typical, and self-reported about how they spent their time on various activities at work. We developed conceptual frameworks to help define and characterize developer workdays from two new perspectives: good and typical. Our analysis confirms some findings in previous work, including the fact that developers actually spend little time on development and developers' aversion for meetings and interruptions. It also discovered new findings, such as that only 1.7 percent of survey responses mentioned emails as a reason for a bad workday, and that meetings and interruptions are only unproductive during development phases; during phases of planning, specification and release, they are common and constructive. One key finding is the importance of agency, developers' control over their workday and whether it goes as planned or is disrupted by external factors. We present actionable recommendations for researchers and managers to prioritize process and tool improvements that make good workdays typical. For instance, in light of our finding on the importance of agency, we recommend that, where possible, managers empower developers to choose their tools and tasks.},
  eventtitle = {{{IEEE Transactions}} on {{Software Engineering}}},
  keywords = {Birds,Collaboration,Encoding,good workdays,job satisfaction,productivity,Productivity,quantified workplace,Software,Software developer workdays,Task analysis,Tools,typical workdays}
}

@unpublished{TransfusionUnderstandingTransferLearningMedicalRaghu2019,
  title = {Transfusion: {{Understanding Transfer Learning}} for {{Medical Imaging}}},
  shorttitle = {Transfusion},
  author = {Raghu, Maithra and Zhang, Chiyuan and Kleinberg, Jon and Bengio, Samy},
  date = {2019-10-29},
  eprint = {1902.07208},
  eprinttype = {arxiv},
  primaryclass = {cs, stat},
  url = {http://arxiv.org/abs/1902.07208},
  urldate = {2021-10-03},
  abstract = {Transfer learning from natural image datasets, particularly ImageNet, using standard large models and corresponding pretrained weights has become a de-facto method for deep learning applications to medical imaging. However, there are fundamental differences in data sizes, features and task specifications between natural image classification and the target medical tasks, and there is little understanding of the effects of transfer. In this paper, we explore properties of transfer learning for medical imaging. A performance evaluation on two large scale medical imaging tasks shows that surprisingly, transfer offers little benefit to performance, and simple, lightweight models can perform comparably to ImageNet architectures. Investigating the learned representations and features, we find that some of the differences from transfer learning are due to the over-parametrization of standard models rather than sophisticated feature reuse. We isolate where useful feature reuse occurs, and outline the implications for more efficient model exploration. We also explore feature independent benefits of transfer arising from weight scalings.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computer Vision and Pattern Recognition,Computer Science - Machine Learning,Statistics - Machine Learning},
  file = {/Users/brookeryan/Zotero/storage/GSTHKXW9/Raghu et al. - 2019 - Transfusion Understanding Transfer Learning for M.pdf;/Users/brookeryan/Zotero/storage/56LDV34H/1902.html}
}

@inproceedings{TurnHeatUsingHeatMapsEdmison2020,
  title = {Turn up the {{Heat}}!: {{Using Heat Maps}} to {{Visualize Suspicious Code}} to {{Help Students Successfully Complete Programming Problems Faster}}},
  shorttitle = {Turn up the {{Heat}}!},
  booktitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  author = {Edmison, Bob and Edwards, Stephen H.},
  date = {2020-10},
  pages = {34--44},
  abstract = {The following topics are dealt with: computer science education; educational courses; computer aided instruction; software engineering; teaching; programming; formal specification; further education; educational institutions; team working.},
  eventtitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  keywords = {automated grading,automatic fault localization,debugging,Debugging,heat map,Heating systems,Measurement,SFL,Software,spectrum-based fault localization,statistical fault localization,testing,Testing,Tools,visualization,Visualization}
}

@online{UnderstandingVQVAEDALLEExplainedPt,
  title = {Understanding {{VQ-VAE}} ({{DALL-E Explained Pt}}. 1) - {{ML}}@{{B Blog}}},
  url = {https://ml.berkeley.edu/blog/posts/vq-vae/},
  urldate = {2022-05-31},
  abstract = {VQ-VAE is a powerful technique for learning discrete representations of complex data types like images, video, or audio. This technique has played a key role in recent state of the art works like OpenAI's DALL-E and Jukebox models.},
  langid = {english},
  organization = {{Understanding VQ-VAE (DALL-E Explained Pt. 1) - ML@B Blog}},
  file = {/Users/brookeryan/Zotero/storage/F3GUJARY/vq-vae.html}
}

@inproceedings{UnlimitedTraceTutorLearningCodeQi2020,
  title = {Unlimited {{Trace Tutor}}: {{Learning Code Tracing With Automatically Generated Programs}}},
  shorttitle = {Unlimited {{Trace Tutor}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Qi, Ruixiang and Fossati, Davide},
  date = {2020-02-26},
  series = {{{SIGCSE}} '20},
  pages = {427--433},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3328778.3366939},
  url = {https://doi.org/10.1145/3328778.3366939},
  urldate = {2021-09-27},
  abstract = {Previous research showed that creating specific types of tracing tables helps students learn code tracing, a fundamental skill in computer programming. This paper introduces Unlimited Trace Tutor, the first version of a code tracing tutoring system that can automatically generate tracing problems and create such tracing tables. We conducted a pilot experiment with volunteer students from an introductory level Computer Science course. We found that our software effectively helps student learn tracing "for" loops, "while" loops, and "if" statements. In this paper we describe the system's architecture, our algorithms for generating code and tracing tables, and the promising results of our pilot experiment.},
  isbn = {978-1-4503-6793-6},
  keywords = {automatic code generation,code tracing,tutoring systems}
}

@inproceedings{UseCodeReadingTeachingProgrammingBusjahn2013,
  title = {The Use of Code Reading in Teaching Programming},
  booktitle = {Proceedings of the 13th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Busjahn, Teresa and Schulte, Carsten},
  date = {2013-11},
  series = {Koli {{Calling}} '13},
  pages = {3--11},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2526968.2526969},
  url = {https://doi.org/10.1145/2526968.2526969},
  urldate = {2021-10-22},
  abstract = {Programming is an intertwined process of reading and writing. So far, computing education research has often focused on the writing part. This paper takes a further look into the role of reading source code in learning to program. In order to complement the findings from literature, we conducted interviews with programming instructors using the miracle question, on the role of code reading and comprehension. The analysis of these interviews describes this role in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. As a result, we suggest to take a further look into the different reading processes involved in programming, in order to add to the knowledge about programming instruction.},
  isbn = {978-1-4503-2482-3},
  keywords = {code comprehension,code reading,CS ed research,educational research,program comprehension,teaching programming}
}

@inproceedings{UseCodeReadingTeachingProgrammingBusjahn2013a,
  title = {The Use of Code Reading in Teaching Programming},
  booktitle = {Koli {{Calling}} '13},
  author = {Busjahn, T. and Schulte, Carsten},
  date = {2013},
  doi = {10.1145/2526968.2526969},
  abstract = {A further look into the role of reading source code in learning to program is taken, in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. Programming is an intertwined process of reading and writing. So far, computing education research has often focused on the writing part. This paper takes a further look into the role of reading source code in learning to program. In order to complement the findings from literature, we conducted interviews with programming instructors using the miracle question, on the role of code reading and comprehension. The analysis of these interviews describes this role in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. As a result, we suggest to take a further look into the different reading processes involved in programming, in order to add to the knowledge about programming instruction.}
}

@inproceedings{UseCodeReadingTeachingProgrammingBusjahn2013b,
  title = {The Use of Code Reading in Teaching Programming},
  booktitle = {Koli {{Calling}} '13},
  author = {Busjahn, T. and Schulte, Carsten},
  date = {2013},
  doi = {10.1145/2526968.2526969},
  abstract = {A further look into the role of reading source code in learning to program is taken, in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. Programming is an intertwined process of reading and writing. So far, computing education research has often focused on the writing part. This paper takes a further look into the role of reading source code in learning to program. In order to complement the findings from literature, we conducted interviews with programming instructors using the miracle question, on the role of code reading and comprehension. The analysis of these interviews describes this role in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. As a result, we suggest to take a further look into the different reading processes involved in programming, in order to add to the knowledge about programming instruction.}
}

@inproceedings{UseCodeReadingTeachingProgrammingBusjahn2013c,
  title = {The Use of Code Reading in Teaching Programming},
  booktitle = {Proceedings of the 13th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Busjahn, Teresa and Schulte, Carsten},
  date = {2013-11-14},
  series = {Koli {{Calling}} '13},
  pages = {3--11},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2526968.2526969},
  url = {https://doi.org/10.1145/2526968.2526969},
  urldate = {2021-10-22},
  abstract = {Programming is an intertwined process of reading and writing. So far, computing education research has often focused on the writing part. This paper takes a further look into the role of reading source code in learning to program. In order to complement the findings from literature, we conducted interviews with programming instructors using the miracle question, on the role of code reading and comprehension. The analysis of these interviews describes this role in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. As a result, we suggest to take a further look into the different reading processes involved in programming, in order to add to the knowledge about programming instruction.},
  isbn = {978-1-4503-2482-3},
  keywords = {code comprehension,code reading,CS ed research,educational research,program comprehension,teaching programming}
}

@inproceedings{UseCodeReadingTeachingProgrammingBusjahn2013d,
  title = {The Use of Code Reading in Teaching Programming},
  booktitle = {Proceedings of the 13th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Busjahn, Teresa and Schulte, Carsten},
  date = {2013-11-14},
  series = {Koli {{Calling}} '13},
  pages = {3--11},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2526968.2526969},
  url = {https://doi.org/10.1145/2526968.2526969},
  urldate = {2021-10-21},
  abstract = {Programming is an intertwined process of reading and writing. So far, computing education research has often focused on the writing part. This paper takes a further look into the role of reading source code in learning to program. In order to complement the findings from literature, we conducted interviews with programming instructors using the miracle question, on the role of code reading and comprehension. The analysis of these interviews describes this role in terms of the five categories conceptualization, occurrences, and effects of successful code reading, challenges for learners, as well as approaches to facilitate code reading. As a result, we suggest to take a further look into the different reading processes involved in programming, in order to add to the knowledge about programming instruction.},
  isbn = {978-1-4503-2482-3},
  keywords = {code comprehension,code reading,CS ed research,educational research,program comprehension,teaching programming}
}

@article{UsingGoaldrivenDeepLearningModelsYamins2016,
  title = {Using Goal-Driven Deep Learning Models to Understand Sensory Cortex},
  author = {Yamins, Daniel L K and DiCarlo, James J},
  date = {2016-03},
  journaltitle = {Nature Neuroscience},
  shortjournal = {Nat Neurosci},
  volume = {19},
  number = {3},
  pages = {356--365},
  issn = {1097-6256, 1546-1726},
  doi = {10.1038/nn.4244},
  url = {http://www.nature.com/articles/nn.4244},
  urldate = {2021-10-03},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/NSTRU3TS/Yamins and DiCarlo - 2016 - Using goal-driven deep learning models to understa.pdf}
}

@inproceedings{UsingHypothesesDebuggingAidAlaboudi2020,
  title = {Using {{Hypotheses}} as a {{Debugging Aid}}},
  booktitle = {2020 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Alaboudi, Abdulaziz and LaToza, Thomas D.},
  date = {2020-08},
  pages = {1--9},
  doi = {10.1109/VL/HCC50065.2020.9127273},
  abstract = {As developers debug, developers formulate hypotheses about the cause of the defect and gather evidence to test these hypotheses. To better understand the role of hypotheses in debugging, we conducted two studies. In a preliminary study, we found that, even with the benefit of modern internet resources, incorrect hypotheses can cause developers to investigate irrelevant information and block progress. We then conducted a controlled experiment where 20 developers debugged and recorded their hypotheses. We found that developers have few hypotheses, two per defect. Having a correct hypothesis early strongly predicted later success. We also studied the impact of two debugging aids: fault locations and potential hypotheses. Offering fault locations did not help developers formulate more correct hypotheses or debug more successfully. In contrast, offering potential hypotheses made developers six times more likely to succeed. These results demonstrate the potential of future debugging tools that enable finding and sharing relevant hypotheses.},
  keywords = {Debugging,fault localization,hypotheses}
}

@inproceedings{UsingHypothesesDebuggingAidAlaboudi2020a,
  title = {Using {{Hypotheses}} as a {{Debugging Aid}}},
  booktitle = {2020 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Alaboudi, Abdulaziz and LaToza, Thomas D.},
  date = {2020-08},
  pages = {1--9},
  issn = {1943-6106},
  doi = {10.1109/VL/HCC50065.2020.9127273},
  abstract = {As developers debug, developers formulate hypotheses about the cause of the defect and gather evidence to test these hypotheses. To better understand the role of hypotheses in debugging, we conducted two studies. In a preliminary study, we found that, even with the benefit of modern internet resources, incorrect hypotheses can cause developers to investigate irrelevant information and block progress. We then conducted a controlled experiment where 20 developers debugged and recorded their hypotheses. We found that developers have few hypotheses, two per defect. Having a correct hypothesis early strongly predicted later success. We also studied the impact of two debugging aids: fault locations and potential hypotheses. Offering fault locations did not help developers formulate more correct hypotheses or debug more successfully. In contrast, offering potential hypotheses made developers six times more likely to succeed. These results demonstrate the potential of future debugging tools that enable finding and sharing relevant hypotheses.},
  eventtitle = {2020 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  keywords = {Debugging,fault localization,hypotheses}
}

@online{UsingOverleafZoteroMeiYuxuan,
  title = {Using {{Overleaf}} with {{Zotero}}},
  author = {Mei, Yuxuan},
  url = {https://homes.cs.washington.edu/~ym2552/blogs/overleaf-with-zotero.html},
  urldate = {2022-06-07},
  file = {/Users/brookeryan/Zotero/storage/M6S329ER/overleaf-with-zotero.html}
}

@inproceedings{VisualizingTestsuitesAidSoftwareUnderstandingCornelissen2007,
  title = {Visualizing {{Testsuites}} to {{Aid}} in {{Software Understanding}}},
  booktitle = {11th {{European Conference}} on {{Software Maintenance}} and {{Reengineering}} ({{CSMR}}'07)},
  author = {Cornelissen, Bas and van Deursen, Arie and Moonen, Leon and Zaidman, Andy},
  options = {useprefix=true},
  date = {2007-03},
  pages = {213--222},
  issn = {1534-5351},
  doi = {10.1109/CSMR.2007.54},
  abstract = {Agile software development methods such as extreme programming have brought renewed attention to testing during the software development process, both as a quality assurance method and as a form of live documentation. It is for this reason that a software system's testsuite is an ideal starting point for gaining knowledge about its inner workings. In this paper, we propose to use sequence diagrams to visualize information that is dynamically obtained from testsuites. We employ abstraction techniques such as constructor hiding and stack depth limitation to make the diagrams more scalable. We use JPacman as a case study to validate our results by consulting with domain experts, and use their feedback to fine-tune our techniques},
  eventtitle = {11th {{European Conference}} on {{Software Maintenance}} and {{Reengineering}} ({{CSMR}}'07)},
  keywords = {Documentation,Feedback,Programming,Quality assurance,Software maintenance,Software quality,Software systems,Software testing,System testing,Visualization}
}

@online{VisualSearchAttentionalBlinkIntroduction,
  title = {Visual {{Search}} and {{Attentional Blink}} | {{Introduction}} to {{Psychology}} | {{Brain}} and {{Cognitive Sciences}} | {{MIT OpenCourseWare}}},
  url = {https://ocw.mit.edu/courses/9-00sc-introduction-to-psychology-fall-2011/resources/visual-search-and-attentional-blink/},
  urldate = {2022-05-19},
  file = {/Users/brookeryan/Zotero/storage/LA5I98CP/visual-search-and-attentional-blink.html}
}

@misc{WelcomeApacheLuceneApache,
  title = {Welcome to {{Apache Lucene}}},
  author = {{Apache}},
  url = {https://lucene.apache.org/},
  urldate = {2021-12-10}
}

@online{WelcomeApacheLuceneApachea,
  title = {Welcome to {{Apache Lucene}}},
  author = {Apache},
  url = {https://lucene.apache.org/},
  urldate = {2021-12-10}
}

@inproceedings{WhatAILiteracyCompetenciesDesignLong2020,
  title = {What Is {{AI Literacy}}? {{Competencies}} and {{Design Considerations}}},
  shorttitle = {What Is {{AI Literacy}}?},
  booktitle = {Proceedings of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Long, Duri and Magerko, Brian},
  date = {2020-04-21},
  pages = {1--16},
  publisher = {{ACM}},
  location = {{Honolulu HI USA}},
  doi = {10.1145/3313831.3376727},
  url = {https://dl.acm.org/doi/10.1145/3313831.3376727},
  urldate = {2022-04-20},
  abstract = {Artificial intelligence (AI) is becoming increasingly integrated in user-facing technology, but public understanding of these technologies is often limited. There is a need for additional HCI research investigating a) what competencies users need in order to effectively interact with and critically evaluate AI and b) how to design learnercentered AI technologies that foster increased user understanding of AI. This paper takes a step towards realizing both of these goals by providing a concrete definition of AI literacy based on existing research. We synthesize a variety of interdisciplinary literature into a set of core competencies of AI literacy and suggest several design considerations to support AI developers and educators in creating learner-centered AI. These competencies and design considerations are organized in a conceptual framework thematically derived from the literature. This paper’s contributions can be used to start a conversation about and guide future research on AI literacy within the HCI community.},
  eventtitle = {{{CHI}} '20: {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  isbn = {978-1-4503-6708-0},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/2SC2VRCR/Long and Magerko - 2020 - What is AI Literacy Competencies and Design Consi.pdf}
}

@article{WhatGoodStatementPurposeCallan,
  title = {What’s a {{Good Statement}} of {{Purpose}}},
  author = {Callan, Eamonn},
  pages = {3},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/8Z7NQ4UN/Callan - What’s a Good Statement of Purpose.pdf}
}

@inproceedings{WhatMakesGreatSoftwareEngineer2015,
  title = {What {{Makes A Great Software Engineer}}},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  date = {2015-05},
  publisher = {{IEEE}},
  location = {{Florence, Italy}},
  abstract = {Good software engineers are essential to the creation of good software. However, most of what we know about softwareengineering expertise are vague stereotypes, such as ‘excellent communicators’ and ‘great teammates’. The lack of specificity in our understanding hinders researchers from reasoning about them, employers from identifying them, and young engineers from becoming them. Our understanding also lacks breadth: what are all the distinguishing attributes of great engineers (technical expertise and beyond)? We took a first step in addressing these gaps by interviewing 59 experienced engineers across 13 divisions at Microsoft, uncovering 53 attributes of great engineers. We explain the attributes and examine how the most salient of these impact projects and teams. We discuss implications of this knowledge on research and the hiring and training of engineers.},
  eventtitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}} ({{ICSE}})},
  isbn = {978-1-4799-1934-5},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/Q73DXY4H/2015 - [No title found].pdf}
}

@inproceedings{WhatMakesGreatSoftwareEngineerLi2015,
  title = {What {{Makes}} a {{Great Software Engineer}}?},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  author = {Li, Paul Luo and Ko, Andrew J. and Zhu, Jiamin},
  date = {2015-05},
  volume = {1},
  pages = {700--710},
  doi = {10.1109/ICSE.2015.335},
  abstract = {Good software engineers are essential to the creation of good software. However, most of what we know about software-engineering expertise are vague stereotypes, such as 'excellent communicators' and 'great teammates'. The lack of specificity in our understanding hinders researchers from reasoning about them, employers from identifying them, and young engineers from becoming them. Our understanding also lacks breadth: what are all the distinguishing attributes of great engineers (technical expertise and beyond)? We took a first step in addressing these gaps by interviewing 59 experienced engineers across 13 divisions at Microsoft, uncovering 53 attributes of great engineers. We explain the attributes and examine how the most salient of these impact projects and teams. We discuss implications of this knowledge on research and the hiring and training of engineers.},
  keywords = {Companies,expertise,Interviews,Knowledge engineering,Lead,Software,Software engineering,Software engineers,teamwork}
}

@inproceedings{WhatMakesGreatSoftwareEngineerLi2015a,
  title = {What {{Makes}} a {{Great Software Engineer}}?},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  author = {Li, Paul Luo and Ko, Andrew J. and Zhu, Jiamin},
  date = {2015-05},
  volume = {1},
  pages = {700--710},
  issn = {1558-1225},
  doi = {10.1109/ICSE.2015.335},
  abstract = {Good software engineers are essential to the creation of good software. However, most of what we know about software-engineering expertise are vague stereotypes, such as 'excellent communicators' and 'great teammates'. The lack of specificity in our understanding hinders researchers from reasoning about them, employers from identifying them, and young engineers from becoming them. Our understanding also lacks breadth: what are all the distinguishing attributes of great engineers (technical expertise and beyond)? We took a first step in addressing these gaps by interviewing 59 experienced engineers across 13 divisions at Microsoft, uncovering 53 attributes of great engineers. We explain the attributes and examine how the most salient of these impact projects and teams. We discuss implications of this knowledge on research and the hiring and training of engineers.},
  eventtitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  keywords = {Companies,expertise,Interviews,Knowledge engineering,Lead,Software,Software engineering,Software engineers,teamwork}
}

@inproceedings{WhatMakesGreatSoftwareEngineerLi2015b,
  title = {What {{Makes}} a {{Great Software Engineer}}?},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  author = {Li, Paul Luo and Ko, Andrew J. and Zhu, Jiamin},
  date = {2015-05},
  volume = {1},
  pages = {700--710},
  issn = {1558-1225},
  doi = {10.1109/ICSE.2015.335},
  abstract = {Good software engineers are essential to the creation of good software. However, most of what we know about software-engineering expertise are vague stereotypes, such as 'excellent communicators' and 'great teammates'. The lack of specificity in our understanding hinders researchers from reasoning about them, employers from identifying them, and young engineers from becoming them. Our understanding also lacks breadth: what are all the distinguishing attributes of great engineers (technical expertise and beyond)? We took a first step in addressing these gaps by interviewing 59 experienced engineers across 13 divisions at Microsoft, uncovering 53 attributes of great engineers. We explain the attributes and examine how the most salient of these impact projects and teams. We discuss implications of this knowledge on research and the hiring and training of engineers.},
  eventtitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  keywords = {Companies,expertise,Interviews,Knowledge engineering,Lead,Software,Software engineering,Software engineers,teamwork}
}

@article{WhatTheyLearnWhenTheyStrawhacker2019,
  title = {What They Learn When They Learn Coding: Investigating Cognitive Domains and Computer Programming Knowledge in Young Children},
  shorttitle = {What They Learn When They Learn Coding},
  author = {Strawhacker, Amanda and Bers, Marina Umaschi},
  date = {2019-06},
  journaltitle = {Educational Technology Research and Development},
  shortjournal = {Education Tech Research Dev},
  volume = {67},
  number = {3},
  pages = {541--575},
  issn = {1042-1629, 1556-6501},
  doi = {10.1007/s11423-018-9622-x},
  url = {http://link.springer.com/10.1007/s11423-018-9622-x},
  urldate = {2022-04-20},
  abstract = {Computer programming for young children has grown in popularity among both educators and product developers, but still relatively little is known about what skills children are developing when they code. This study investigated N = 57 Kindergarten through second grade children’s performance on a programming assessment after engaging in a 6-week curricular intervention. Children used the ScratchJr programming tool to create animated stories, collages, and games. At the end of the learning intervention, children were assessed on their knowledge of the ScratchJr language and underlying reasoning. Specifically, we explored children’s errors on the assessment to determine evidence of domain-specific reasoning (e.g. mathematic, verbal, causal). Results show that while all students mastered foundational coding concepts, there were marked differences in performance and comprehension across the three grade levels. Interpretation of results suggests a developmental progression inherent in programming knowledge acquisition.; Implications for computer programming education and developmental research are discussed.},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/YAUDK4CN/Strawhacker and Bers - 2019 - What they learn when they learn coding investigat.pdf}
}

@online{Wombob,
  title = {Wombo},
  url = {https://app.wombo.art/},
  organization = {{Wombo}},
  file = {/Users/brookeryan/Zotero/storage/W66VB2AG/Wombo_Ghibli_GroovyTimes.jpeg;/Users/brookeryan/Zotero/storage/ZJ6FF9TS/Dream_TradingCard.jpg}
}

@book{WritingMemoirCraftKing2010,
  title = {On Writing: A Memoir of the Craft},
  shorttitle = {On Writing},
  author = {King, Stephen},
  date = {2010},
  edition = {Scribner trade paperback edition},
  publisher = {{Scribner}},
  location = {{New York}},
  isbn = {978-1-4391-5681-0},
  pagetotal = {291},
  keywords = {20th century,Authors; American,Authorship,Biography,Horror tales,King; Stephen}
}

@book{WritingMemoirCraftKing2010a,
  title = {On Writing: A Memoir of the Craft},
  shorttitle = {On Writing},
  author = {King, Stephen},
  date = {2010},
  edition = {Scribner trade paperback edition},
  publisher = {{Scribner}},
  location = {{New York}},
  isbn = {978-1-4391-5681-0},
  pagetotal = {291},
  keywords = {20th century,Authors; American,Authorship,Biography,Horror tales,King; Stephen}
}

@book{WritingSolidCodeMicrosoftTechniquesMaguire1993,
  title = {Writing Solid Code: {{Microsoft}}'s Techniques for Developing Bug-Free Programs},
  shorttitle = {Writing Solid Code},
  author = {Maguire, Steve},
  date = {1993},
  publisher = {{Microsoft Press}},
  location = {{USA}},
  isbn = {978-1-55615-551-2},
  pagetotal = {256}
}

@unpublished{ZeroShotTexttoImageGenerationRamesh2021,
  title = {Zero-{{Shot Text-to-Image Generation}}},
  author = {Ramesh, Aditya and Pavlov, Mikhail and Goh, Gabriel and Gray, Scott and Voss, Chelsea and Radford, Alec and Chen, Mark and Sutskever, Ilya},
  date = {2021-02-26},
  eprint = {2102.12092},
  eprinttype = {arxiv},
  primaryclass = {cs},
  url = {http://arxiv.org/abs/2102.12092},
  urldate = {2022-04-20},
  abstract = {Text-to-image generation has traditionally focused on finding better modeling assumptions for training on a fixed dataset. These assumptions might involve complex architectures, auxiliary losses, or side information such as object part labels or segmentation masks supplied during training. We describe a simple approach for this task based on a transformer that autoregressively models the text and image tokens as a single stream of data. With sufficient data and scale, our approach is competitive with previous domain-specific models when evaluated in a zero-shot fashion.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computer Vision and Pattern Recognition,Computer Science - Machine Learning},
  file = {/Users/brookeryan/Zotero/storage/PHN9AKTY/Ramesh et al. - 2021 - Zero-Shot Text-to-Image Generation.pdf;/Users/brookeryan/Zotero/storage/ERQV8XNW/2102.html}
}

@inproceedings{ZeroShotTexttoImageGenerationRamesh2021a,
  title = {Zero-{{Shot Text-to-Image Generation}}},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Machine Learning}}},
  author = {Ramesh, Aditya and Pavlov, Mikhail and Goh, Gabriel and Gray, Scott and Voss, Chelsea and Radford, Alec and Chen, Mark and Sutskever, Ilya},
  date = {2021-07-01},
  pages = {8821--8831},
  publisher = {{PMLR}},
  issn = {2640-3498},
  url = {https://proceedings.mlr.press/v139/ramesh21a.html},
  urldate = {2022-05-12},
  abstract = {Text-to-image generation has traditionally focused on finding better modeling assumptions for training on a fixed dataset. These assumptions might involve complex architectures, auxiliary losses, or side information such as object part labels or segmentation masks supplied during training. We describe a simple approach for this task based on a transformer that autoregressively models the text and image tokens as a single stream of data. With sufficient data and scale, our approach is competitive with previous domain-specific models when evaluated in a zero-shot fashion.},
  eventtitle = {International {{Conference}} on {{Machine Learning}}},
  langid = {english},
  file = {/Users/brookeryan/Zotero/storage/7D524AT3/Ramesh et al. - 2021 - Zero-Shot Text-to-Image Generation.pdf}
}

@book{zotero-undefineda,
  type = {book}
}


